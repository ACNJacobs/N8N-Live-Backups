{
  "createdAt": "2025-08-05T13:29:05.429Z",
  "updatedAt": "2025-08-19T07:54:33.000Z",
  "id": "K6nlavoIgQdJoaVz",
  "name": "workorders sap",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "authentication": "basicAuth",
        "formTitle": "SAP Workorders",
        "formFields": {
          "values": [
            {
              "fieldLabel": "data",
              "fieldType": "file",
              "acceptFileTypes": "pdf",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -1664,
        -160
      ],
      "id": "94288e84-845a-40d7-9cfa-aaa3c1be3ab8",
      "name": "On form submission",
      "webhookId": "fd36d0af-9da3-46fc-ab34-e49789afffa8",
      "credentials": {
        "httpBasicAuth": {
          "id": "stLN166bSaCjaEP3",
          "name": "formlogin"
        }
      }
    },
    {
      "parameters": {
        "operation": "split"
      },
      "type": "n8n-nodes-pdf-lib.pdfLib",
      "typeVersion": 1,
      "position": [
        -1200,
        -144
      ],
      "id": "2f429bc9-7e87-43a4-b6b3-c8366adfa6f8",
      "name": "PDF-LIB"
    },
    {
      "parameters": {
        "jsCode": "const binary = items[0].binary;\n\nreturn Object.keys(binary).map((key) => {\n  return {\n    binary: {\n      data: binary[key]\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        -144
      ],
      "id": "02167bb3-d72a-48c9-9f5a-efbaaeed45ea",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "destinationKey": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -704,
        -144
      ],
      "id": "703172f4-98ed-41a5-97d6-50ddc1c627f7",
      "name": "Transform to base64"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Je ontvangt Ã©Ã©n of meerdere werkbon-documenten uit SAP. Deze documenten bevatten gegevens over onderhouds- of installatieopdrachten, inclusief locatie, installatie, probleemomschrijving, betrokken materialen en contactpersonen.\\n\\nJe taak is om per werkbon een gestructureerd JSON-object aan te maken met de vaste structuur hieronder. Vul elk veld in als de waarde uit het document gehaald kan worden. Gebruik `null` voor ontbrekende velden, maar laat geen velden weg. Als een document uit meerdere pagina's bestaat, behandel dit als Ã©Ã©n geheel.\\n\\n**ðŸŸ¡ Nieuw: detecteer verkeerd gescande of onvolledige bonnen.**\\n- Als een bon enkel een koptekst bevat, zoals een `document_id` of `work_order_id`, maar gÃ©Ã©n inhoud zoals `problem_description`, `order_number`, `func_loc`, enz., dan voeg je dit extra veld toe:\\n  ```json\\n  \\\"data_quality\\\": \\\"incomplete_header_only\\\"\\n  ```\\n- Alle andere bonnen hebben het veld:\\n  ```json\\n  \\\"data_quality\\\": \\\"complete\\\"\\n  ```\\n- Dit veld moet ALTIJD aanwezig zijn, en alleen deze twee mogelijke waarden bevatten.\\n\\n**Belangrijk: gebruik altijd exact deze JSON-structuur per werkbon:**\\n\\n- `document_type`: altijd \\\"SAP Work Order\\\"\\n- `header`: object met:\\n  - `company`\\n  - `document_id`\\n  - `title`\\n  - `work_order_id`\\n  - `qr_code`: true of false\\n\\n- `notification_details`: object met:\\n  - `notification_number`\\n  - `issued_by`\\n  - `date`\\n  - `problem_description`\\n  - `op_name`\\n  - `tel_number`\\n\\n- `order_details`: object met:\\n  - `order_number`\\n  - `operation`\\n  - `task`\\n  - `budget_number`\\n  - `priority`\\n  - `workcenter`\\n  - `person`\\n  - `workplace`\\n\\n- `location_details`: object met:\\n  - `func_loc`\\n  - `func_loc_description`\\n  - `installation`\\n  - `equipment`\\n  - `equipment_description`\\n  - `criticality`\\n  - `room`\\n  - `power`\\n  - `liquid`\\n  - `pressure`\\n  - `temperature`\\n  - `product`\\n  - `flow_rate`\\n\\n- `activities`: object met:\\n  - `activity_list`: lege array of lijst van geplande activiteiten\\n\\n- `reservations`: object met:\\n  - `reservation_list`: lijst van benodigde materialen, elk met:\\n    - `material`\\n    - `description`\\n    - `quantity`\\n    - `unit`\\n    - `storage_loc`\\n\\n- `attachments`: object met:\\n  - `attachment_list`\\n\\n- `printing_details`: object met:\\n  - `print_by`\\n  - `tel`\\n  - `print_on`\\n\\n- `data_quality`: \\\"complete\\\" of \\\"incomplete_header_only\\\"\\n\\n**Voor alle velden geldt:**\\n- Neem waarden letterlijk over zoals in het document staat.\\n- Gebruik `null` als iets ontbreekt.\\n- Geen uitleg, geen markdown, alleen pure JSON per werkbon.\\n- Zet elke werkbon in een los JSON-object in een array.\\n\\nVoorbeeld retour:\\n```json\\n[\\n  {\\n    \\\"document_type\\\": \\\"SAP Work Order\\\",\\n    \\\"header\\\": {\\n      \\\"company\\\": \\\"oleon\\\",\\n      \\\"document_id\\\": \\\"7501-100P013\\\",\\n      ...\\n    },\\n    ...\\n    \\\"data_quality\\\": \\\"complete\\\"\\n  },\\n  {\\n    \\\"document_type\\\": \\\"SAP Work Order\\\",\\n    \\\"header\\\": {\\n      \\\"company\\\": \\\"oleon\\\",\\n      \\\"document_id\\\": \\\"7501-490KR001\\\",\\n      ...\\n    },\\n    ...\\n    \\\"data_quality\\\": \\\"incomplete_header_only\\\"\\n  }\\n]\\n```\\n\\nVerwerk alle bonnen die je in het document tegenkomt op deze manier.\"\n        },\n        {\n          \"inline_data\": {\n            \"mime_type\": \"application/pdf\",\n            \"data\": \"{{ $json.data }}\"\n          }\n        }\n      ]\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -496,
        -144
      ],
      "id": "258303da-e811-4066-99e3-c1e32e626a76",
      "name": "Extract PDF Content Using Gemini Vision",
      "credentials": {
        "httpQueryAuth": {
          "id": "t6Npfn3CB5NrgzCP",
          "name": "Query Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const results = [];\nconst inputItems = $input.all();\n\nfor (const item of inputItems) {\n  if (item.binary) {\n    for (const [key, bin] of Object.entries(item.binary)) {\n      const fileName = bin.fileName?.toLowerCase() || '';\n      const mimeType = bin.mimeType?.toLowerCase() || '';\n\n      const isAttachment = key.startsWith('attachment_') || \n                           key.includes('attachment') || \n                           key.startsWith('data_') ||\n                           bin.fileName;\n\n      // Herkenbare extensies\n      const isPdf = mimeType === 'application/pdf' || fileName.endsWith('.pdf');\n      const isJpg = mimeType === 'image/jpeg' || fileName.endsWith('.jpg') || fileName.endsWith('.jpeg');\n      const isPng = mimeType === 'image/png' || fileName.endsWith('.png');\n\n      const isAllowedFile = isPdf || isJpg || isPng;\n\n      if (isAttachment && isAllowedFile) {\n        results.push({\n          binary: {\n            data: bin,\n          },\n          json: {\n            fileName: bin.fileName || `attachment_${key}`,\n            mimeType: bin.mimeType || 'unknown',\n            originalKey: key,\n          },\n        });\n      }\n    }\n  }\n}\n\nreturn results.length > 0 ? results : [{\n  json: {\n    error: 'Geen PDF of afbeeldingsbestanden gevonden',\n    tip: 'Controleer of er PDF/JPG/PNG-bijlagen in de e-mail zitten en of de e-mail correct is verwerkt'\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1424,
        -160
      ],
      "id": "2b542a86-bd92-41f2-a8e4-2ba813cfa56e",
      "name": "Extract Attachments2",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "const allItems = $input.all();\n\nlet bonnen = [];\n\nfor (let i = 0; i < allItems.length; i++) {\n  const rawText = allItems[i].json.candidates?.[0]?.content?.parts?.[0]?.text;\n\n  if (!rawText) continue;\n\n  // Zoek alle JSON-blokken tussen ```json en ```\n  const jsonBlocks = rawText.match(/```json\\s*([\\s\\S]*?)```/g);\n  if (!jsonBlocks) continue;\n\n  for (const block of jsonBlocks) {\n    const jsonString = block.replace(/```json\\s*|```/g, '');\n\n    try {\n      const parsed = JSON.parse(jsonString);\n\n      parsed.bon_number = bonnen.length + 1;\n\n      bonnen.push(parsed);\n    } catch (e) {\n      // JSON parse faalt â†’ negeren\n    }\n  }\n}\n\n// Output in Ã©Ã©n object onder de sleutel \"bonnen\"\nreturn [{ json: { bonnen } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -272,
        -144
      ],
      "id": "d06caa74-b44f-4fd1-9e24-3353fbd202cc",
      "name": "Code3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://asbdev-apps.altrad.com/ords/dev/remote_central/capture/json",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -32,
        -288
      ],
      "id": "a1e09453-ef15-488f-b862-6919e5d67919",
      "name": "HTTP Request",
      "credentials": {
        "httpBasicAuth": {
          "id": "E4b7CmW8gisIRQ8H",
          "name": "Unnamed credential"
        },
        "oAuth2Api": {
          "id": "OzWnM52GH8FKZqPv",
          "name": "oracle api"
        }
      }
    }
  ],
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "Extract Attachments2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF-LIB": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Transform to base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform to base64": {
      "main": [
        [
          {
            "node": "Extract PDF Content Using Gemini Vision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Content Using Gemini Vision": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Attachments2": {
      "main": [
        [
          {
            "node": "PDF-LIB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "8b6a6c87-24e3-4ce4-a2c3-fe26a0f79c91",
  "triggerCount": 1,
  "tags": []
}