{
  "createdAt": "2025-07-26T13:57:00.782Z",
  "updatedAt": "2025-08-26T12:39:57.000Z",
  "id": "pJHK6uI0i1tsXkya",
  "name": "isometrics",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "formTitle": "isomatic test",
        "formFields": {
          "values": [
            {
              "fieldLabel": "mail",
              "fieldType": "email",
              "placeholder": "Your email"
            },
            {
              "fieldLabel": "Iso drawing",
              "fieldType": "file",
              "multipleFiles": false
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -1232,
        -304
      ],
      "id": "14881abd-d51a-488a-b9af-c83efff450f8",
      "name": "On form submission",
      "webhookId": "a97d5418-2d55-40c0-b5c4-5ac0fca5ca3a"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.candidates[0].content.parts[0].text }}",
        "options": {
          "systemMessage": "=# Industrial Insulation Drawing Analysis Agent\n\n## INSTRUCTIONS FOR AI ASSISTANT\nWhen you need to analyze and calculate an insulation drawing, follow these steps:\n\n### STEP 1: Identify all sequence numbers\n- Look for circles with numbers on the drawing\n- Each sequence number represents an insulation element\n- Note all sequence numbers systematically\n\n### STEP 2: Read the length notation\n- 1000 = 1000mm = 1.0 meter\n- 1000x2 = 2000mm = 2.0 meters\n- 500 = 500mm = 0.5 meters\n- All dimensions are standard in millimeters\n\n### STEP 3: Identify taperings/reductions\n- -100 after a sequence number = tapering of 100mm\n- A tapering means one side is made flat\n- This reduces the circumference: 1030mm - 100mm = 930mm actual circumference\n\n### STEP 4: Determine circumference types\nCheck in the specification table:\n- Normal circumference: Base circumference from specifications\n- Branch connections: Base circumference minus reduction (like -100mm)\n- Overlap: Always add overlap (typically 50mm)\n\n### STEP 5: Calculate per category\n- Normal segments: Add up all lengths WITHOUT taperings or reductions\n- Branch connections: Add up all lengths WITH taperings or circumference reductions\n\n### STEP 6: Surface area calculation\n- Normal segments: [Total length] × [Circumference + overlap] = m²\n- Branch connections: [Total length] × [Reduced circumference + overlap] = m²\n- Total = Normal + Branch connections\n\n### STEP 7: Material calculation\n- Insulation shells: Total length ÷ 1 meter = number of pieces needed\n- Cladding sheets: Total surface area in m²\n\n## IMPORTANT POINTS\n- Taperings reduce circumference, not length\n- Overlap must always be added to the actual circumference\n- Branch connections often have different circumferences than the main line\n- Sequence numbers don't always run sequentially - check all visible numbers\n\n## OUTPUT FORMAT\n\nProvide analysis in this exact JSON format:\n\n```json\n{\n  \"drawing_analysis\": {\n    \"project_info\": {\n      \"job_number\": \"\",\n      \"po_number\": \"\",\n      \"material\": \"\",\n      \"insulation_type\": \"\",\n      \"pipe_diameter\": \"\",\n      \"date\": \"\",\n      \"location\": \"\"\n    },\n    \"sequence_analysis\": {\n      \"sequence_length_table\": {\n        \"Sequence 1\": \"XXXmm\",\n        \"Sequence 2\": \"XXXmm\",\n        \"Sequence 3\": \"XXXmm\"\n      },\n      \"sequence_tapering_table\": {\n        \"Sequence 1\": \"normal\",\n        \"Sequence 2\": \"-25mm\",\n        \"Sequence 3\": \"normal\"\n      },\n      \"grouped_sequences\": {\n        \"by_length\": {\n          \"550mm\": {\n            \"quantity\": \"3 pieces\",\n            \"sequences\": [\"1\", \"2\", \"10\"],\n            \"tapering_status\": [\"normal\", \"normal\", \"tapered\"]\n          },\n          \"1000mm\": {\n            \"quantity\": \"5 pieces\", \n            \"sequences\": [\"3\", \"5\", \"8\", \"9\", \"11\"],\n            \"tapering_status\": [\"normal\", \"tapered\", \"tapered\", \"tapered\", \"tapered\"]\n          },\n          \"700mm\": {\n            \"quantity\": \"1 piece\",\n            \"sequences\": [\"6\"],\n            \"tapering_status\": [\"tapered\"]\n          },\n          \"810mm\": {\n            \"quantity\": \"1 piece\",\n            \"sequences\": [\"7\"],\n            \"tapering_status\": [\"tapered\"]\n          },\n          \"400mm\": {\n            \"quantity\": \"1 piece\",\n            \"sequences\": [\"4\"],\n            \"tapering_status\": [\"normal\"]\n          }\n        },\n        \"summary\": {\n          \"total_unique_lengths\": \"5\",\n          \"normal_segments_total\": \"X.XX meters\",\n          \"tapered_segments_total\": \"X.XX meters\"\n        }\n      }\n    },\n    \"technical_specifications\": {\n      \"base_circumference\": \"XXXXmm\",\n      \"overlap\": \"XXmm\",\n      \"normal_circumference\": \"XXXXmm (base + overlap)\",\n      \"tapered_circumference\": \"XXXXmm (base - reduction + overlap)\"\n    },\n    \"material_calculations\": {\n      \"total_pipe_length\": \"X.XX meters\",\n      \"normal_segments\": {\n        \"length\": \"X.XX meters\",\n        \"circumference\": \"XXXXmm\",\n        \"surface_area\": \"X.XX m²\"\n      },\n      \"tapered_segments\": {\n        \"length\": \"X.XX meters\",\n        \"circumference\": \"XXXXmm\", \n        \"surface_area\": \"X.XX m²\"\n      },\n      \"totals\": {\n        \"total_surface_area\": \"X.XX m²\",\n        \"insulation_shells_needed\": \"XX pieces (1m each)\",\n        \"cladding_sheets_needed\": \"X.XX m²\"\n      }\n    },\n    \"drawing_summary\": {\n      \"total_sequences\": \"XX\",\n      \"normal_sequences\": \"XX\", \n      \"tapered_sequences\": \"XX\",\n      \"drawing_type\": \"sequence_based or quantity_based\"\n    }\n  }\n}\n```\n\n## MATERIAL SELECTION LOGIC\n- Diameter ≤ 300mm → Use shells/sections (1 meter pieces)\n- Diameter > 300mm → Use blankets/mats\n- Steam applications → Rock wool preferred\n- Standard shell length: 1 meter\n\n## ERROR CONTROL\n- Don't forget any sequence numbers\n- Watch for different circumferences between normal and tapered segments\n- Always add overlap to circumference calculations\n- Verify all sequences are accounted for in calculations",
          "passthroughBinaryImages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -160,
        -160
      ],
      "id": "40f9beb0-c70f-49d8-81a8-eb5b3392f0a4",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -192,
        0
      ],
      "id": "5ea2e2e3-4984-4741-890b-9fc8989677e0",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "vojz1cvxUpTiZ61e",
          "name": "Google Gemini(PaLM) Api zakenlijk"
        }
      }
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "destinationKey": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -672,
        -192
      ],
      "id": "fce906b4-db4f-4219-bd5d-cf93f9770c31",
      "name": "Transform to base64"
    },
    {
      "parameters": {
        "jsCode": "const results = [];\nconst inputItems = $input.all();\n\nfor (const item of inputItems) {\n  if (item.binary) {\n    for (const [key, bin] of Object.entries(item.binary)) {\n      const fileName = bin.fileName?.toLowerCase() || '';\n      const mimeType = bin.mimeType?.toLowerCase() || '';\n\n      const isAttachment = key.startsWith('attachment_') || \n                           key.includes('attachment') || \n                           key.startsWith('data_') ||\n                           bin.fileName;\n\n      // Herkenbare extensies\n      const isPdf = mimeType === 'application/pdf' || fileName.endsWith('.pdf');\n      const isJpg = mimeType === 'image/jpeg' || fileName.endsWith('.jpg') || fileName.endsWith('.jpeg');\n      const isPng = mimeType === 'image/png' || fileName.endsWith('.png');\n\n      const isAllowedFile = isPdf || isJpg || isPng;\n\n      if (isAttachment && isAllowedFile) {\n        results.push({\n          binary: {\n            data: bin,\n          },\n          json: {\n            fileName: bin.fileName || `attachment_${key}`,\n            mimeType: bin.mimeType || 'unknown',\n            originalKey: key,\n          },\n        });\n      }\n    }\n  }\n}\n\nreturn results.length > 0 ? results : [{\n  json: {\n    error: 'Geen PDF of afbeeldingsbestanden gevonden',\n    tip: 'Controleer of er PDF/JPG/PNG-bijlagen in de e-mail zitten en of de e-mail correct is verwerkt'\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        -192
      ],
      "id": "f19026cc-0dfc-4b0b-9b99-5e972942d4b0",
      "name": "Extract Attachments2",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Extract EVERY detail from this technical drawing including All text, numbers, dimensions, annotations Project information (job numbers, dates, locations) Technical specifications (diameters, materials, thicknesses) Geometry details (lengths, angles, radii, section numbers) Drawing notes and symbols Table data and specifications Material callouts and standards Output as structured JSON with ALL extracted information. MANDATORY FIRST STEP: Create TWO complete tables before any calculations: (1) SEQUENCE-LENGTH TABLE: Link each circle number (sequence number) to the length value directly adjacent to it on the drawing. Format: 'Sequence X: Ymm'. (2) SEQUENCE-TAPERING TABLE: Check each circle number for any '-XX' notation nearby indicating tapering/reduction. Format: 'Sequence X: normal' or 'Sequence X: -ZZmm'. DO NOT PROCEED until BOTH tables are complete for every visible sequence number. Numbers next to circles are ALWAYS lengths in millimeters. Check each sequence individually for tapering notations. Never assume standard lengths or tapering patterns.\"\n        },\n        {\n          \"inline_data\": {\n            \"mime_type\": \"application/pdf\",\n            \"data\": \"{{ $json.data }}\"\n          }\n        }\n      ]\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -432,
        -192
      ],
      "id": "36b92c47-4ee6-4e52-a849-4061eddf1de4",
      "name": "Extract PDF Content Using Gemini Vision1",
      "credentials": {
        "httpQueryAuth": {
          "id": "t6Npfn3CB5NrgzCP",
          "name": "Query Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// INPUT: de uitvoer van een eerdere node waarin de tekst staat in item.json.output\n\nconst text = $input.first().json.output;\nlet start = text.indexOf(\"```json\");\nlet end = text.indexOf(\"```\", start + 6);\n\nif (start === -1 || end === -1) {\n  throw new Error(\"Kan geen JSON-blok vinden in de tekst.\");\n}\n\n// Haal de JSON-string uit de tekst\nconst jsonString = text.slice(start + 7, end).trim();\n\n// Probeer het JSON-object te parsen\nlet parsedJson;\ntry {\n  parsedJson = JSON.parse(jsonString);\n} catch (err) {\n  throw new Error(\"JSON kon niet geparsed worden: \" + err.message);\n}\n\n// Geef het netjes terug in een array met één object (zoals n8n verwacht)\nreturn [\n  {\n    json: parsedJson\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        -112
      ],
      "id": "ea48a56c-4e10-401b-a888-c38b64dca199",
      "name": "Code"
    },
    {
      "parameters": {
        "html": "<html>\n  <head>\n    <style>\n      body {\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        background-color: #f8f9fa;\n        color: #212529;\n        padding: 30px;\n        line-height: 1.5;\n      }\n\n      h1 {\n        background-color: #007bff;\n        color: white;\n        padding: 15px;\n        border-radius: 6px;\n        text-align: center;\n        margin-top: 20px;\n      }\n\n      h2 {\n        color: #0056b3;\n        border-bottom: 2px solid #dee2e6;\n        margin-top: 40px;\n        padding-bottom: 5px;\n      }\n\n      h3 {\n        color: #343a40;\n        margin-top: 20px;\n      }\n\n      table {\n        width: 100%;\n        border-collapse: collapse;\n        margin-top: 10px;\n        background-color: white;\n        box-shadow: 0 0 6px rgba(0, 0, 0, 0.05);\n      }\n\n      th {\n        background-color: #e9ecef;\n        text-align: left;\n        padding: 8px;\n        color: #495057;\n      }\n\n      td {\n        padding: 8px;\n        border-top: 1px solid #dee2e6;\n      }\n\n      tr:nth-child(even) td {\n        background-color: #f1f3f5;\n      }\n\n      ul {\n        background-color: #ffffff;\n        padding: 15px;\n        border-radius: 5px;\n        box-shadow: 0 0 4px rgba(0, 0, 0, 0.05);\n      }\n\n      li {\n        margin-bottom: 8px;\n      }\n\n      .section {\n        margin-bottom: 40px;\n        padding: 20px;\n        background-color: #ffffff;\n        border-radius: 6px;\n        box-shadow: 0 0 6px rgba(0, 0, 0, 0.05);\n      }\n\n      .highlight {\n        background-color: #28a745;\n        color: white;\n        padding: 10px;\n        border-radius: 5px;\n        font-weight: bold;\n        text-align: center;\n        margin: 10px 0;\n      }\n\n      .summary-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        gap: 15px;\n        margin-top: 20px;\n      }\n\n      .summary-card {\n        background-color: #f8f9fa;\n        padding: 15px;\n        border-radius: 5px;\n        border-left: 4px solid #007bff;\n      }\n\n      .summary-card h4 {\n        margin: 0 0 8px 0;\n        color: #0056b3;\n      }\n\n      .summary-card p {\n        margin: 0;\n        font-size: 18px;\n        font-weight: bold;\n      }\n\n      /* Print Styles for PDF */\n      @media print {\n        body {\n          padding: 20px;\n          font-size: 12px;\n          line-height: 1.3;\n        }\n        \n        @page {\n          size: A4;\n          margin: 2cm;\n        }\n        \n        .section {\n          page-break-inside: avoid;\n          margin-bottom: 20px;\n          padding: 15px;\n          box-shadow: none;\n          border: 1px solid #ddd;\n        }\n        \n        h1 {\n          page-break-after: avoid;\n          margin-top: 0;\n          padding: 10px;\n          font-size: 18px;\n        }\n        \n        h2 {\n          page-break-after: avoid;\n          page-break-inside: avoid;\n          margin-top: 20px;\n          margin-bottom: 10px;\n          font-size: 16px;\n        }\n        \n        h3, h4 {\n          page-break-after: avoid;\n          page-break-inside: avoid;\n          margin-top: 15px;\n          margin-bottom: 8px;\n          font-size: 14px;\n        }\n        \n        table {\n          page-break-inside: avoid;\n          margin-bottom: 15px;\n          font-size: 11px;\n        }\n        \n        /* If table is too long, allow breaking */\n        table.long-table {\n          page-break-inside: auto;\n        }\n        \n        tr {\n          page-break-inside: avoid;\n        }\n        \n        th, td {\n          padding: 6px;\n        }\n        \n        .highlight {\n          page-break-inside: avoid;\n          margin: 10px 0;\n          padding: 8px;\n        }\n        \n        .summary-grid {\n          page-break-inside: avoid;\n          gap: 10px;\n        }\n        \n        .summary-card {\n          page-break-inside: avoid;\n          padding: 10px;\n        }\n        \n        /* Force page breaks before certain sections if needed */\n        .section:nth-child(3) {\n          page-break-before: auto;\n        }\n        \n        .section:nth-child(5) {\n          page-break-before: auto;\n        }\n      }\n    </style>\n  </head>\n  <body>\n\n    <h1>Insulation Drawing Analysis Report</h1>\n\n    <div class=\"section\">\n      <h2>📋 Project Information</h2>\n      <table>\n        <tbody>\n          {{ Object.entries($json.drawing_analysis.project_info).map(([key, value]) => `\n            <tr>\n              <th>${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</th>\n              <td>${value}</td>\n            </tr>\n          `).join('') }}\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"section\">\n      <h2>🔢 Sequence Analysis</h2>\n\n      <h3>🔄 Grouped Sequences by Length</h3>\n      {{ Object.entries($json.drawing_analysis.sequence_analysis.grouped_sequences.by_length).map(([length, data]) => `\n        <h4>${length} - ${data.quantity}</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>Sequence</th>\n              <th>Length</th>\n              <th>Tapering Status</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${data.sequences.map((seq, index) => `\n              <tr>\n                <td>Sequence ${seq}</td>\n                <td>${length}</td>\n                <td>${$json.drawing_analysis.sequence_analysis.sequence_tapering_table['Sequence ' + seq]}</td>\n              </tr>\n            `).join('')}\n          </tbody>\n        </table>\n      `).join('') }}\n\n      <h4>📊 Summary</h4>\n      <table>\n        <tbody>\n          <tr>\n            <th>Total Unique Lengths</th>\n            <td>{{ $json.drawing_analysis.sequence_analysis.grouped_sequences.summary.total_unique_lengths }}</td>\n          </tr>\n          <tr>\n            <th>Normal Segments Total</th>\n            <td>{{ $json.drawing_analysis.sequence_analysis.grouped_sequences.summary.normal_segments_total }}</td>\n          </tr>\n          <tr>\n            <th>Tapered Segments Total</th>\n            <td>{{ $json.drawing_analysis.sequence_analysis.grouped_sequences.summary.tapered_segments_total }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"section\">\n      <h2>⚙️ Technical Specifications</h2>\n      <table>\n        <tbody>\n          {{ Object.entries($json.drawing_analysis.technical_specifications).map(([key, value]) => `\n            <tr>\n              <th>${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</th>\n              <td>${value}</td>\n            </tr>\n          `).join('') }}\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"section\">\n      <h2>📊 Material Calculations</h2>\n\n      <div class=\"highlight\">\n        Total Surface Area: {{ $json.drawing_analysis.material_calculations.totals.total_surface_area }}\n      </div>\n\n      <h3>Normal Segments</h3>\n      <table>\n        <tbody>\n          {{ Object.entries($json.drawing_analysis.material_calculations.normal_segments).map(([key, value]) => `\n            <tr>\n              <th>${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</th>\n              <td>${value}</td>\n            </tr>\n          `).join('') }}\n        </tbody>\n      </table>\n\n      <h3>Tapered Segments</h3>\n      <table>\n        <tbody>\n          {{ Object.entries($json.drawing_analysis.material_calculations.tapered_segments).map(([key, value]) => `\n            <tr>\n              <th>${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</th>\n              <td>${value}</td>\n            </tr>\n          `).join('') }}\n        </tbody>\n      </table>\n\n      <h3>Materials Needed</h3>\n      <div class=\"summary-grid\">\n        <div class=\"summary-card\">\n          <h4>🏗️ Insulation Shells</h4>\n          <p>{{ $json.drawing_analysis.material_calculations.totals.insulation_shells_needed }}</p>\n        </div>\n        <div class=\"summary-card\">\n          <h4>📋 Cladding Sheets</h4>\n          <p>{{ $json.drawing_analysis.material_calculations.totals.cladding_sheets_needed }}</p>\n        </div>\n        <div class=\"summary-card\">\n          <h4>📏 Total Length</h4>\n          <p>{{ $json.drawing_analysis.material_calculations.total_pipe_length }}</p>\n        </div>\n        <div class=\"summary-card\">\n          <h4>📐 Total Area</h4>\n          <p>{{ $json.drawing_analysis.material_calculations.totals.total_surface_area }}</p>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"section\">\n      <h2>📈 Drawing Summary</h2>\n      <table>\n        <tbody>\n          {{ Object.entries($json.drawing_analysis.drawing_summary).map(([key, value]) => `\n            <tr>\n              <th>${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</th>\n              <td>${value}</td>\n            </tr>\n          `).join('') }}\n        </tbody>\n      </table>\n    </div>\n\n  </body>\n</html>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        416,
        -112
      ],
      "id": "8f76874e-6a15-44c8-822d-b6dba57d7ae9",
      "name": "HTML"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://pdfmaker.reffey.nl/forms/chromium/convert/html",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "drawing.pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1136,
        -288
      ],
      "id": "fceadf3d-bd28-4473-8ec1-10d17700b3e8",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://pdfmaker.reffey.nl/forms/chromium/convert/html ",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "multipart/form-data"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        -368
      ],
      "id": "85f120a8-afdd-4665-9a94-e97a51850c56",
      "name": "convertToPDF"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "binaryPropertyName": "={{ $json.html }}",
        "destinationKey": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        816,
        -384
      ],
      "id": "97e44795-1952-4e70-a726-2b1d952f2b27",
      "name": "Transform to base"
    },
    {
      "parameters": {
        "jsCode": "const html = $input.first().json.html;\nreturn [{\n  binary: {\n    \"index.html\": {\n      data: Buffer.from(html).toString(\"base64\"),\n      mimeType: \"text/html\",\n      fileName: \"index.html\"\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        -368
      ],
      "id": "b9f40311-2d01-4634-99a6-a154512b512a",
      "name": "Code1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "56ddeb35-240e-44eb-87e5-d2d63bb6b6f3",
              "name": "html",
              "value": "={{ $json.html.base64Encode() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        -112
      ],
      "id": "d60e6bd8-7746-4f5a-9285-ba1a23c1df08",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "html",
        "options": {
          "fileName": "index.html",
          "mimeType": "text/html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        832,
        -112
      ],
      "id": "fe44e82b-9e69-4361-99f5-a04476bf524a",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "fromEmail": "ai@go-knowledge.nl",
        "toEmail": "=ton.jacobs@go-knowledge.nl",
        "subject": "={{ $('On form submission').item.json[\"Iso drawing\"].filename }}",
        "emailFormat": "text",
        "text": "Als ik deze gegeven opsla in een database kan ik een planning maken voor de werkplaats. Je kan alle meters van die diameter bij elkaar optellen van alle tekeningen en dat in een keer verwerken. Dit kan de productie versnellen. ",
        "options": {
          "attachments": "=drawing.pdf"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1248,
        -112
      ],
      "id": "007441ec-f5b5-4e8b-a853-67eb92da5661",
      "name": "Send email",
      "webhookId": "6329f052-e7a7-4078-b065-1256a769bcde",
      "credentials": {
        "smtp": {
          "id": "yG4Ihfi7vhKZzG49",
          "name": "ai@go-knowledge"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -464,
        64
      ],
      "id": "7daca02a-4d10-451f-96eb-019190d9ee34",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "e2fBVE82JMg8ztMX",
          "name": "Ollama account 2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://172.17.0.5:3000/forms/chromium/convert/html",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Gotenberg-Output-Filename",
              "value": "=contract_review"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "contract_review.pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1040,
        -112
      ],
      "id": "e67b688e-4afb-423c-94d6-66db44704c25",
      "name": "HTTP Request1"
    }
  ],
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "Extract Attachments2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Transform to base64": {
      "main": [
        [
          {
            "node": "Extract PDF Content Using Gemini Vision1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Attachments2": {
      "main": [
        [
          {
            "node": "Transform to base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Content Using Gemini Vision1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        []
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Send email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "457291ad-3b20-4655-a72f-2e0ce0c44d83",
  "triggerCount": 1,
  "tags": []
}