{
  "createdAt": "2025-07-29T09:29:53.039Z",
  "updatedAt": "2025-09-10T14:43:21.000Z",
  "id": "o3C7ndLPABTlnDyZ",
  "name": "contract_review_corrected",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        64,
        80
      ],
      "id": "0176ed9c-a020-4896-9a30-b00d0b664c2b",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "dob7yodE27d15REW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node: haal JSON uit tekst (codefence of \"losse\" JSON), robuust en dynamisch.\n\nconst raw = (() => {\n  const first = $input.first();\n  // Meest gebruikt: model-output zit vaak in json.output (string)\n  if (typeof first?.json?.output === 'string') return first.json.output;\n  // Soms staat de hele JSON/tekst direct in json\n  if (typeof first?.json === 'string') return first.json;\n  // Fallback: stringify het hele object als tekst (zeldzaam)\n  return JSON.stringify(first?.json ?? '');\n})();\n\nif (typeof raw !== 'string' || !raw.trim()) {\n  throw new Error('Geen tekstinput gevonden om JSON uit te extraheren.');\n}\n\n// ===== Helpers =====\nfunction tryParse(str) {\n  try { return JSON.parse(str); } catch { return null; }\n}\n\nfunction relaxedClean(str) {\n  // Verwijder BOM\n  let s = str.replace(/^\\uFEFF/, '');\n  // Verwijder /* ... */ comments\n  s = s.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n  // Verwijder // comments (maar laat URL's etc. met :// met rust)\n  s = s.replace(/(^|[^:])\\/\\/.*$/gm, '$1');\n  // Verwijder trailing commas voor } of ]\n  s = s.replace(/,\\s*([}\\]])/g, '$1');\n  return s.trim();\n}\n\nfunction rankOfLang(lang) {\n  const l = (lang || '').toLowerCase();\n  if (l === 'json' || l === 'jsonc' || l === 'json5') return 1;\n  if (l === 'javascript' || l === 'js') return 2;\n  return 3; // ongetagd of andere taal\n}\n\n// Probeer alle codeblokken in de tekst (meerdere mogelijk)\nfunction parseFromCodeFences(text) {\n  const re = /```([\\w-]*)\\s*([\\s\\S]*?)```/g; // vangt taal + inhoud\n  const candidates = [];\n  let m;\n  while ((m = re.exec(text)) !== null) {\n    const lang = m[1] || '';\n    const body = (m[2] || '').trim();\n    if (!body) continue;\n    candidates.push({ lang, body, rank: rankOfLang(lang), index: m.index });\n  }\n  // Sorteer: JSON-talen eerst, daarna js, daarna de rest, en zo vroeg mogelijk in de tekst\n  candidates.sort((a, b) => (a.rank - b.rank) || (a.index - b.index));\n\n  for (const c of candidates) {\n    // 1) strikte parse\n    let parsed = tryParse(c.body);\n    if (parsed !== null) return parsed;\n    // 2) relaxed parse (comments/trailing commas weg)\n    parsed = tryParse(relaxedClean(c.body));\n    if (parsed !== null) return parsed;\n  }\n  return null;\n}\n\n// Als geen codefence werkte: probeer de hele tekst\nfunction parseFromWhole(text) {\n  let p = tryParse(text.trim());\n  if (p !== null) return p;\n  p = tryParse(relaxedClean(text));\n  if (p !== null) return p;\n  return null;\n}\n\n// Laatste redmiddel: pak het eerste JSON-achtige blok tussen {…} of […]\n// en probeer dat (ook relaxed).\nfunction parseFromFirstBracketSpan(text) {\n  const start = text.search(/[\\[{]/);\n  if (start === -1) return null;\n\n  // Zoek van achteren naar voren naar de laatste } of ]\n  const lastCurly = text.lastIndexOf('}');\n  const lastSquare = text.lastIndexOf(']');\n  let end = Math.max(lastCurly, lastSquare);\n  if (end === -1 || end <= start) return null;\n\n  // Probeer een paar inkortingen vanaf de achterzijde (voor het geval er trailing rommel staat)\n  for (let e = end; e >= start + 1 && e >= end - 5000; e--) {\n    const ch = text[e];\n    if (ch !== '}' && ch !== ']') continue;\n    const slice = text.slice(start, e + 1);\n    let p = tryParse(slice);\n    if (p !== null) return p;\n    p = tryParse(relaxedClean(slice));\n    if (p !== null) return p;\n  }\n  return null;\n}\n\n// ===== Hoofdlogica =====\nlet parsed = parseFromCodeFences(raw);\nif (parsed === null) parsed = parseFromWhole(raw);\nif (parsed === null) parsed = parseFromFirstBracketSpan(raw);\n\nif (parsed === null) {\n  // Debug hints\n  console.error('Kon geen valide JSON extraheren.');\n  console.error('Eerste 300 tekens van input:', raw.slice(0, 300));\n  throw new Error('Kan geen geldig JSON-blok vinden of parsen.');\n}\n\n// Optioneel: als je per se een object verwacht, kun je hier normaliseren.\n// Wij laten zowel object als array toe, omdat jouw payloads vaak een array zijn.\n\nreturn [{\n  json: parsed\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1152,
        224
      ],
      "id": "ef03ec65-f026-4044-88fa-e6a5b83bbbf8",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// N8N Code Node - Transform JSON to HTML strings (Hardened)\n\n// ---------- Helpers ----------\nfunction escapeHtml(text) {\n  if (text == null) return '';\n  return String(text)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n// Escape + behoud regelafbrekingen\nfunction escKeepLines(text) {\n  return escapeHtml(text).replace(/\\r?\\n/g, '<br>');\n}\n\nfunction safeArray(arr) {\n  return Array.isArray(arr) ? arr : [];\n}\n\nfunction safeString(str, fallback = '') {\n  return str != null ? String(str) : fallback;\n}\n\nfunction toClassSlug(v, fallback = 'unknown') {\n  const s = safeString(v, fallback).toLowerCase();\n  return s.replace(/\\s+/g, '-').replace(/[^a-z0-9\\-]/g, '-');\n}\n\n// ---------- Generic card ----------\nfunction generateCard(item, config) {\n  const {\n    cardClass = 'article-card no-break',\n    titleBadge,\n    titleText,\n    subtitle,\n    contentSections = [],\n    gridLayout,\n    metadata\n  } = config;\n\n  const badgeHtml = titleBadge ? `<span class=\"${titleBadge.class}\">${escapeHtml(titleBadge.text)}</span>` : '';\n  const subtitleHtml = subtitle ? `<div style=\"font-size: 9pt; color: #666;\">${escapeHtml(subtitle)}</div>` : '';\n\n  const contentHtml = contentSections.map(section => {\n    if (section.type === 'text') {\n      return `<div style=\"margin-bottom: 10px;\">${escKeepLines(section.content)}</div>`;\n    }\n    if (section.type === 'titled-text') {\n      return `\n        <div class=\"subsection-title\">${escapeHtml(section.title)}:</div>\n        <div style=\"margin-bottom: 10px;\">${escKeepLines(section.content)}</div>\n      `;\n    }\n    if (section.type === 'quoted-text') {\n      return `\n        <div class=\"subsection-title\">${escapeHtml(section.title)}:</div>\n        <div style=\"margin-bottom: 10px; font-style: italic; background: #f8f9fa; padding: 8px; border-left: 3px solid #dee2e6; font-size: 9pt; white-space: pre-wrap;\">\n          ${escapeHtml(section.content)}\n        </div>\n      `;\n    }\n    if (section.type === 'implementation-step') {\n      return `<div class=\"implementation-step\">${escKeepLines(section.content)}</div>`;\n    }\n    return '';\n  }).join('');\n\n  const gridHtml = gridLayout ? `\n    <div style=\"display: grid; grid-template-columns: ${gridLayout.columns}; gap: ${gridLayout.gap}; font-size: 9pt;\">\n      ${gridLayout.items.map(gridItem => `\n        <div>\n          <div class=\"info-label\">${escapeHtml(gridItem.label)}:</div>\n          <div>${escKeepLines(gridItem.value)}</div>\n        </div>\n      `).join('')}\n    </div>\n  ` : '';\n\n  const metadataHtml = metadata ? `\n    <div style=\"margin-top: 8px; font-size: 8pt; color: #6c757d;\">\n      ${metadata}  <!-- metadata is al samengesteld met ge-escape content -->\n    </div>\n  ` : '';\n\n  return `\n    <div class=\"${cardClass}\">\n      <div class=\"article-header\">\n        <div class=\"article-title\">\n          ${badgeHtml}\n          ${escapeHtml(titleText)}\n        </div>\n        ${subtitleHtml}\n      </div>\n      <div class=\"article-content\">\n        ${contentHtml}\n        ${gridHtml}\n        ${metadataHtml}\n      </div>\n    </div>\n  `;\n}\n\n// ---------- Small list helper ----------\nfunction generateListItems(items, className = 'list-item', style = '') {\n  return safeArray(items)\n    .map(item => `<div class=\"${className}\" style=\"${style}\">${escKeepLines(item)}</div>`)\n    .join('');\n}\n\n// ---------- Amendment box ----------\nfunction generateAmendmentBox(amendment) {\n  return `\n    <div class=\"amendment-box no-break\">\n      <div class=\"amendment-title\">${escapeHtml(amendment.article || amendment.clause_type)}</div>\n      ${amendment.current_text ? `<div style=\"margin-bottom: 10px;\"><strong>Current:</strong> ${escKeepLines(amendment.current_text)}</div>` : ''}\n      ${amendment.location ? `<div style=\"margin-bottom: 10px;\"><strong>Location:</strong> ${escapeHtml(amendment.location)}</div>` : ''}\n      <div class=\"proposed-text\">\n        <strong>Proposed ${amendment.proposed_amendment ? 'Amendment' : 'Text'}:</strong><br>\n        ${escKeepLines(amendment.proposed_amendment || amendment.proposed_text)}\n      </div>\n      <div style=\"margin-top: 10px; font-size: 9pt;\">\n        <strong>Rationale:</strong> ${escKeepLines(amendment.rationale)} ${amendment.altrad_rule ? `(${escapeHtml(amendment.altrad_rule)})` : ''}\n      </div>\n    </div>\n  `;\n}\n\n// ---------- Load + normalize input ----------\nlet raw = $input.all()[0]?.json;\nif (!raw) {\n  return [{ json: { error: 'No input data found' } }];\n}\n// Ondersteun zowel [ {..} ] als {..}\nconst data = Array.isArray(raw) ? raw[0] : raw;\n\n// ---------- Critical Issues ----------\nconst criticalIssuesHtml = safeArray(data.critical_issues)\n  .map(issue => generateCard(issue, {\n    titleBadge: {\n      class: `risk-badge risk-${toClassSlug(issue.risk_level)}`,\n      text: issue.risk_level || 'UNKNOWN'\n    },\n    titleText: issue.issue || 'Untitled',\n    subtitle: issue.article_reference,\n    contentSections: [\n      { type: 'titled-text', title: 'Business Impact', content: issue.business_impact },\n      { type: 'titled-text', title: 'Recommended Action', content: issue.recommended_action }\n    ]\n  })).join('');\n\n// ---------- Negotiation Strategy ----------\nconst dealBreakersHtml = safeArray(data.negotiation_strategy?.deal_breakers)\n  .map(item => generateCard(item, {\n    titleBadge: { class: 'priority-badge priority-critical', text: 'DEAL BREAKER' },\n    titleText: item.issue,\n    gridLayout: {\n      columns: '1fr 1fr 1fr',\n      gap: '15px',\n      items: [\n        { label: 'Current Position', value: item.current_position },\n        { label: 'Minimum Requirement', value: item.minimum_requirement },\n        { label: 'Walk Away Threshold', value: item.walk_away_threshold }\n      ]\n    }\n  })).join('');\n\nconst highPriorityHtml = safeArray(data.negotiation_strategy?.high_priority)\n  .map(item => generateCard(item, {\n    titleBadge: { class: 'priority-badge priority-high', text: 'HIGH PRIORITY' },\n    titleText: item.issue,\n    gridLayout: {\n      columns: '1fr 1fr 1fr',\n      gap: '15px',\n      items: [\n        { label: 'Target Position', value: item.target_position },\n        { label: 'Fallback Position', value: item.fallback_position },\n        { label: 'Negotiation Leverage', value: item.negotiation_leverage }\n      ]\n    }\n  })).join('');\n\nconst mediumPriorityHtml = safeArray(data.negotiation_strategy?.medium_priority)\n  .map(item => generateCard(item, {\n    titleBadge: { class: 'priority-badge priority-medium', text: 'MEDIUM PRIORITY' },\n    titleText: item.issue,\n    gridLayout: {\n      columns: '1fr 1fr',\n      gap: '15px',\n      items: [\n        { label: 'Target Position', value: item.target_position },\n        { label: 'Trade-off Potential', value: item.trade_off_potential }\n      ]\n    }\n  })).join('');\n\n// ---------- Detailed Clause Analysis ----------\nconst articleAnalysisHtml = safeArray(data.detailed_clause_analysis)\n  .map(clause => {\n    const rulesAffected = safeArray(clause.altrad_rules_affected).join(', ');\n    const metadata = [\n      `<strong>Priority:</strong> ${escapeHtml(safeString(clause.negotiation_priority))}`,\n      `<strong>Rationale:</strong> ${escapeHtml(safeString(clause.rationale))}`,\n      rulesAffected ? `<strong>Altrad Rules:</strong> ${escapeHtml(rulesAffected)}` : ''\n    ].filter(Boolean).join(' | ');\n\n    const contentSections = [\n      { type: 'quoted-text', title: 'Current Text', content: clause.current_text },\n      { type: 'titled-text', title: 'Business Impact', content: clause.business_impact }\n    ];\n\n    if (clause.financial_exposure) {\n      contentSections.push({\n        type: 'titled-text',\n        title: 'Financial Exposure',\n        content: clause.financial_exposure\n      });\n    }\n\n    contentSections.push({\n      type: 'titled-text',\n      title: 'Proposed Amendment',\n      content: clause.proposed_amendment\n    });\n\n    return generateCard(clause, {\n      titleBadge: {\n        class: `risk-badge risk-${toClassSlug(clause.risk_level)}`,\n        text: clause.risk_level || 'UNKNOWN'\n      },\n      titleText: `${safeString(clause.clause_reference)}: ${safeString(clause.clause_title)}`,\n      subtitle: clause.clause_category,\n      contentSections,\n      gridLayout: {\n        columns: '1fr 1fr 1fr',\n        gap: '10px',\n        items: [\n          { label: 'Current Position', value: clause.current_position },\n          { label: 'Target Position', value: clause.target_position },\n          { label: 'Fallback Position', value: clause.fallback_position }\n        ]\n      },\n      metadata\n    });\n  }).join('');\n\n// ---------- Contract Amendments ----------\nconst criticalAmendmentsHtml = safeArray(data.contract_amendments?.critical_amendments)\n  .map(generateAmendmentBox).join('');\n\nconst additionalClausesHtml = safeArray(data.contract_amendments?.additional_clauses_needed)\n  .map(generateAmendmentBox).join('');\n\n// ---------- Implementation Roadmap ----------\nconst immediateActionsHtml = generateListItems(data.implementation_roadmap?.immediate_actions, 'implementation-step');\nconst negotiationSequenceHtml = generateListItems(data.implementation_roadmap?.negotiation_sequence);\nconst fallbackStrategiesHtml = generateListItems(data.implementation_roadmap?.fallback_strategies); // optioneel veld\n\n// ---------- Executive Dashboard ----------\nconst proceedRecommendation = safeString(data.executive_dashboard?.proceed_recommendation, 'Not specified');\nconst conditionsHtml = generateListItems(data.executive_dashboard?.conditions_for_proceeding);\nconst estimatedValueAtRisk = safeString(data.executive_dashboard?.estimated_contract_value_at_risk, 'Not quantified');\nconst negotiationComplexity = safeString(data.executive_dashboard?.negotiation_complexity, 'Not assessed');\n\n// ---------- Final Recommendations (UI) ----------\nconst mustChangeItems = [\n  'Exclusion of Subcontractor liability for Contractor\\'s loss of profit, loss of reputation, and other indirect/consequential damages (CR1).',\n  'Introduction of a clear, overall liability cap for the Subcontractor (CR3).',\n  'Amendment of indemnity and insurance clauses to be fair and balanced, including waiver of subrogation and Altrad not liable for Contractor\\'s deductibles/exclusions (CR6).',\n  'Mutual exclusion of indirect and consequential damages.',\n  'Introduction of reciprocal termination rights for Altrad.'\n];\n\nconst shouldChangeItems = [\n  'Amendment of the rolling warranty clause to cap Altrad\\'s long-term liability (CR4).',\n  'Revision of payment terms to limit Contractor\\'s withholding/offset rights (CR7).',\n  'Clarification and specification of retention percentage not exceeding 5% (CR9).',\n  'Introduction of a 5-working day grace period for liquidated damages (CR2).'\n];\n\nconst couldImproveItems = [\n  'Negotiate for a single arbitrator for disputes below a certain value threshold to reduce arbitration costs.',\n  'Clarify the process for Contractor\\'s \\'fair and reasonable determination\\' for EOT/price adjustments.',\n  'Ensure all agreed deviations are formally incorporated into the final contract.'\n];\n\nconst mustChangeHtml = generateListItems(mustChangeItems, 'list-item', 'color: #dc3545;');\nconst shouldChangeHtml = generateListItems(shouldChangeItems, 'list-item', 'color: #fd7e14;');\nconst couldImproveHtml = generateListItems(couldImproveItems, 'list-item', 'color: #28a745;');\n\n// ---------- Red Zone Compliance ----------\nconst redZoneComplianceHtml = Object.entries(data.red_zone_compliance || {})\n  .map(([key, value]) => {\n    const statusSlug = toClassSlug(value?.status || 'UNKNOWN');\n    const ruleName = key.replace(/_/g, ' ').toUpperCase();\n    return `\n      <div class=\"compliance-item\">\n        <div class=\"compliance-header\">\n          <span class=\"compliance-rule\">${escapeHtml(ruleName)}</span>\n          <span class=\"compliance-status status-${statusSlug}\">${escapeHtml(value?.status || 'UNKNOWN')}</span>\n          <span class=\"compliance-percentage\">${escapeHtml(value?.compliance_percent ?? '')}</span>\n        </div>\n        <div class=\"compliance-details\">${escKeepLines(value?.details || '')}</div>\n      </div>\n    `;\n  }).join('');\n\n// ---------- Return ----------\nreturn [{\n  json: {\n    ...data,\n    // HTML payloads\n    criticalIssuesHtml,\n    dealBreakersHtml,\n    highPriorityHtml,\n    mediumPriorityHtml,\n    articleAnalysisHtml,\n    criticalAmendmentsHtml,\n    additionalClausesHtml,\n    immediateActionsHtml,\n    negotiationSequenceHtml,\n    fallbackStrategiesHtml,\n    conditionsHtml,\n    redZoneComplianceHtml,\n    mustChangeHtml,\n    shouldChangeHtml,\n    couldImproveHtml,\n    // Dashboard data\n    proceedRecommendation,\n    estimatedValueAtRisk,\n    negotiationComplexity\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -992,
        224
      ],
      "id": "62d388ac-f699-4c29-b1fb-26d8a551ca9e",
      "name": "Code1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "56ddeb35-240e-44eb-87e5-d2d63bb6b6f3",
              "name": "html",
              "value": "={{ $json.html.base64Encode() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -432,
        224
      ],
      "id": "3d64289c-573a-4d3f-b8da-9a2647f309ef",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "html",
        "options": {
          "fileName": "index.html",
          "mimeType": "text/html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -160,
        224
      ],
      "id": "9f1eac92-b808-4923-a956-66c440af0731",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://pdfmaker.reffey.nl/forms/chromium/convert/html",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "contract_review.pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1456,
        -240
      ],
      "id": "a2cd9a98-2870-4a9b-a1d9-dd160440ce04",
      "name": "HTTP Request",
      "disabled": true
    },
    {
      "parameters": {
        "fromEmail": "ai@go-knowledge.nl",
        "toEmail": "={{ $('On form submission').item.json[\"Email \"] }}",
        "subject": "=contract review {{ $('On form submission').item.json[\"Contract \"][0].filename }}",
        "emailFormat": "text",
        "options": {
          "appendAttribution": false,
          "attachments": "=contract_review.pdf"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        272,
        224
      ],
      "id": "1fbf2d14-a89f-4358-a2ce-d588a4e95e54",
      "name": "Send email",
      "webhookId": "6329f052-e7a7-4078-b065-1256a769bcde",
      "credentials": {
        "smtp": {
          "id": "yG4Ihfi7vhKZzG49",
          "name": "ai@go-knowledge"
        }
      }
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "formTitle": "Ai Contract Review",
        "formDescription": "Assessing a contract using AI",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Email ",
              "fieldType": "email",
              "placeholder": "provide your email address so we can send the report to you.",
              "requiredField": true
            },
            {
              "fieldLabel": "Contract ",
              "fieldType": "file",
              "acceptFileTypes": "pdf,doc,docx",
              "requiredField": true
            }
          ]
        },
        "options": {
          "customCss": ":root {\n\t--font-family: 'Open Sans', sans-serif;\n\t--font-weight-normal: 400;\n\t--font-weight-bold: 600;\n\t--font-size-body: 12px;\n\t--font-size-label: 16px; /* vergroot van 14px */\n\t--font-size-test-notice: 12px;\n\t--font-size-input: 16px; /* vergroot van 14px */\n\t--font-size-header: 20px;\n\t--font-size-paragraph: 14px;\n\t--font-size-link: 12px;\n\t--font-size-error: 12px;\n\t--font-size-html-h1: 28px;\n\t--font-size-html-h2: 20px;\n\t--font-size-html-h3: 16px;\n\t--font-size-html-h4: 14px;\n\t--font-size-html-h5: 12px;\n\t--font-size-html-h6: 10px;\n\t--font-size-subheader: 14px;\n\t/* Colors - Altrad Theme */\n\t--color-background: #f8f9fa;\n\t--color-test-notice-text: #E31E24;\n\t--color-test-notice-bg: #fef7f7;\n\t--color-test-notice-border: #f5c6c7;\n\t--color-card-bg: #ffffff;\n\t--color-card-border: #e1e5e9;\n\t--color-card-shadow: rgba(227, 30, 36, 0.08);\n\t--color-link: #6b6b6b;\n\t--color-header: #2c2c2c;\n\t--color-label: #2c2c2c;\n\t--color-input-border: #e1e5e9;\n\t--color-input-text: #6b6b6b;\n\t--color-focus-border: #E31E24;\n\t--color-submit-btn-bg: #E31E24;\n\t--color-submit-btn-text: #ffffff;\n\t--color-error: #E31E24;\n\t--color-required: #E31E24;\n\t--color-clear-button-bg: #6b6b6b;\n\t--color-html-text: #2c2c2c;\n\t--color-html-link: #E31E24;\n\t--color-header-subtext: #6b6b6b;\n\t/* Border Radii */\n\t--border-radius-card: 8px;\n\t--border-radius-input: 6px;\n\t--border-radius-clear-btn: 50%;\n\t--card-border-radius: 8px;\n\t/* Spacing */\n\t--padding-container-top: 24px;\n\t--padding-card: 24px;\n\t--padding-test-notice-vertical: 12px;\n\t--padding-test-notice-horizontal: 24px;\n\t--margin-bottom-card: 16px;\n\t--padding-form-input: 18px; /* vergroot van 12px */\n\t--card-padding: 24px;\n\t--card-margin-bottom: 16px;\n\t/* Dimensions */\n\t--container-width: 520px; /* vergroot van 448px */\n\t--submit-btn-height: 56px; /* vergroot van 48px */\n\t--checkbox-size: 18px;\n\t/* Others */\n\t--box-shadow-card: 0px 4px 16px 0px var(--color-card-shadow);\n\t--opacity-placeholder: 0.5;\n\t/* Logo */\n\t--logo-url: url('https://bnl.altradservices.com/assets/images/b/Benelux_RVB-660c4912.jpg');\n}"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -1216,
        -208
      ],
      "id": "e2782bef-1839-425b-badf-5dac4b444b0a",
      "name": "On form submission",
      "webhookId": "4ea67feb-2467-42fe-b2fc-4cc3e1333e77",
      "credentials": {
        "httpBasicAuth": {
          "id": "E4b7CmW8gisIRQ8H",
          "name": "Login Contract Assessment Agent"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const results = [];\nconst inputItems = $input.all();\n\nfor (const item of inputItems) {\n  if (item.binary) {\n    for (const [key, bin] of Object.entries(item.binary)) {\n      const fileName = bin.fileName?.toLowerCase() || '';\n      const mimeType = bin.mimeType?.toLowerCase() || '';\n      \n      const isAttachment = key.startsWith('attachment_') || \n                           key.includes('attachment') || \n                           key.startsWith('data_') ||\n                           bin.fileName;\n      \n      // Herkenbare extensies en MIME types\n      const isPdf = mimeType === 'application/pdf' || fileName.endsWith('.pdf');\n      const isJpg = mimeType === 'image/jpeg' || fileName.endsWith('.jpg') || fileName.endsWith('.jpeg');\n      const isPng = mimeType === 'image/png' || fileName.endsWith('.png');\n      \n      // Word documenten\n      const isDoc = mimeType === 'application/msword' || fileName.endsWith('.doc');\n      const isDocx = mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || fileName.endsWith('.docx');\n      \n      // Excel bestanden\n      const isXls = mimeType === 'application/vnd.ms-excel' || fileName.endsWith('.xls');\n      const isXlsx = mimeType === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || fileName.endsWith('.xlsx');\n      \n      const isAllowedFile = isPdf || isJpg || isPng || isDoc || isDocx || isXls || isXlsx;\n      \n      if (isAttachment && isAllowedFile) {\n        results.push({\n          binary: {\n            data: bin,\n          },\n          json: {\n            fileName: bin.fileName || `attachment_${key}`,\n            mimeType: bin.mimeType || 'unknown',\n            originalKey: key,\n            fileType: isPdf ? 'PDF' : \n                     (isJpg || isPng) ? 'Image' :\n                     (isDoc || isDocx) ? 'Word' :\n                     (isXls || isXlsx) ? 'Excel' : 'Unknown'\n          },\n        });\n      }\n    }\n  }\n}\n\nreturn results.length > 0 ? results : [{\n  json: {\n    error: 'Geen ondersteunde bestanden gevonden',\n    tip: 'Controleer of er PDF/Word/Excel/afbeelding-bijlagen in de e-mail zitten en of de e-mail correct is verwerkt',\n    supportedTypes: 'PDF, DOC, DOCX, XLS, XLSX, JPG, PNG'\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1024,
        -208
      ],
      "id": "c8008fff-ee06-4d58-bfad-26462d3dee9a",
      "name": "Extract Attachments2",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "destinationKey": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1248,
        -240
      ],
      "id": "4796fd3e-1150-4b9e-8f92-c78758413b8c",
      "name": "Transform to base64",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Conduct a thorough legal and commercial review of this contract documentation under  in document law: {{$json.contract_text || $json.text || $json.combinedText}}\n\nProvide comprehensive analysis including risk assessment, compliance evaluation, and negotiation recommendations. Reference specific DOCUMENT numbers when citing clauses for traceability.",
        "options": {
          "systemMessage": "Enhanced Altrad Contract Analysis System\n\nYou are Altrad's advanced contract analysis AI, designed to provide comprehensive risk assessment and negotiation guidance for construction and services contracts worldwide. You operate with professional integrity, providing honest and objective analysis while maintaining awareness of user wellbeing.\n\nCore Behavioral Guidelines\n\nCommunication Standards\n• Provide direct, professional responses without unnecessary flattery or positive adjectives\n• Use emojis only when specifically requested or when the user's message contains them\n• Avoid asterisk-based emotes or actions unless explicitly requested\n• Maintain clear awareness of roleplay versus analytical work, breaking character if necessary for user wellbeing\n\nProfessional Integrity\n• Critically evaluate all contract terms, claims, and proposals rather than automatically agreeing\n• Point out flaws, factual errors, or lack of clarity in contract language respectfully but directly\n• Prioritize truthfulness and accuracy over agreeability\n• Provide honest feedback even when it may not align with user preferences\n• Distinguish between literal contractual obligations and metaphorical or interpretive language\n\nUser Wellbeing Awareness\n• Monitor for signs of unrealistic expectations or potentially harmful decision-making\n• Avoid reinforcing decisions that could lead to significant business harm\n• Suggest professional consultation when contract issues exceed standard risk parameters\n• Maintain objectivity in interpersonal or organizational dynamics affecting contract decisions\n\nCore Capabilities\n\nInput Flexibility\n• Accept single or multiple contract documents\n• Process various formats: PDF, Word, text files\n• Handle incomplete contracts with placeholders\n• Analyze contract packages with multiple related documents\n• Extract and record document metadata including page counts, file sizes, and document dates\n\nMulti-Jurisdiction Support\nDefault to English law unless explicitly specified. Supported jurisdictions include:\n• Qatar, UAE, Saudi Arabia, Kuwait (Middle East)\n• UK, France, Netherlands, Belgium (Europe)\n• Australia, New Zealand (APAC)\n• Canada, USA (Americas)\n\nAdapt analysis based on specified jurisdiction's legal framework and construction industry practices.\n\nAltrad Contracting Rules (CR1-CR11)\n\nCR1: Consequential Damages\n• Rule: Altrad must not be liable for indirect/consequential damages (loss of profit, business, goodwill, reputation)\n• Compliance: Contract must explicitly exclude such damages OR provide mutual exclusion\n• Scoring: COMPLIANT (100%) = explicit exclusion; PARTIAL (50%) = mutual exclusion; NON_COMPLIANT (0%) = Altrad liable\n\nCR2: Liquidated Damages\n• Rule: Daily rate ≤1% per week of contract value; Cap ≤10% total; 5 working day grace period\n• Compliance: All three criteria must be met\n• Scoring: COMPLIANT (100%) = all criteria met; PARTIAL (33-66%) = some criteria met; NON_COMPLIANT (0%) = major violations\n\nCR3: Liability Cap\n• Rule: Overall liability cap required:\n  - €0-750k: 100% of contract value\n  - €750k-5M: 75% of contract value\n  - >€5M: 50% of contract value\n• Compliance: Appropriate cap must be present\n• Scoring: COMPLIANT (100%) = appropriate cap; NON_COMPLIANT (0%) = no cap or inappropriate level\n\nCR4: Warranty Period\n• Rule: Maximum 24 months; Back-to-back arrangements with suppliers required\n• Compliance: Both criteria must be met\n• Scoring: COMPLIANT (100%) = ≤24 months + back-to-back; PARTIAL (50%) = only one criteria met; NON_COMPLIANT (0%) = >24 months\n\nCR5: Third Party Liability\n• Rule: Each party assumes own liability for injury/death of personnel or damage to own property\n• Compliance: Mutual arrangement or each party's own liability\n• Scoring: COMPLIANT (100%) = mutual; NON_COMPLIANT (0%) = one-sided against Altrad\n\nCR6: Insurance\n• Rule: Client's insurer must waive subrogation rights against Altrad; No liability for client's deductibles/exclusions\n• Compliance: Both waiver and deductible protection required\n• Scoring: COMPLIANT (100%) = both present; PARTIAL (50%) = one present; NON_COMPLIANT (0%) = neither present\n\nCR7: Payment Terms\n• Rule: ≤60 days payment terms; No broad withholding rights; Credit check on counterparty\n• Compliance: All criteria should be met\n• Scoring: COMPLIANT (100%) = all met; PARTIAL (33-66%) = some met; NON_COMPLIANT (0%) = major violations\n\nCR8: Suspension/Termination\n• Rule: Entitlement to standby rates for no-fault suspensions; Right to terminate for insolvency, non-payment (60+ days), suspension (90+ days)\n• Compliance: Reasonable suspension terms and termination rights\n• Scoring: COMPLIANT (100%) = both present; PARTIAL (50%) = one present; NON_COMPLIANT (0%) = neither present\n\nCR9: Retentions/Security\n• Rule: Retention ≤5%; Performance bond ≤10%; Warranty bond ≤5%; No overlap between bank and parent company guarantees\n• Compliance: All limits must be respected\n• Scoring: COMPLIANT (100%) = all limits met; PARTIAL (25-75%) = some limits exceeded; NON_COMPLIANT (0%) = major violations\n\nCR10: Governing Law\n• Rule: Must align with specified jurisdiction\n• Compliance: Law clause must match project jurisdiction\n• Scoring: COMPLIANT (100%) = matches; NON_COMPLIANT (0%) = doesn't match\n\nCR11: Code of Conduct\n• Rule: Anti-corruption and compliance clauses required\n• Compliance: Appropriate ethical standards clauses present\n• Scoring: COMPLIANT (100%) = present; NON_COMPLIANT (0%) = absent\n\nRisk Assessment Methodology\n\nOverall Risk Calculation\n• Calculate weighted compliance score across all CRs\n• CRITICAL: <50% compliance\n• HIGH: 50-69% compliance\n• MEDIUM: 70-84% compliance\n• LOW: 85-100% compliance\n\nCritical Issues Identification\nIdentify issues that are:\n• Deal-breakers for Altrad\n• Significant financial exposure\n• Operational disruption potential\n• Legal/regulatory non-compliance\n\nOutput Structure\n\nProvide comprehensive analysis in this exact JSON structure:\n\n{\n  \"project_metadata\": {\n    \"analysis_date\": \"YYYY-MM-DD\",\n    \"project_reference\": \"extracted or generated reference\",\n    \"analyst_notes\": \"any relevant context\",\n    \"source_documents\": [\n      {\n        \"document_name\": \"filename with extension\",\n        \"total_pages\": number,\n        \"file_size\": \"size in MB/KB\",\n        \"document_date\": \"YYYY-MM-DD if extractable\",\n        \"document_type\": \"PDF/Word/Text\"\n      }\n    ]\n  },\n  \"contract_summary\": {\n    \"contract_type\": \"description\",\n    \"contracting_parties\": \"parties involved\", \n    \"estimated_value\": \"contract value if stated\",\n    \"key_scope\": \"main work description\",\n    \"document_structure\": \"explanation of documents analyzed\",\n    \"governing_law\": \"applicable legal framework\"\n  },\n  \"overall_risk_assessment\": {\n    \"risk_level\": \"CRITICAL/HIGH/MEDIUM/LOW\",\n    \"executive_summary\": \"2-3 sentence summary for C-suite\",\n    \"critical_issues_count\": number,\n    \"compliance_score\": \"percentage with 1 decimal\",\n    \"key_concerns\": [\"list of top 3-5 concerns\"],\n    \"deal_breaker_issues\": [\"absolute show-stoppers\"]\n  },\n  \"red_zone_compliance\": {\n    \"CR1_consequential_damages\": {\n      \"status\": \"COMPLIANT/PARTIAL/NON_COMPLIANT\",\n      \"compliance_percent\": \"0-100%\",\n      \"details\": \"explanation\",\n      \"evidence\": \"specific contract references with page numbers\"\n    },\n    // ... repeat for CR2-CR11\n  },\n  \"detailed_clause_analysis\": [\n    {\n      \"clause_reference\": \"Document X, Clause Y.Z\",\n      \"page_number\": number,\n      \"clause_title\": \"descriptive title\",\n      \"clause_category\": \"risk category (e.g., liability, payment, termination)\",\n      \"current_text\": \"relevant contract text (max 200 words)\",\n      \"altrad_rules_affected\": [\"CR1\", \"CR3\", etc.],\n      \"risk_level\": \"CRITICAL/HIGH/MEDIUM/LOW\",\n      \"business_impact\": \"specific impact on Altrad\",\n      \"financial_exposure\": \"quantified risk if possible\",\n      \"current_position\": \"what clause currently states\",\n      \"target_position\": \"what Altrad wants\",\n      \"fallback_position\": \"minimum acceptable alternative\",\n      \"proposed_amendment\": \"specific replacement text\",\n      \"negotiation_priority\": \"HIGH/MEDIUM/LOW\",\n      \"rationale\": \"why change is needed\",\n      \"precedent_notes\": \"similar clauses in other projects if relevant\"\n    }\n  ],\n  \"critical_issues\": [\n    {\n      \"issue\": \"descriptive title\",\n      \"article_reference\": \"clause references\", \n      \"page_references\": [list of page numbers],\n      \"document_reference\": \"document name\",\n      \"risk_level\": \"CRITICAL/HIGH/MEDIUM\",\n      \"business_impact\": \"detailed impact explanation\",\n      \"financial_quantification\": \"estimated exposure if possible\",\n      \"recommended_action\": \"specific steps to address\",\n      \"evidence\": \"supporting contract text\",\n      \"negotiation_urgency\": \"immediate/high/medium/low\"\n    }\n  ],\n  \"negotiation_strategy\": {\n    \"deal_breakers\": [\n      {\n        \"issue\": \"non-negotiable item\",\n        \"current_position\": \"current state\",\n        \"minimum_requirement\": \"absolute minimum acceptable\",\n        \"walk_away_threshold\": \"when to abandon deal\"\n      }\n    ],\n    \"high_priority\": [\n      {\n        \"issue\": \"important but negotiable\",\n        \"target_position\": \"ideal outcome\",\n        \"fallback_position\": \"acceptable alternative\",\n        \"negotiation_leverage\": \"what Altrad can offer in return\"\n      }\n    ],\n    \"medium_priority\": [\n      {\n        \"issue\": \"nice-to-have improvements\",\n        \"target_position\": \"desired outcome\",\n        \"trade_off_potential\": \"what could be given up for this\"\n      }\n    ]\n  },\n  \"contract_amendments\": {\n    \"critical_amendments\": [\n      {\n        \"article\": \"clause reference\",\n        \"page_number\": number,\n        \"document_reference\": \"document name\",\n        \"amendment_type\": \"deletion/replacement/addition\",\n        \"current_text\": \"existing problematic text\",\n        \"proposed_amendment\": \"specific replacement language\",\n        \"rationale\": \"why change is essential\",\n        \"altrad_rule\": \"CR reference\",\n        \"legal_justification\": \"supporting legal reasoning\"\n      }\n    ],\n    \"additional_clauses_needed\": [\n      {\n        \"clause_type\": \"type of clause needed\",\n        \"proposed_text\": \"full clause text\",\n        \"location\": \"where to insert (page/section reference)\",\n        \"rationale\": \"why needed\"\n      }\n    ]\n  },\n  \"implementation_roadmap\": {\n    \"immediate_actions\": [\n      \"specific next steps within 1-2 weeks\"\n    ],\n    \"negotiation_sequence\": [\n      \"Phase 1: Deal breakers and show-stoppers\",\n      \"Phase 2: High priority commercial terms\", \n      \"Phase 3: Medium priority improvements\",\n      \"Phase 4: Final documentation and execution\"\n    ],\n    \"timeline_estimate\": \"realistic negotiation duration\",\n    \"resource_requirements\": \"legal/commercial support needed\",\n    \"success_metrics\": \"how to measure negotiation success\"\n  },\n  \"executive_dashboard\": {\n    \"proceed_recommendation\": \"PROCEED/CONDITIONAL/DO_NOT_PROCEED\",\n    \"conditions_for_proceeding\": [\"specific requirements\"],\n    \"estimated_contract_value_at_risk\": \"financial quantification\",\n    \"negotiation_complexity\": \"HIGH/MEDIUM/LOW\",\n    \"competitive_implications\": \"impact on bid position\",\n    \"altrad_group_precedents\": \"relevant past decisions\"\n  },\n  \"appendices\": {\n    \"compliance_matrix\": \"visual summary of all CR compliance\",\n    \"risk_heat_map\": \"prioritized risk visualization\",\n    \"clause_tracking_sheet\": \"negotiation progress tracker format\",\n    \"escalation_triggers\": \"when to involve senior management\"\n  }\n}\n\nAnalysis Guidelines\n\nDocument Processing\n• Read all provided documents thoroughly\n• Extract and record document metadata (page count, file size, document date)\n• Identify document hierarchy and relationships\n• Note any missing or incomplete sections\n• Cross-reference between documents for consistency\n• Record page numbers for all clause references\n\nClause-by-Clause Review\n• Analyze EVERY substantive clause, not just problematic ones\n• Provide specific contract text quotes as evidence with page references\n• Link each clause to relevant Altrad Rules where applicable\n• Record exact page numbers where clauses are found\n• Assess individual clause risk independent of overall contract\n• Challenge unclear or potentially problematic language objectively\n\nRisk Quantification\n• Provide financial estimates where possible\n• Consider probability and impact of risks\n• Distinguish between immediate and long-term exposures\n• Account for jurisdiction-specific factors\n• Flag unrealistic risk allocations or terms\n\nNegotiation Intelligence\n• Prioritize issues by business impact and achievability\n• Provide specific alternative language for problematic clauses\n• Consider counterparty perspective and likely resistance\n• Suggest trading strategies (give X to get Y)\n• Assess realistic negotiation outcomes honestly\n\nQuality Assurance\n• Ensure all CR rules are systematically evaluated\n• Verify compliance percentages are accurately calculated\n• Check that critical issues align with compliance scores\n• Confirm recommendations are actionable and specific\n• Maintain objectivity in risk assessment\n• Verify all page references are accurate and traceable\n\nSpecial Instructions\n• Always quote specific contract text as evidence\n• Provide document and clause references with page numbers for all citations\n• Distinguish between mandatory changes vs. improvements\n• Consider cumulative effect of multiple issues\n• Account for industry standards and market practices\n• Maintain professional tone suitable for senior management\n• Flag any unusual or non-standard contract provisions\n• Note positive/favorable clauses as well as problematic ones\n• Provide honest assessment of negotiation feasibility\n• Alert to potential unrealistic expectations or harmful decisions\n• Ensure complete traceability by recording source document metadata\n\nThis system provides strategic contract intelligence to support Altrad's commercial decision-making and risk management across global operations while maintaining professional integrity and user wellbeing awareness.",
          "passthroughBinaryImages": "={{ true }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        336,
        -32
      ],
      "id": "542db80f-50a8-4338-93c0-3684857fba1b",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://172.17.0.6:3000/forms/chromium/convert/html",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Gotenberg-Output-Filename",
              "value": "=contract_review-"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "contract_review.pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        64,
        224
      ],
      "id": "df7ff79f-7896-47c2-9085-33d9bc394cd2",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "37008694-d30f-49bc-ad9f-2c28f4a43c40"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Word"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "11f55725-1222-428d-8617-87d9c8e895fb",
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "aa46259d-e6b3-4744-8fc0-98980e9c680a",
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "text/plain",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -848,
        -240
      ],
      "id": "b6c54463-31d6-4abf-a958-0374e5b499be",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "output.pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -336,
        -352
      ],
      "id": "03996110-63c3-408a-bfef-47009138f696",
      "name": "Extract from word"
    },
    {
      "parameters": {
        "operation": "text",
        "destinationKey": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -528,
        16
      ],
      "id": "c48cd706-f1c3-4e5e-a709-ce664e5d865f",
      "name": "Extract from tekst"
    },
    {
      "parameters": {
        "jsCode": "const results = [];\nconst inputItems = $input.all();\n\nfor (const item of inputItems) {\n  if (item.binary) {\n    for (const [key, bin] of Object.entries(item.binary)) {\n      const fileName = bin.fileName?.toLowerCase() || '';\n      const mimeType = bin.mimeType?.toLowerCase() || '';\n\n      const isAttachment = key.startsWith('attachment_') || \n                           key.includes('attachment') || \n                           key.startsWith('data_') ||\n                           bin.fileName;\n\n      // Herkenbare extensies\n      const isPdf = mimeType === 'application/pdf' || fileName.endsWith('.pdf');\n      const isJpg = mimeType === 'image/jpeg' || fileName.endsWith('.jpg') || fileName.endsWith('.jpeg');\n      const isPng = mimeType === 'image/png' || fileName.endsWith('.png');\n\n      const isAllowedFile = isPdf || isJpg || isPng;\n\n      if (isAttachment && isAllowedFile) {\n        results.push({\n          binary: {\n            data: bin,\n          },\n          json: {\n            fileName: bin.fileName || `attachment_${key}`,\n            mimeType: bin.mimeType || 'unknown',\n            originalKey: key,\n          },\n        });\n      }\n    }\n  }\n}\n\nreturn results.length > 0 ? results : [{\n  json: {\n    error: 'Geen PDF of afbeeldingsbestanden gevonden',\n    tip: 'Controleer of er PDF/JPG/PNG-bijlagen in de e-mail zitten en of de e-mail correct is verwerkt'\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1552,
        -464
      ],
      "id": "961d9fe0-af82-4964-886a-dfc85ec5498a",
      "name": "Extract Attachments",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "// DEBUG: Log alle input items\nconsole.log('=== DEBUG INFO START ===');\nconst allInputs = $input.all();\nconsole.log('Totaal aantal input items:', allInputs.length);\n\nallInputs.forEach((item, index) => {\n  console.log(`=== INPUT ITEM ${index + 1} ===`);\n  console.log('Has JSON:', !!item.json);\n  console.log('Has text:', !!item.json?.text);\n  console.log('Text length:', item.json?.text?.length || 0);\n  console.log('File Name:', item.json?.fileName);\n  console.log('Number of pages (from metadata):', item.json?.numpages);\n  console.log('Number of pages rendered:', item.json?.numrender);\n  console.log(`=== END INPUT ITEM ${index + 1} ===\\n`);\n});\n\nconsole.log('=== DEBUG INFO END ===');\n\n// Normale code\nconst results = [];\nconst allDocuments = [];\n\n// Verzamel alle documenten met metadata en valideer de inhoud\nfor (const item of allInputs) {\n  if (item.json && item.json.text) {\n    const fileName = item.json.fileName || `Document_${allDocuments.length + 1}`;\n    const fileType = item.json.fileType || 'Onbekend';\n    const numPages = item.json.numpages || 0;\n    const textLength = item.json.text.length;\n\n    console.log(`Processing document: ${fileName}`);\n    console.log(`  Expected pages: ${numPages}`);\n    console.log(`  Actual text length: ${textLength}`);\n\n    // Controle om te zien of de tekst volledig is\n    const isTextComplete = textLength > 1000 && textLength > numPages * 100; // Heuristic\n    if (!isTextComplete) {\n      console.warn(`  WARNING: The text for ${fileName} seems incomplete. It may be truncated.`);\n    }\n\n    allDocuments.push({\n      documentIndex: allDocuments.length + 1,\n      fileName: fileName,\n      fileType: fileType,\n      text: item.json.text,\n      numPages: numPages\n    });\n  }\n}\n\nconsole.log(`Total documents processed: ${allDocuments.length}`);\n\n// Maak gecombineerde tekst met duidelijke bronvermelding\nconst documentSections = allDocuments.map((doc) => {\n  return `=== DOCUMENT ${doc.documentIndex}: ${doc.fileName} ===\nBESTANDSTYPE: ${doc.fileType}\nPAGINA'S: ${doc.numPages}\n\n${doc.text}`;\n});\n\nconst combinedText = `VOLLEDIGE CONTRACT DOCUMENTATIE PAKKET\nTotaal aantal documenten: ${allDocuments.length}\n\nDOCUMENTOVERZICHT:\n${allDocuments.map(doc => `${doc.documentIndex}. ${doc.fileName} (Pagina's: ${doc.numPages})`).join('\\n')}\n\n${'='.repeat(100)}\n\n${documentSections.join('\\n\\n' + '='.repeat(100) + '\\n\\n')}\n\nEINDE DOCUMENTATIE PAKKET`;\n\nresults.push({\n  json: {\n    contract_text: combinedText,\n    documentCount: allDocuments.length,\n    documentList: allDocuments.map(doc => ({\n      documentIndex: doc.documentIndex,\n      fileName: doc.fileName,\n      numPages: doc.numPages\n    })),\n    instruction: `Analyseer dit complete pakket van ${allDocuments.length} document(en). Verwijs bij specifieke clausules naar het juiste DOCUMENT nummer voor traceerbaarheid.`\n  }\n});\n\nconsole.log('Final output prepared with', allDocuments.length, 'documents');\nconsole.log('Contract text length:', combinedText.length);\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        128,
        -224
      ],
      "id": "4a5138eb-a942-4081-a43f-d47c3c3ceb1d",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -528,
        -144
      ],
      "id": "0bf23a24-dfbd-48c9-8e5b-d0231a5c3992",
      "name": "Extract from PDF"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://172.17.0.6:3000/forms/libreoffice/convert",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "merge",
              "value": "true"
            },
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "output.pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -528,
        -352
      ],
      "id": "022ab680-800d-48e5-8d4e-552c399c41c9",
      "name": "Convert to PDF"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -112,
        -128
      ],
      "id": "b1684446-336a-4eb1-a8b5-c7d8e33c7ed3",
      "name": "Merge",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze and review this complete contract package. Provide a detailed assessment including risks, recommendations, and key considerations: {{$json.contract_text}}\n\nTreat both documents as one coherent package and reference the specific DOCUMENT number when citing clauses.",
        "options": {
          "systemMessage": "=CONTRACT ASSESSMENT AGENT PROMPT\nROLE & CONTEXT\n\nYou are a specialized contract analyst who assesses contracts for Altrad Group companies. You analyze contracts for compliance with the Altrad Contracting Rules (Red Zones) and identify risks and deviations.\n\nInput handling (strict): You will receive the full contract as plain UTF-8 text in a field named contract_text. Do not read base64, files or links. Do not simulate if contract_text is missing. If missing, return exactly:\n\n{\"status\":\"INPUT_ERROR\",\"missing\":[\"contract_text\"],\"message\":\"No readable contract text provided in `contract_text`.\"}\n\n\nFoundational rule (numbering neutrality): Never map CR numbers or example article numbers to a contract’s numbering. Analyze by topic/content and only cite the identifiers actually present in the contract (article/section/paragraph title or number as found). If none, write: “no explicit identifier – [heading/subject]”.\n\nCONTRACT ADAPTABILITY\n\nThis analysis framework applies to ALL contract types including:\n\nServices Contracts (Scaffolding, Insulation, Painting, Mechanical)\n\nSupply Contracts (Equipment, Materials)\n\nConstruction/Engineering Contracts\n\nSubcontractor Agreements\n\nFramework Agreements\n\nAuto-detect contract characteristics:\n\nContract type and scope\n\nArticle numbering system\n\nApplicable jurisdiction\n\nKey commercial terms structure\n\nDo not assume any fixed mapping between topics and article numbers; detect and cite the contract’s own identifiers.\n\nALTRAD CONTRACTING RULES (RED ZONES)\n\nCR1 - Consequential Damages: No liability for indirect/consequential damages (loss of profit, loss of business, loss of goodwill). Express release and waiver from client required.\n\nCR2 - Liquidated Damages:\n\nCap at 1% of contract value per week, maximum 10% total\n\nOnly for clearly defined milestones\n\nAim for 5% cap, only 10% if essential for contract award\n\nTry to obtain 5 working day grace period before LDs begin\n\nCR3 - Liability Cap/Period:\n\n≥€5m: max 50% of contract price\n\n€0.75m–5m: max 75% of contract price\n\n<€0.75m: max 150% of contract price\n\nLiability ceases upon completion certificate/occupation/use by client\n\nAlways seek to minimize liability cap towards 10% where possible\n\nCR4 - Warranty Period:\n\nMaximum 24 months from delivery/completion certificate date\n\nStart at 12 months, only extend to 24 if essential for contract award\n\nBack-to-back arrangements with manufacturers/suppliers/subcontractors\n\nCR5 - Third Party Liability: Each party assumes own liability for injury/death of third party personnel or damage to third party property\n\nCR6 - Insurance:\n\nContract must identify which insurances client shall provide\n\nIndemnity from client for losses caused by such insurance failing\n\nClient insurer should waive subrogation rights against us/our insurers\n\nCR7 - Payment Terms: Maximum 60 day payment terms + credit check on counterparty\n\nCR8 - Suspension & Termination:\n\nRight to suspend/terminate upon: insolvency, continued non-payment (60+ days), work suspension exceeding 90 days\n\nIf client suspends for no fault/breach: entitlement to standby rates or documented costs + profit\n\nCR9 - Retentions & Security:\n\nRetention shall not exceed 10%\n\nBank guarantees: max 10% during execution, 5% for guarantee period\n\nNo overlap between bank and parent company guarantees\n\nCR10 - Governing Law: Do not accept laws you are not familiar with\n\nCR11 - Code of Conduct: Prohibition of bribery, corruption, slavery, human trafficking, child labour\n\nASSESSMENT INSTRUCTIONS\n\nAnalyze the provided contract systematically by topic and assess. Work only with contract_text. Do not invent content not present in contract_text.\n\nA. ARTICLE-BY-ARTICLE ANALYSIS\n\nFor each contract article/section/paragraph (adapt to actual contract structure and do not assume any fixed numbering):\n\nArticle/Section identifier (as found in the contract: number, letter, or title-based; if none, state “no explicit identifier – [heading/subject]”)\n\nCore content summary\n\nAltrad rules compliance check\n\nRisk level (LOW/MEDIUM/HIGH/CRITICAL)\n\nSpecific concerns and red flags\n\nNegotiation recommendations\n\nEvidence: quote a short exact excerpt (1–3 sentences) from contract_text supporting your finding.\n\nNote: Search the contract text semantically for each topic (payment, LDs, liability, insurance, warranty, etc.) and cite only the identifiers actually present.\n\nB. SPECIFIC FOCUS AREAS\n\nPay special attention to (adapt emphasis based on contract type). Do not assume article numbers.\n\nFINANCIAL TERMS: Price structure and indexation; payment terms and invoicing procedures; securities and guarantees; retention percentage and conditions; liquidated damages structure.\n\nLIABILITY & RISK: Liability allocations; liability limitations and exclusions; insurance requirements; consequential damages clauses; warranty and defects liability.\n\nOPERATIONAL TERMS: Changes/variations; suspension and termination rights; delivery and acceptance; subcontracting; deadlines and delay procedures.\n\nLEGAL & COMPLIANCE: Applicable law and jurisdiction; confidentiality; intellectual property; employment conditions; registration/certification requirements.\n\nC. OUTPUT STRUCTURE\n{\n  \"contract_summary\": {\n    \"contract_type\": \"...\",\n    \"contracting_parties\": \"...\",\n    \"estimated_value\": \"...\",\n    \"key_scope\": \"...\"\n  },\n  \"overall_risk_assessment\": {\n    \"risk_level\": \"LOW/MEDIUM/HIGH/CRITICAL\",\n    \"executive_summary\": \"...\",\n    \"critical_issues_count\": \"number\",\n    \"compliance_score\": \"...%\" \n  },\n  \"red_zone_compliance\": {\n    \"CR1_consequential_damages\": {\"status\": \"COMPLIANT/NON_COMPLIANT/PARTIAL/UNCLEAR\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR2_liquidated_damages\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR3_liability_cap\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR4_warranty_period\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR5_third_party_liability\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR6_insurance\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR7_payment_terms\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR8_suspension_termination\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR9_retentions_security\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR10_governing_law\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR11_code_conduct\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"}\n  },\n  \"article_analysis\": [\n    {\n      \"article_or_section_identifier\": \"...\",\n      \"title\": \"...\",\n      \"summary\": \"...\",\n      \"risk_level\": \"...\",\n      \"altrad_compliance\": \"...\",\n      \"concerns\": [\"...\"],\n      \"recommendations\": [\"...\"],\n      \"evidence\": \"short exact quote from contract_text\"\n    }\n  ],\n  \"critical_issues\": [\n    {\n      \"issue\": \"...\",\n      \"article_reference\": \"...\",\n      \"risk_level\": \"...\",\n      \"business_impact\": \"...\",\n      \"recommended_action\": \"...\",\n      \"evidence\": \"short exact quote\"\n    }\n  ],\n  \"negotiation_priorities\": [\n    {\n      \"priority\": \"HIGH/MEDIUM/LOW\",\n      \"item\": \"...\",\n      \"current_position\": \"...\",\n      \"target_position\": \"...\",\n      \"fallback_position\": \"...\"\n    }\n  ],\n  \"recommendations\": {\n    \"proceed\": \"YES/NO/CONDITIONAL\",\n    \"conditions\": [\"...\"],\n    \"must_change\": [\"...\"],\n    \"should_change\": [\"...\"],\n    \"could_improve\": [\"...\"]\n  },\n  \"contract_amendments\": {\n    \"critical_amendments\": [\n      {\n        \"article\": \"...\",\n        \"current_text\": \"...\",\n        \"proposed_amendment\": \"...\",\n        \"rationale\": \"...\",\n        \"altrad_rule\": \"...\",\n        \"evidence\": \"short exact quote\"\n      }\n    ],\n    \"additional_clauses_needed\": [\n      {\n        \"clause_type\": \"...\",\n        \"proposed_text\": \"...\",\n        \"location\": \"...\",\n        \"rationale\": \"...\"\n      }\n    ]\n  },\n  \"implementation_roadmap\": {\n    \"immediate_actions\": [\"...\"],\n    \"negotiation_sequence\": [\"...\"],\n    \"fallback_strategies\": [\"...\"],\n    \"deal_breakers\": [\"...\"]\n  }\n}\n\nANALYSIS GUIDELINES\n\nBe specific: Quote exact article numbers and clause text only as found in contract_text.\n\nQuantify risks: Provide numeric compliance_percent for each CR and an overall compliance_score.\n\nPrioritize: Focus on business-critical items first.\n\nBe practical: Provide implementable recommendations.\n\nContextualize: Consider industry standards and local legislation.\n\nIdentify gaps: If a topic cannot be found in contract_text, mark the CR as UNCLEAR and explain what is missing.\n\nNumbering neutrality: Never rely on fixed/example article numbers; search by topic and cite only actual identifiers present.\n\nNo fabrication: If unsure, say so; do not invent clauses or identifiers.\n\nEXAMPLE ANALYSIS APPROACH\n\nUse only the actual clause identifiers found in the contract; any examples are illustrative, not assumptions.\n\nNote the overall structure and length.\n\nIdentify applicable law and jurisdiction (cite the actual clause you find).\n\nAssess liability provisions against CR3 caps (cite actual clause identifiers).\n\nReview security requirements against CR9 (cite actual clause identifiers).\n\nExamine payment terms against CR7 (cite actual clause identifiers).\n\nCheck warranty periods against CR4 (cite actual clause identifiers).\n\nEvaluate suspension/termination rights against CR8 (cite actual clause identifiers).\n\nReview insurance provisions against CR6 (cite actual clause identifiers).",
          "passthroughBinaryImages": "={{ true }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        832,
        -480
      ],
      "id": "0af6b6fa-3d6b-4d31-90fc-1efa6c1b498e",
      "name": "AI Agent1",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// N8N Code Node — Enhanced Altrad Excel Export (v5)\n// - Geen zinsafbreking meer\n// - CSV formaat (compatibel, geen waarschuwingen)\n// - Optioneel tweede tabblad data\n// - Verbeterde compatibiliteit\n\nconst contractData = $input.first().json;\n\n// ===================== CONFIG =====================\nconst CONFIG = {\n  title: 'Enhanced Altrad Contract Analysis - Detailed Report',\n  sheetName: 'Contract Analysis',\n  binaryPropertyName: 'file',\n\n  // rijenbeheer (0 = onbeperkt)\n  minRows: 0,\n  maxRows: 0,               \n  enforceHardCap: false,\n  sortByRiskBeforeCap: true,\n\n  // extra legal sheet\n  enableLegalSheet: true,\n  legalSheetName: 'Legal Analysis',\n\n  // welke secties/caps meenemen\n  caps: {\n    red_zone_compliance: Infinity,\n    critical_issues: Infinity,\n    detailed_clause_analysis: Infinity,\n    deal_breakers: Infinity,\n    high_priority_negotiation: Infinity,\n    medium_priority_negotiation: Infinity,\n    contract_amendments__critical: Infinity,\n    contract_amendments__additional: Infinity,\n    implementation_immediate: Infinity,\n    generic_section: Infinity,\n  },\n  redZoneIncludeCompliant: false,\n\n  // header velden\n  headerPaths: {\n    projectReference: [\n      'project_metadata.project_reference',\n      'contract_summary.contract_type',\n    ],\n    contractingParties: [\n      'contract_summary.contracting_parties',\n    ],\n    estimatedValue: [\n      'contract_summary.estimated_value',\n    ],\n    analysisDate: [\n      'project_metadata.analysis_date',\n    ],\n  },\n\n  dateStrategy: 'iso',\n};\n\n// ===================== HELPERS =====================\nfunction get(obj, path) {\n  if (!obj) return undefined;\n  const parts = path.split('.');\n  let cur = obj;\n  for (const p of parts) {\n    if (cur && Object.prototype.hasOwnProperty.call(cur, p)) cur = cur[p]; else return undefined;\n  }\n  return cur;\n}\n\nfunction firstDefined(obj, paths = []) {\n  for (const p of paths) {\n    const v = get(obj, p);\n    if (v !== undefined && v !== null && v !== '') return v;\n  }\n  return undefined;\n}\n\n// CSV-veilige escaping\nfunction escapeCSV(text) {\n  if (text === null || text === undefined) return '';\n  const str = String(text);\n  \n  // Als de string quotes, komma's of newlines bevat, wikkel in quotes en escape quotes\n  if (str.includes('\"') || str.includes(',') || str.includes('\\n') || str.includes('\\r')) {\n    return '\"' + str.replace(/\"/g, '\"\"') + '\"';\n  }\n  return str;\n}\n\n// Slimme tekst inkorten op zinsgrenzen\nfunction smartTruncate(text, maxLength = 300) {\n  if (!text) return '';\n  const s = String(text).trim();\n  if (s.length <= maxLength) return s;\n  \n  // Zoek naar laatste zinsgrens binnen de limiet\n  const truncated = s.substring(0, maxLength);\n  \n  // Zoek naar laatste punt, uitroepteken of vraagteken\n  const sentenceEnders = ['.', '!', '?'];\n  let lastSentenceEnd = -1;\n  \n  for (const ender of sentenceEnders) {\n    const pos = truncated.lastIndexOf(ender);\n    if (pos > lastSentenceEnd) {\n      lastSentenceEnd = pos;\n    }\n  }\n  \n  // Als we een zinsgrens vonden en het is niet te kort (minstens 60% van gewenste lengte)\n  if (lastSentenceEnd > maxLength * 0.6) {\n    return truncated.substring(0, lastSentenceEnd + 1);\n  }\n  \n  // Anders zoek naar laatste komma, puntkomma of dubbele punt\n  const clauseEnders = [',', ';', ':'];\n  let lastClauseEnd = -1;\n  \n  for (const ender of clauseEnders) {\n    const pos = truncated.lastIndexOf(ender);\n    if (pos > lastClauseEnd) {\n      lastClauseEnd = pos;\n    }\n  }\n  \n  // Als we een clause-grens vonden en het is niet te kort (minstens 70% van gewenste lengte)\n  if (lastClauseEnd > maxLength * 0.7) {\n    return truncated.substring(0, lastClauseEnd + 1);\n  }\n  \n  // Anders zoek naar laatste spatie om midden in een woord afbreken te voorkomen\n  const lastSpace = truncated.lastIndexOf(' ');\n  if (lastSpace > maxLength * 0.8) {\n    return truncated.substring(0, lastSpace) + '...';\n  }\n  \n  // Als laatste redmiddel: originele tekst zonder afkapping\n  return s;\n}\n\nfunction normalizeData(data) {\n  const d = Array.isArray(data) ? data[0] : data;\n  return (d && typeof d === 'object') ? d : {};\n}\n\nfunction toTitle(str) {\n  return String(str || '')\n    .replace(/_/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim()\n    .replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\nfunction detectRisk(item = {}, fallback = 'LOW') {\n  const candidates = [\n    (item.risk || item.risk_level || item.level || item.severity || ''),\n    (item.status || ''),\n    (item.priority || ''),\n  ].map(x => String(x || '').toUpperCase());\n\n  for (const c of candidates) {\n    if (['CRITICAL','HIGH','MEDIUM','LOW'].includes(c)) return c;\n    if (c === 'NON_COMPLIANT') return 'CRITICAL';\n    if (c === 'PARTIAL') return 'MEDIUM';\n  }\n  return String(fallback || 'LOW').toUpperCase();\n}\n\nfunction rank(risk) {\n  const r = String(risk || 'LOW').toUpperCase();\n  return { CRITICAL: 1, HIGH: 2, MEDIUM: 3, LOW: 4 }[r] || 5;\n}\n\nfunction formatDate({ dateString, strategy = CONFIG.dateStrategy }) {\n  let d;\n  if (dateString) {\n    const parsed = new Date(dateString);\n    d = isNaN(parsed.getTime()) ? new Date() : parsed;\n  } else {\n    d = new Date();\n  }\n  return d.toISOString().slice(0, 10);\n}\n\nfunction makeRow({ idx, doc, article, clause, comments, suggested, answers, risk }) {\n  return {\n    no: idx,\n    doc: doc || '',\n    article: article || '',\n    clause: clause || '',\n    comments: comments || '',\n    suggestedClauses: suggested || '',\n    clientAnswers: answers || '',\n    risk: (risk || 'LOW').toUpperCase(),\n  };\n}\n\n// ===================== ROW CONSTRUCTION =====================\nfunction createRows(data) {\n  const rows = [];\n  let idx = 1;\n  const d = normalizeData(data);\n\n  let capLeft = (CONFIG.maxRows && CONFIG.maxRows > 0) ? CONFIG.maxRows : Infinity;\n  const byRisk = CONFIG.sortByRiskBeforeCap;\n\n  const push = (arr) => {\n    const sorted = byRisk ? [...arr].sort((a,b) => rank(a.risk) - rank(b.risk)) : arr;\n    const slice = sorted.slice(0, capLeft === Infinity ? sorted.length : capLeft);\n    rows.push(...slice.map(r => ({ ...r, no: idx++ })));\n    if (capLeft !== Infinity) capLeft = Math.max(0, capLeft - slice.length);\n    return slice.length;\n  };\n\n  // 1) OVERALL RISK ASSESSMENT\n  const ora = d.overall_risk_assessment;\n  if (ora) {\n    push([\n      makeRow({\n        idx: 0,\n        doc: 'Assessment',\n        article: 'Overall Risk',\n        clause: String(ora.risk_level || 'Unknown'),\n        comments: `Compliance Score: ${ora.compliance_score ?? 'N/A'} | Critical Issues: ${ora.critical_issues_count ?? 0}`,\n        suggested: smartTruncate(ora.executive_summary || 'No summary provided', 500),\n        answers: '',\n        risk: detectRisk({ risk_level: ora.risk_level }),\n      })\n    ]);\n  }\n\n  // 2) RED ZONE COMPLIANCE\n  if (d.red_zone_compliance && typeof d.red_zone_compliance === 'object') {\n    const redRows = Object.entries(d.red_zone_compliance)\n      .filter(([, item]) => item && item.status && (CONFIG.redZoneIncludeCompliant || item.status !== 'COMPLIANT'))\n      .map(([key, item]) => {\n        const articleLabel = toTitle(key.replace(/CR\\d+_/, ''));\n        return makeRow({\n          idx: 0,\n          doc: 'Red Zone',\n          article: articleLabel,\n          clause: key,\n          comments: `${item.status} (${item.compliance_percent || '0%'}) - ${smartTruncate(item.details || 'No details', 400)}`,\n          suggested: smartTruncate(item.evidence || 'Review and update clause as needed', 400),\n          answers: '',\n          risk: detectRisk({ status: item.status }),\n        });\n      });\n    push(redRows);\n  }\n\n  // 3) CRITICAL ISSUES\n  if (Array.isArray(d.critical_issues)) {\n    push(d.critical_issues.map(ci => makeRow({\n      idx: 0,\n      doc: 'Critical Issue',\n      article: ci.article_reference || 'General',\n      clause: ci.issue || 'Unknown Issue',\n      comments: `${(ci.risk_level || 'CRITICAL')} RISK - ${smartTruncate(ci.business_impact || 'No impact specified', 350)}`,\n      suggested: smartTruncate(ci.recommended_action || 'Review required', 400),\n      answers: '',\n      risk: detectRisk(ci, 'CRITICAL'),\n    })));\n  }\n\n  // 4) DETAILED CLAUSE ANALYSIS\n  if (Array.isArray(d.detailed_clause_analysis)) {\n    push(d.detailed_clause_analysis\n      .slice(0, CONFIG.caps.detailed_clause_analysis)\n      .map(a => makeRow({\n        idx: 0,\n        doc: 'Clause Analysis',\n        article: a.clause_reference || 'Unknown',\n        clause: a.clause_title || 'No Title',\n        comments: `${a.risk_level || 'MEDIUM'} - ${smartTruncate(a.business_impact || '', 300)}`,\n        suggested: smartTruncate(a.proposed_amendment || a.target_position || '', 400),\n        answers: '',\n        risk: detectRisk(a, 'MEDIUM'),\n      })));\n  }\n\n  // 5) NEGOTIATION STRATEGY - DEAL BREAKERS\n  if (d.negotiation_strategy?.deal_breakers && Array.isArray(d.negotiation_strategy.deal_breakers)) {\n    push(d.negotiation_strategy.deal_breakers\n      .slice(0, CONFIG.caps.deal_breakers)\n      .map(p => makeRow({\n        idx: 0,\n        doc: 'Deal Breaker',\n        article: 'Critical',\n        clause: p.issue || 'Unknown Item',\n        comments: `Current: ${smartTruncate(p.current_position || '', 200)} | Walk away if: ${smartTruncate(p.walk_away_threshold || '', 150)}`,\n        suggested: smartTruncate(p.minimum_requirement || '', 400),\n        answers: '',\n        risk: 'CRITICAL',\n      })));\n  }\n\n  // 6) NEGOTIATION STRATEGY - HIGH PRIORITY\n  if (d.negotiation_strategy?.high_priority && Array.isArray(d.negotiation_strategy.high_priority)) {\n    push(d.negotiation_strategy.high_priority\n      .slice(0, CONFIG.caps.high_priority_negotiation)\n      .map(p => makeRow({\n        idx: 0,\n        doc: 'High Priority',\n        article: 'Important',\n        clause: p.issue || 'Unknown Item',\n        comments: `Target: ${smartTruncate(p.target_position || '', 200)} | Leverage: ${smartTruncate(p.negotiation_leverage || '', 150)}`,\n        suggested: smartTruncate(p.fallback_position || '', 400),\n        answers: '',\n        risk: 'HIGH',\n      })));\n  }\n\n  // 7) NEGOTIATION STRATEGY - MEDIUM PRIORITY\n  if (d.negotiation_strategy?.medium_priority && Array.isArray(d.negotiation_strategy.medium_priority)) {\n    push(d.negotiation_strategy.medium_priority\n      .slice(0, CONFIG.caps.medium_priority_negotiation)\n      .map(p => makeRow({\n        idx: 0,\n        doc: 'Medium Priority',\n        article: 'Optional',\n        clause: p.issue || 'Unknown Item',\n        comments: `Target: ${smartTruncate(p.target_position || '', 250)}`,\n        suggested: smartTruncate(p.trade_off_potential || '', 400),\n        answers: '',\n        risk: 'MEDIUM',\n      })));\n  }\n\n  // 8) CONTRACT AMENDMENTS - CRITICAL\n  if (d.contract_amendments?.critical_amendments && Array.isArray(d.contract_amendments.critical_amendments)) {\n    push(d.contract_amendments.critical_amendments\n      .slice(0, CONFIG.caps.contract_amendments__critical)\n      .map(am => makeRow({\n        idx: 0,\n        doc: 'Amendment',\n        article: am.article || 'New Article',\n        clause: 'CRITICAL Amendment Required',\n        comments: `Rule: ${am.altrad_rule || 'N/A'} - ${smartTruncate(am.rationale || 'No rationale', 350)}`,\n        suggested: smartTruncate(am.proposed_amendment || 'Amendment text required', 500),\n        answers: '',\n        risk: 'HIGH',\n      })));\n  }\n\n  // 9) CONTRACT AMENDMENTS - ADDITIONAL CLAUSES\n  if (d.contract_amendments?.additional_clauses_needed && Array.isArray(d.contract_amendments.additional_clauses_needed)) {\n    push(d.contract_amendments.additional_clauses_needed\n      .slice(0, CONFIG.caps.contract_amendments__additional)\n      .map(cl => makeRow({\n        idx: 0,\n        doc: 'New Clause',\n        article: cl.location || 'New Article',\n        clause: cl.clause_type || 'Additional Clause',\n        comments: smartTruncate(cl.rationale || 'New clause required', 350),\n        suggested: smartTruncate(cl.proposed_text || 'Clause text to be defined', 500),\n        answers: '',\n        risk: 'MEDIUM',\n      })));\n  }\n\n  // 10) IMPLEMENTATION ROADMAP - IMMEDIATE ACTIONS\n  if (d.implementation_roadmap?.immediate_actions && Array.isArray(d.implementation_roadmap.immediate_actions)) {\n    push(d.implementation_roadmap.immediate_actions\n      .slice(0, CONFIG.caps.implementation_immediate)\n      .map((action, i) => makeRow({\n        idx: 0,\n        doc: 'Action',\n        article: 'Immediate Action',\n        clause: `Action ${i + 1}`,\n        comments: smartTruncate(action, 400),\n        suggested: 'Execute immediately before contract signing',\n        answers: '',\n        risk: 'HIGH',\n      })));\n  }\n\n  // 11) GENERIC FALLBACK\n  const skipKeys = new Set([\n    'overall_risk_assessment', 'red_zone_compliance', 'critical_issues',\n    'detailed_clause_analysis', 'negotiation_strategy', 'contract_amendments',\n    'implementation_roadmap', 'project_metadata', 'contract_summary',\n    'executive_dashboard', 'appendices',\n  ]);\n\n  Object.entries(d).forEach(([key, val]) => {\n    if (skipKeys.has(key) || /_?html$/i.test(key) || !Array.isArray(val)) return;\n\n    const arr = val.slice(0, CONFIG.caps.generic_section).map((item, i) => {\n      const article = item?.article || item?.article_reference || item?.name || item?.title || item?.section || toTitle(key);\n      const clause = item?.clause || item?.issue || item?.subsection || item?.key || `Item ${i + 1}`;\n      const comments = item?.comments || item?.summary || item?.details || item?.description || '';\n      const suggested = item?.recommended_action || item?.recommendation || item?.proposed_text || '';\n      return makeRow({\n        idx: 0, doc: toTitle(key), article, clause,\n        comments: smartTruncate(comments, 450),\n        suggested: smartTruncate(suggested, 450),\n        answers: '', risk: detectRisk(item, 'LOW'),\n      });\n    });\n    push(arr);\n  });\n\n  rows.forEach((r, i) => { r.no = i + 1; });\n  return rows;\n}\n\n// ===================== LEGAL SHEET ROWS =====================\nfunction createLegalRows(data) {\n  const d = normalizeData(data);\n  const rows = [];\n  let idx = 1;\n\n  if (Array.isArray(d.detailed_clause_analysis)) {\n    d.detailed_clause_analysis.forEach(c => {\n      rows.push({\n        no: idx++, section: 'Clause Analysis',\n        ref: c.clause_reference || '', title: c.clause_title || '',\n        category: c.clause_category || '', risk: detectRisk(c, 'MEDIUM'),\n        currentText: c.current_text || '', proposed: c.proposed_amendment || c.target_position || '',\n        businessImpact: c.business_impact || '', rationale: c.rationale || '',\n        rules: Array.isArray(c.altrad_rules_affected) ? c.altrad_rules_affected.join(', ') : (c.altrad_rule || ''),\n      });\n    });\n  }\n\n  if (Array.isArray(data?.contract_amendments?.critical_amendments)) {\n    data.contract_amendments.critical_amendments.forEach(a => {\n      rows.push({\n        no: idx++, section: 'Amendment (Critical)', ref: a.article || '',\n        title: 'Critical Amendment', category: 'Amendment', risk: 'HIGH',\n        currentText: a.current_text || '', proposed: a.proposed_amendment || '',\n        businessImpact: '', rationale: a.rationale || '', rules: a.altrad_rule || '',\n      });\n    });\n  }\n\n  if (Array.isArray(data?.contract_amendments?.additional_clauses_needed)) {\n    data.contract_amendments.additional_clauses_needed.forEach(a => {\n      rows.push({\n        no: idx++, section: 'Amendment (Additional)', ref: a.location || '',\n        title: a.clause_type || 'Additional Clause', category: 'Amendment', risk: 'MEDIUM',\n        currentText: '', proposed: a.proposed_text || '',\n        businessImpact: '', rationale: a.rationale || '', rules: '',\n      });\n    });\n  }\n\n  return rows;\n}\n\n// ===================== CSV GENERATION =====================\nfunction generateCSV(data) {\n  const d = normalizeData(data);\n  const rows = createRows(d);\n  const legalRows = CONFIG.enableLegalSheet ? createLegalRows(d) : [];\n\n  // Header info\n  const projectRef = firstDefined(d, CONFIG.headerPaths.projectReference) || 'Not specified';\n  const parties = firstDefined(d, CONFIG.headerPaths.contractingParties) || 'Not specified';\n  const value = firstDefined(d, CONFIG.headerPaths.estimatedValue) || 'N/A';\n  const analysisDateRaw = firstDefined(d, CONFIG.headerPaths.analysisDate);\n  const dateCell = formatDate({ dateString: analysisDateRaw });\n\n  // Build main CSV\n  let mainCSV = '';\n  \n  // Title and header info\n  mainCSV += `${escapeCSV(CONFIG.title)}\\n`;\n  mainCSV += `\\n`;\n  mainCSV += `Project Reference,${escapeCSV(projectRef)},,,Date,${escapeCSV(dateCell)}\\n`;\n  mainCSV += `Contracting Parties,${escapeCSV(parties)}\\n`;\n  mainCSV += `Estimated Value,${escapeCSV(value)}\\n`;\n  mainCSV += `\\n`;\n  \n  // Column headers\n  mainCSV += `No,Doc.,Article,Clause,Comments,Suggested clauses,Client's answers\\n`;\n  \n  // Data rows\n  rows.forEach(row => {\n    mainCSV += `${row.no},${escapeCSV(row.doc)},${escapeCSV(row.article)},${escapeCSV(row.clause)},${escapeCSV(row.comments)},${escapeCSV(row.suggestedClauses)},${escapeCSV(row.clientAnswers)}\\n`;\n  });\n\n  // Build legal CSV if enabled\n  let legalCSV = '';\n  if (CONFIG.enableLegalSheet && legalRows.length > 0) {\n    legalCSV += `Legal Analysis — Detailed Clauses & Amendments\\n`;\n    legalCSV += `\\n`;\n    legalCSV += `No,Section,Clause Ref / Location,Title / Type,Category,Risk,Current Text,Proposed / Target,Business Impact,Rationale / Rules\\n`;\n    \n    legalRows.forEach(row => {\n      const rationaleRules = (row.rationale ? ('Rationale: ' + row.rationale) : '') + \n                           (row.rules ? (row.rationale ? ' | ' : '') + 'Rules: ' + row.rules : '');\n      \n      legalCSV += `${row.no},${escapeCSV(row.section)},${escapeCSV(row.ref)},${escapeCSV(row.title)},${escapeCSV(row.category)},${escapeCSV(row.risk)},${escapeCSV(row.currentText)},${escapeCSV(row.proposed)},${escapeCSV(row.businessImpact)},${escapeCSV(rationaleRules)}\\n`;\n    });\n  }\n\n  return { mainCSV, legalCSV, mainRowCount: rows.length, legalRowCount: legalRows.length };\n}\n\n// ===================== MAIN =====================\ntry {\n  if (!contractData) throw new Error('No contract data provided');\n\n  const d = normalizeData(contractData);\n  const projectRef = firstDefined(d, CONFIG.headerPaths.projectReference) || 'Contract';\n  const riskSuffix = (d.overall_risk_assessment?.risk_level || 'NA').toString().toUpperCase();\n  const cleanRef = String(projectRef).replace(/[^a-zA-Z0-9]/g, '_').substring(0, 60);\n\n  const analysisDateRaw = firstDefined(d, CONFIG.headerPaths.analysisDate);\n  const dateForFilename = formatDate({ dateString: analysisDateRaw });\n\n  const { mainCSV, legalCSV, mainRowCount, legalRowCount } = generateCSV(d);\n\n  // Create combined CSV or separate files\n  let finalCSV = mainCSV;\n  let fileName = `Enhanced_Altrad_Analysis_${cleanRef}_${riskSuffix}_${dateForFilename}.csv`;\n  \n  if (legalCSV) {\n    // Combine both sheets in one CSV with separators\n    finalCSV += `\\n\\n=== LEGAL ANALYSIS SHEET ===\\n\\n`;\n    finalCSV += legalCSV;\n  }\n\n  console.log(`[CSV] Generated Enhanced Altrad Analysis: ${fileName} (rows: main=${mainRowCount}, legal=${legalRowCount})`);\n\n  const result = {\n    json: {\n      ...d,\n      excelGenerated: true,\n      excelFilename: fileName,\n      templateFormat: true,\n      enhancedAltradAnalysis: true,\n      processingTimestamp: new Date().toISOString(),\n      rows: { main: mainRowCount, legal: legalRowCount },\n      config: {\n        sheetName: CONFIG.sheetName,\n        legalSheetName: CONFIG.legalSheetName,\n        maxRows: CONFIG.maxRows,\n        enableLegalSheet: CONFIG.enableLegalSheet,\n        sortByRiskBeforeCap: CONFIG.sortByRiskBeforeCap,\n        smartTruncationEnabled: true,\n        format: 'csv'\n      }\n    },\n    binary: {\n      ...($input.first().binary || {}),\n      [CONFIG.binaryPropertyName]: {\n        data: Buffer.from(finalCSV, 'utf8').toString('base64'),\n        mimeType: 'text/csv',\n        fileName,\n      }\n    }\n  };\n\n  // Add separate legal file if enabled\n  if (CONFIG.enableLegalSheet && legalCSV) {\n    const legalFileName = `Enhanced_Altrad_Legal_${cleanRef}_${riskSuffix}_${dateForFilename}.csv`;\n    result.binary[`${CONFIG.binaryPropertyName}_legal`] = {\n      data: Buffer.from(legalCSV, 'utf8').toString('base64'),\n      mimeType: 'text/csv',\n      fileName: legalFileName,\n    };\n  }\n\n  return result;\n\n} catch (err) {\n  console.error('[CSV] Generation error:', err);\n  return {\n    json: {\n      ...(normalizeData(contractData)),\n      excelGenerated: false,\n      error: String(err && err.message ? err.message : err),\n      errorTimestamp: new Date().toISOString(),\n    },\n    binary: $input.first().binary || {},\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1632,
        432
      ],
      "id": "8c40c7cc-4634-437d-945e-184ed277bbd7",
      "name": "Excel code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Conduct a thorough legal and commercial review of this contract documentation under {{jurisdiction}} law: {{$json.contract_text || $json.text || $json.combinedText}}\n\nProvide comprehensive analysis including risk assessment, compliance evaluation, and negotiation recommendations. Reference specific DOCUMENT numbers when citing clauses for traceability.",
        "options": {
          "systemMessage": "=CONTRACT ASSESSMENT AGENT PROMPT\nROLE & CONTEXT\n\nYou are a specialized contract analyst who assesses contracts for Altrad Group companies. You analyze contracts for compliance with the Altrad Contracting Rules (Red Zones) and identify risks and deviations.\n\nInput handling (strict): You will receive the full contract as plain UTF-8 text in one of these fields: contract_text, text, or combinedText. Do not read base64, files or links. Do not simulate if no contract text is provided. If missing, return exactly:\n\n{\"status\":\"INPUT_ERROR\",\"missing\":[\"contract_text\"],\"message\":\"No readable contract text provided in any expected field.\"}\n\nFoundational rule (numbering neutrality): Never map CR numbers or example article numbers to a contract's numbering. Analyze by topic/content and only cite the identifiers actually present in the contract (article/section/paragraph title or number as found). If none, write: \"no explicit identifier – [heading/subject]\".\n\nMULTI-DOCUMENT PACKAGES\n\nWhen analyzing document packages containing multiple related documents:\n- Treat all documents as one coherent contract package\n- Reference specific DOCUMENT numbers when citing clauses (e.g., \"DOCUMENT 1, Clause 3.2\")\n- Cross-reference terms and conditions between documents\n- Identify any conflicts or inconsistencies between documents\n- Assess the package as a complete contractual framework\n- Consider document hierarchy and precedence rules if specified\n\nCONTRACT ADAPTABILITY\n\nThis analysis framework applies to ALL contract types including:\n\nServices Contracts (Scaffolding, Insulation, Painting, Mechanical)\nSupply Contracts (Equipment, Materials)\nConstruction/Engineering Contracts\nSubcontractor Agreements\nFramework Agreements\n\nAuto-detect contract characteristics:\n- Contract type and scope\n- Article numbering system\n- Applicable jurisdiction\n- Key commercial terms structure\n\nDo not assume any fixed mapping between topics and article numbers; detect and cite the contract's own identifiers.\n\nJURISDICTION HANDLING\n\nThe applicable jurisdiction and local legislation considerations will be specified in the user prompt. Adapt your analysis to consider the legal framework of the specified country while maintaining focus on Altrad Contracting Rules compliance.\n\nALTRAD CONTRACTING RULES (RED ZONES)\n\nCR1 - Consequential Damages: No liability for indirect/consequential damages (loss of profit, loss of business, loss of goodwill). Express release and waiver from client required.\n\nCR2 - Liquidated Damages:\n- Cap at 1% of contract value per week, maximum 10% total\n- Only for clearly defined milestones\n- Aim for 5% cap, only 10% if essential for contract award\n- Try to obtain 5 working day grace period before LDs begin\n\nCR3 - Liability Cap/Period:\n- ≥€5m: max 50% of contract price\n- €0.75m–5m: max 75% of contract price\n- <€0.75m: max 150% of contract price\n- Liability ceases upon completion certificate/occupation/use by client\n- Always seek to minimize liability cap towards 10% where possible\n\nCR4 - Warranty Period:\n- Maximum 24 months from delivery/completion certificate date\n- Start at 12 months, only extend to 24 if essential for contract award\n- Back-to-back arrangements with manufacturers/suppliers/subcontractors\n\nCR5 - Third Party Liability: Each party assumes own liability for injury/death of third party personnel or damage to third party property\n\nCR6 - Insurance:\n- Contract must identify which insurances client shall provide\n- Indemnity from client for losses caused by such insurance failing\n- Client insurer should waive subrogation rights against us/our insurers\n\nCR7 - Payment Terms: Maximum 60 day payment terms + credit check on counterparty\n\nCR8 - Suspension & Termination:\n- Right to suspend/terminate upon: insolvency, continued non-payment (60+ days), work suspension exceeding 90 days\n- If client suspends for no fault/breach: entitlement to standby rates or documented costs + profit\n\nCR9 - Retentions & Security:\n- Retention shall not exceed 10%\n- Bank guarantees: max 10% during execution, 5% for guarantee period\n- No overlap between bank and parent company guarantees\n\nCR10 - Governing Law: Do not accept laws you are not familiar with\n\nCR11 - Code of Conduct: Prohibition of bribery, corruption, slavery, human trafficking, child labour\n\nASSESSMENT INSTRUCTIONS\n\nAnalyze the provided contract systematically by topic and assess. Work only with provided contract text. Do not invent content not present in the contract.\n\nA. ARTICLE-BY-ARTICLE ANALYSIS\n\nFor each contract article/section/paragraph (adapt to actual contract structure and do not assume any fixed numbering):\n\n- Article/Section identifier (as found in the contract: number, letter, or title-based; if none, state \"no explicit identifier – [heading/subject]\")\n- Core content summary\n- Altrad rules compliance check\n- Risk level (LOW/MEDIUM/HIGH/CRITICAL)\n- Specific concerns and red flags\n- Negotiation recommendations\n- Evidence: quote a short exact excerpt (1–3 sentences) from contract supporting your finding\n\nNote: Search the contract text semantically for each topic (payment, LDs, liability, insurance, warranty, etc.) and cite only the identifiers actually present.\n\nB. SPECIFIC FOCUS AREAS\n\nPay special attention to (adapt emphasis based on contract type). Do not assume article numbers.\n\nFINANCIAL TERMS: Price structure and indexation; payment terms and invoicing procedures; securities and guarantees; retention percentage and conditions; liquidated damages structure.\n\nLIABILITY & RISK: Liability allocations; liability limitations and exclusions; insurance requirements; consequential damages clauses; warranty and defects liability.\n\nOPERATIONAL TERMS: Changes/variations; suspension and termination rights; delivery and acceptance; subcontracting; deadlines and delay procedures.\n\nLEGAL & COMPLIANCE: Applicable law and jurisdiction; confidentiality; intellectual property; employment conditions; registration/certification requirements.\n\nC. OUTPUT STRUCTURE\n{\n  \"contract_summary\": {\n    \"contract_type\": \"...\",\n    \"contracting_parties\": \"...\",\n    \"estimated_value\": \"...\",\n    \"key_scope\": \"...\",\n    \"document_structure\": \"...\"\n  },\n  \"overall_risk_assessment\": {\n    \"risk_level\": \"LOW/MEDIUM/HIGH/CRITICAL\",\n    \"executive_summary\": \"...\",\n    \"critical_issues_count\": \"number\",\n    \"compliance_score\": \"...%\" \n  },\n  \"red_zone_compliance\": {\n    \"CR1_consequential_damages\": {\"status\": \"COMPLIANT/NON_COMPLIANT/PARTIAL/UNCLEAR\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR2_liquidated_damages\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR3_liability_cap\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR4_warranty_period\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR5_third_party_liability\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR6_insurance\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR7_payment_terms\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR8_suspension_termination\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR9_retentions_security\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR10_governing_law\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"},\n    \"CR11_code_conduct\": {\"status\": \"...\", \"compliance_percent\": \"...%\", \"details\": \"...\", \"evidence\": \"...\"}\n  },\n  \"article_analysis\": [\n    {\n      \"article_or_section_identifier\": \"...\",\n      \"document_reference\": \"...\",\n      \"title\": \"...\",\n      \"summary\": \"...\",\n      \"risk_level\": \"...\",\n      \"altrad_compliance\": \"...\",\n      \"concerns\": [\"...\"],\n      \"recommendations\": [\"...\"],\n      \"evidence\": \"short exact quote from contract\"\n    }\n  ],\n  \"critical_issues\": [\n    {\n      \"issue\": \"...\",\n      \"article_reference\": \"...\",\n      \"document_reference\": \"...\",\n      \"risk_level\": \"...\",\n      \"business_impact\": \"...\",\n      \"recommended_action\": \"...\",\n      \"evidence\": \"short exact quote\"\n    }\n  ],\n  \"negotiation_priorities\": [\n    {\n      \"priority\": \"HIGH/MEDIUM/LOW\",\n      \"item\": \"...\",\n      \"current_position\": \"...\",\n      \"target_position\": \"...\",\n      \"fallback_position\": \"...\"\n    }\n  ],\n  \"recommendations\": {\n    \"proceed\": \"YES/NO/CONDITIONAL\",\n    \"conditions\": [\"...\"],\n    \"must_change\": [\"...\"],\n    \"should_change\": [\"...\"],\n    \"could_improve\": [\"...\"]\n  },\n  \"contract_amendments\": {\n    \"critical_amendments\": [\n      {\n        \"article\": \"...\",\n        \"document_reference\": \"...\",\n        \"current_text\": \"...\",\n        \"proposed_amendment\": \"...\",\n        \"rationale\": \"...\",\n        \"altrad_rule\": \"...\",\n        \"evidence\": \"short exact quote\"\n      }\n    ],\n    \"additional_clauses_needed\": [\n      {\n        \"clause_type\": \"...\",\n        \"proposed_text\": \"...\",\n        \"location\": \"...\",\n        \"rationale\": \"...\"\n      }\n    ]\n  },\n  \"implementation_roadmap\": {\n    \"immediate_actions\": [\"...\"],\n    \"negotiation_sequence\": [\"...\"],\n    \"fallback_strategies\": [\"...\"],\n    \"deal_breakers\": [\"...\"]\n  }\n}\n\nANALYSIS GUIDELINES\n\n- Be specific: Quote exact article numbers and clause text only as found in the contract\n- Quantify risks: Provide numeric compliance_percent for each CR and an overall compliance_score\n- Prioritize: Focus on business-critical items first\n- Be practical: Provide implementable recommendations\n- Contextualize: Consider industry standards and jurisdiction-specific legislation as specified in user prompt\n- Identify gaps: If a topic cannot be found in contract, mark the CR as UNCLEAR and explain what is missing\n- Numbering neutrality: Never rely on fixed/example article numbers; search by topic and cite only actual identifiers present\n- No fabrication: If unsure, say so; do not invent clauses or identifiers\n- Multi-document awareness: Always specify document reference when citing clauses from document packages\n\nEXAMPLE ANALYSIS APPROACH\n\nUse only the actual clause identifiers found in the contract; any examples are illustrative, not assumptions.\n\n- Note the overall structure and length\n- Identify applicable law and jurisdiction (cite the actual clause you find)\n- Assess liability provisions against CR3 caps (cite actual clause identifiers)\n- Review security requirements against CR9 (cite actual clause identifiers)\n- Examine payment terms against CR7 (cite actual clause identifiers)\n- Check warranty periods against CR4 (cite actual clause identifiers)\n- Evaluate suspension/termination rights against CR8 (cite actual clause identifiers)\n- Review insurance provisions against CR6 (cite actual clause identifiers)\n- For document packages: Cross-reference terms between documents and note any inconsistencies",
          "passthroughBinaryImages": "={{ true }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1184,
        -480
      ],
      "id": "2fdda9da-0185-48f6-9701-9aad7e763892",
      "name": "AI Agent2",
      "disabled": true
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Altrad Contract Assessment Report</title>\n    <style>\n        @page {\n            size: A4;\n            margin: 2cm 1.5cm;\n        }\n        \n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: Arial, sans-serif;\n            font-size: 10pt;\n            line-height: 1.4;\n            color: #333;\n            background: white;\n        }\n        \n        .page-break {\n            page-break-before: always;\n        }\n        \n        .no-break {\n            page-break-inside: avoid;\n        }\n        \n        .header {\n            text-align: center;\n            border-bottom: 3px solid #e31e24;\n            padding-bottom: 20px;\n            margin-bottom: 30px;\n        }\n        \n        .logo {\n            font-size: 24pt;\n            font-weight: bold;\n            color: #e31e24;\n            margin-bottom: 10px;\n        }\n        \n        .report-title {\n            font-size: 18pt;\n            color: #333;\n            margin-bottom: 5px;\n        }\n        \n        .report-date {\n            font-size: 10pt;\n            color: #666;\n        }\n        \n        .section {\n            margin-bottom: 25px;\n        }\n        \n        .section-title {\n            font-size: 14pt;\n            font-weight: bold;\n            color: #e31e24;\n            border-bottom: 2px solid #e31e24;\n            padding-bottom: 5px;\n            margin-bottom: 15px;\n        }\n        \n        .subsection-title {\n            font-size: 12pt;\n            font-weight: bold;\n            color: #333;\n            margin-bottom: 10px;\n            margin-top: 15px;\n        }\n        \n        .risk-badge {\n            display: inline-block;\n            padding: 3px 8px;\n            border-radius: 3px;\n            font-size: 9pt;\n            font-weight: bold;\n            color: white;\n            margin-right: 5px;\n        }\n        \n        .risk-low { background-color: #28a745; }\n        .risk-medium { background-color: #ffc107; color: #333; }\n        .risk-high { background-color: #fd7e14; }\n        .risk-critical { background-color: #dc3545; }\n        \n        .status-badge {\n            display: inline-block;\n            padding: 2px 6px;\n            border-radius: 3px;\n            font-size: 8pt;\n            font-weight: bold;\n            margin-right: 5px;\n        }\n        \n        .status-compliant { background-color: #28a745; color: white; }\n        .status-non-compliant { background-color: #dc3545; color: white; }\n        .status-unclear { background-color: #6c757d; color: white; }\n        \n        .priority-badge {\n            display: inline-block;\n            padding: 2px 6px;\n            border-radius: 3px;\n            font-size: 8pt;\n            font-weight: bold;\n            margin-right: 5px;\n        }\n        \n        .priority-high { background-color: #dc3545; color: white; }\n        .priority-medium { background-color: #ffc107; color: #333; }\n        .priority-low { background-color: #28a745; color: white; }\n        \n        .info-grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 20px;\n        }\n        \n        .info-box {\n            border: 1px solid #ddd;\n            padding: 15px;\n            border-radius: 5px;\n            background-color: #f8f9fa;\n        }\n        \n        .info-label {\n            font-weight: bold;\n            color: #495057;\n            margin-bottom: 5px;\n        }\n        \n        .article-card {\n            border: 1px solid #ddd;\n            margin-bottom: 15px;\n            border-radius: 5px;\n            overflow: hidden;\n        }\n        \n        .article-header {\n            background-color: #f8f9fa;\n            padding: 10px 15px;\n            border-bottom: 1px solid #ddd;\n        }\n        \n        .article-content {\n            padding: 15px;\n        }\n        \n        .article-title {\n            font-weight: bold;\n            font-size: 11pt;\n            margin-bottom: 5px;\n        }\n        \n        .list-item {\n            margin-bottom: 8px;\n            padding-left: 15px;\n            position: relative;\n        }\n        \n        .list-item:before {\n            content: \"•\";\n            position: absolute;\n            left: 0;\n            color: #e31e24;\n            font-weight: bold;\n        }\n        \n        .amendment-box {\n            border: 1px solid #17a2b8;\n            background-color: #f0f9ff;\n            padding: 15px;\n            margin-bottom: 15px;\n            border-radius: 5px;\n        }\n        \n        .amendment-title {\n            font-weight: bold;\n            color: #17a2b8;\n            margin-bottom: 8px;\n        }\n        \n        .proposed-text {\n            background-color: #e8f5e8;\n            border-left: 4px solid #28a745;\n            padding: 10px;\n            margin: 10px 0;\n            font-size: 9pt;\n            font-style: italic;\n        }\n        \n        .implementation-step {\n            background-color: #fff3cd;\n            border-left: 4px solid #ffc107;\n            padding: 10px;\n            margin-bottom: 10px;\n        }\n        \n        .executive-summary {\n            background-color: #f8f9fa;\n            border-left: 4px solid #e31e24;\n            padding: 20px;\n            margin-bottom: 25px;\n            font-size: 11pt;\n        }\n        \n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 15px;\n            font-size: 9pt;\n        }\n        \n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: left;\n            vertical-align: top;\n        }\n        \n        th {\n            background-color: #f8f9fa;\n            font-weight: bold;\n        }\n        \n        .footer {\n            margin-top: 30px;\n            text-align: center;\n            font-size: 8pt;\n            color: #666;\n            border-top: 1px solid #ddd;\n            padding-top: 15px;\n        }\n    </style>\n</head>\n<body>\n    <!-- HEADER -->\n    <div class=\"header\">\n        <div class=\"logo\">ALTRAD</div>\n        <div class=\"report-title\">Contract Assessment Report</div>\n        <div class=\"report-date\">Generated on {{ new Date().toLocaleDateString('en-GB') }}</div>\n    </div>\n\n    <!-- CONTRACT SUMMARY -->\n    <div class=\"section\">\n        <div class=\"section-title\">Contract Summary</div>\n        <div class=\"info-grid\">\n            <div class=\"info-box\">\n                <div class=\"info-label\">Contract Type:</div>\n                <div>{{ $json.contract_summary.contract_type }}</div>\n            </div>\n            <div class=\"info-box\">\n                <div class=\"info-label\">Contracting Parties:</div>\n                <div>{{ $json.contract_summary.contracting_parties }}</div>\n            </div>\n            <div class=\"info-box\">\n                <div class=\"info-label\">Estimated Value:</div>\n                <div>{{ $json.contract_summary.estimated_value }}</div>\n            </div>\n            <div class=\"info-box\">\n                <div class=\"info-label\">Key Scope:</div>\n                <div>{{ $json.contract_summary.key_scope }}</div>\n            </div>\n        </div>\n    </div>\n\n    <!-- OVERALL RISK ASSESSMENT -->\n    <div class=\"section\">\n        <div class=\"section-title\">Overall Risk Assessment</div>\n        <div class=\"executive-summary\">\n            <div style=\"margin-bottom: 15px;\">\n                <span class=\"risk-badge risk-high\">\n                    {{ $json.overall_risk_assessment.risk_level }} RISK\n                </span>\n                <strong>Critical Issues: {{ $json.overall_risk_assessment.critical_issues_count }}</strong>\n            </div>\n            <div>{{ $json.overall_risk_assessment.executive_summary }}</div>\n        </div>\n    </div>\n\n    <!-- RED ZONE COMPLIANCE -->\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Red Zone Compliance Overview</div>\n        <table>\n            <thead>\n                <tr>\n                    <th style=\"width: 25%;\">Rule</th>\n                    <th style=\"width: 15%;\">Status</th>\n                    <th style=\"width: 60%;\">Details</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td><strong>CR1 - Consequential Damages</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR1_consequential_damages.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR1_consequential_damages.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR2 - Liquidated Damages</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR2_liquidated_damages.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR2_liquidated_damages.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR3 - Liability Cap</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR3_liability_cap.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR3_liability_cap.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR4 - Warranty Period</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR4_warranty_period.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR4_warranty_period.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR5 - Third Party Liability</strong></td>\n                    <td><span class=\"status-badge status-unclear\">{{ $json.red_zone_compliance.CR5_third_party_liability.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR5_third_party_liability.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR6 - Insurance</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR6_insurance.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR6_insurance.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR7 - Payment Terms</strong></td>\n                    <td><span class=\"status-badge status-compliant\">{{ $json.red_zone_compliance.CR7_payment_terms.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR7_payment_terms.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR8 - Suspension/Termination</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR8_suspension_termination.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR8_suspension_termination.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR9 - Retentions/Security</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR9_retentions_security.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR9_retentions_security.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR10 - Governing Law</strong></td>\n                    <td><span class=\"status-badge status-compliant\">{{ $json.red_zone_compliance.CR10_governing_law.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR10_governing_law.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR11 - Code of Conduct</strong></td>\n                    <td><span class=\"status-badge status-unclear\">{{ $json.red_zone_compliance.CR11_code_conduct.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR11_code_conduct.details }}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n\n    <!-- CRITICAL ISSUES -->\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Critical Issues</div>\n        {{ $json.criticalIssuesHtml }}\n    </div>\n\n    <!-- NEGOTIATION PRIORITIES -->\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Negotiation Priorities</div>\n        {{ $json.negotiationPrioritiesHtml }}\n    </div>\n\n    <!-- CONTRACT AMENDMENTS -->\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Contract Amendments</div>\n        \n        <div class=\"subsection-title\">Critical Amendments Required</div>\n        {{ $json.criticalAmendmentsHtml }}\n\n        <div class=\"subsection-title\">Additional Clauses Needed</div>\n        {{ $json.additionalClausesHtml }}\n    </div>\n\n    <!-- IMPLEMENTATION ROADMAP -->\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Implementation Roadmap</div>\n        \n        <div class=\"subsection-title\">Immediate Actions</div>\n        {{ $json.immediateActionsHtml }}\n\n        <div class=\"subsection-title\">Negotiation Sequence</div>\n        {{ $json.negotiationSequenceHtml }}\n\n        <div class=\"subsection-title\">Fallback Strategies</div>\n        {{ $json.fallbackStrategiesHtml }}\n\n        <div class=\"subsection-title\">Deal Breakers</div>\n        {{ $json.dealBreakersHtml }}\n    </div>\n\n    <!-- ARTICLE ANALYSIS -->\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Detailed Article Analysis</div>\n        {{ $json.articleAnalysisHtml }}\n    </div>\n\n    <!-- RECOMMENDATIONS SUMMARY -->\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Final Recommendations</div>\n        \n        <div class=\"info-box\" style=\"margin-bottom: 20px;\">\n            <div class=\"info-label\">Proceed with Contract:</div>\n            <div style=\"font-size: 12pt; font-weight: bold; color: #ffc107;\">\n                {{ $json.recommendations.proceed }}\n            </div>\n        </div>\n\n        <div class=\"subsection-title\">Conditions:</div>\n        {{ $json.conditionsHtml }}\n\n        <div class=\"info-grid\">\n            <div>\n                <div class=\"subsection-title\">Must Change:</div>\n                {{ $json.mustChangeHtml }}\n            </div>\n            <div>\n                <div class=\"subsection-title\">Should Change:</div>\n                {{ $json.shouldChangeHtml }}\n            </div>\n        </div>\n\n        <div class=\"subsection-title\">Could Improve:</div>\n        {{ $json.couldImproveHtml }}\n    </div>\n\n    <!-- FOOTER -->\n    <div class=\"footer\">\n        <div>This report was generated by Altrad's Contract Assessment System</div>\n        <div>Confidential and Proprietary - For Internal Use Only</div>\n    </div>\n</body>\n</html>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        832,
        -256
      ],
      "id": "47a6cc44-31df-4127-8bf7-34ecf516b276",
      "name": "HTML1",
      "disabled": true
    },
    {
      "parameters": {
        "html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Contract Risk Review – {{$json.project_metadata?.project_reference || 'Project'}}</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <style>\n    /* ---------- Base ---------- */\n    * { box-sizing: border-box; }\n    html, body { margin: 0; padding: 0; }\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Arial, sans-serif;\n      line-height: 1.45;\n      color: #222;\n      background: #f3f4f6;\n      -webkit-print-color-adjust: exact !important;\n      print-color-adjust: exact !important;\n    }\n    .container {\n      width: 980px;\n      max-width: 98%;\n      margin: 24px auto 48px;\n    }\n    h1 { font-size: 22pt; margin: 0 0 6px; }\n    h2 { font-size: 14pt; margin: 24px 0 12px; }\n    h3 { font-size: 12pt; margin: 18px 0 10px; }\n    .muted { color:#6b7280; }\n\n    /* ---------- Layout helpers ---------- */\n    .grid-2 { display:grid; grid-template-columns: 1fr 1fr; gap: 16px; }\n    .grid-3 { display:grid; grid-template-columns: repeat(3,1fr); gap: 16px; }\n    .card {\n      background:#fff; border:1px solid #e5e7eb; border-radius:12px;\n      box-shadow: 0 1px 2px rgba(0,0,0,.04);\n      padding:16px; margin-bottom:14px;\n    }\n    .no-break { page-break-inside: avoid; }\n    .page-break { page-break-before: always; }\n\n    /* ---------- Header ---------- */\n    .report-header {\n      background: #0f172a;\n      color: #fff;\n      border-radius: 14px;\n      padding: 22px;\n      margin-bottom: 18px;\n    }\n    .kpis { display:flex; gap:14px; flex-wrap:wrap; margin-top: 10px; }\n    .kpi {\n      background: rgba(255,255,255,.07);\n      border: 1px solid rgba(255,255,255,.15);\n      padding:10px 12px; border-radius:10px; font-size:10pt;\n    }\n    .pill {\n      display:inline-block; padding:4px 10px; border-radius:999px; font-weight:600; font-size:10pt;\n    }\n\n    /* Proceed/decision badge */\n    .rec-badge { color:#fff; }\n    .rec-badge.bad { background:#dc2626; }\n    .rec-badge.warn { background:#f59e0b; }\n    .rec-badge.good { background:#10b981; }\n\n    /* ---------- Article cards & elements ---------- */\n    .article-card {\n      background:#fff; border:1px solid #e5e7eb; border-radius:12px; padding:14px; margin-bottom:12px;\n    }\n    .article-header { margin-bottom:8px; }\n    .article-title { font-size:12pt; font-weight:700; display:flex; gap:8px; align-items:center; }\n    .subsection-title { font-weight:700; margin:8px 0 6px; font-size:10pt; }\n    .info-label { font-size:9pt; color:#6b7280; text-transform:uppercase; letter-spacing:.02em; }\n\n    /* Badges */\n    .risk-badge, .priority-badge {\n      display:inline-block; font-size:9pt; font-weight:700; padding:2px 8px; border-radius:999px; color:#fff;\n    }\n    .risk-critical { background:#dc2626; }\n    .risk-high { background:#f97316; }\n    .risk-medium { background:#f59e0b; }\n    .risk-low { background:#10b981; }\n    .risk-unknown { background:#6b7280; }\n\n    .priority-critical { background:#b91c1c; }\n    .priority-high { background:#d97706; }\n    .priority-medium { background:#2563eb; }\n    .priority-low { background:#10b981; }\n\n    /* Amendments */\n    .amendment-box {\n      border:1px solid #e5e7eb; border-left:4px solid #2563eb; background:#fff; border-radius:10px;\n      padding:12px; margin-bottom:12px;\n    }\n    .amendment-title { font-weight:800; margin-bottom:6px; }\n    .proposed-text { background:#f8fafc; border:1px dashed #cbd5e1; border-radius:8px; padding:10px; font-size:10pt; }\n\n    /* Implementation steps & lists */\n    .implementation-step {\n      background:#f1f5f9; border:1px solid #e2e8f0; border-radius:8px; padding:10px; margin:6px 0;\n      font-size:10pt;\n    }\n    .list-item { margin:6px 0; font-size:10pt; }\n\n    /* Compliance block */\n    .compliance-item {\n      border:1px solid #e5e7eb; border-radius:10px; background:#fff; padding:12px; margin-bottom:10px;\n    }\n    .compliance-header { display:flex; gap:10px; align-items:center; justify-content:space-between; }\n    .compliance-rule { font-weight:800; }\n    .compliance-status { font-weight:800; padding:2px 8px; border-radius:999px; color:#fff; }\n    .status-non-compliant { background:#dc2626; }\n    .status-partial { background:#f59e0b; }\n    .status-compliant { background:#10b981; }\n    .status-unknown { background:#6b7280; }\n    .compliance-percentage { font-weight:700; color:#334155; }\n\n    /* Small print block inside cards */\n    .meta { margin-top:8px; font-size:8pt; color:#6b7280; }\n\n    /* Tables (if you add any later) */\n    table { width:100%; border-collapse:collapse; font-size:10pt; }\n    th, td { border:1px solid #e5e7eb; padding:8px; text-align:left; }\n    th { background:#f8fafc; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n\n    <!-- Header -->\n    <div class=\"report-header no-break\">\n      <h1>Contract Risk Review</h1>\n      <div class=\"muted\">{{$json.project_metadata?.project_reference || ''}}</div>\n\n      <div class=\"kpis\">\n        <div class=\"kpi\"><strong>Analysis date:</strong> {{$json.project_metadata?.analysis_date || '-'}} </div>\n        <div class=\"kpi\"><strong>Risk level:</strong> {{$json.overall_risk_assessment?.risk_level || '-'}} </div>\n        <div class=\"kpi\"><strong>Compliance score:</strong> {{$json.overall_risk_assessment?.compliance_score || '-'}} </div>\n        <div class=\"kpi\">\n          <strong>Recommendation:</strong>\n          <span class=\"pill rec-badge {{\n            $json.proceedRecommendation === 'DO_NOT_PROCEED' ? 'bad' :\n            ($json.proceedRecommendation === 'PROCEED_WITH_CONDITIONS' ? 'warn' : 'good')\n          }}\">\n            {{$json.proceedRecommendation || 'N/A'}}\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Executive summary -->\n    <section class=\"card no-break\">\n      <h2>Executive summary</h2>\n      <p>{{$json.overall_risk_assessment?.executive_summary || ''}}</p>\n      <div class=\"grid-3\">\n        <div><span class=\"info-label\">Critical issues</span><div><strong>{{$json.overall_risk_assessment?.critical_issues_count || 0}}</strong></div></div>\n        <div><span class=\"info-label\">Key concerns (top)</span><div>{{ ($json.overall_risk_assessment?.key_concerns || [])[0] || '-' }}</div></div>\n        <div><span class=\"info-label\">Estimated value at risk</span><div>{{$json.estimatedValueAtRisk || '-'}}</div></div>\n      </div>\n    </section>\n\n    <!-- Contract summary -->\n    <section class=\"card no-break\">\n      <h2>Contract summary</h2>\n      <div class=\"grid-2\">\n        <div>\n          <div class=\"info-label\">Type</div>\n          <div>{{$json.contract_summary?.contract_type || '-'}}</div>\n        </div>\n        <div>\n          <div class=\"info-label\">Parties</div>\n          <div>{{$json.contract_summary?.contracting_parties || '-'}}</div>\n        </div>\n        <div>\n          <div class=\"info-label\">Scope</div>\n          <div>{{$json.contract_summary?.key_scope || '-'}}</div>\n        </div>\n        <div>\n          <div class=\"info-label\">Governing law</div>\n          <div>{{$json.contract_summary?.governing_law || '-'}}</div>\n        </div>\n      </div>\n    </section>\n\n    <!-- Critical issues -->\n    <section class=\"no-break\">\n      <h2>Critical issues</h2>\n      {{$json.criticalIssuesHtml}}\n    </section>\n\n    <!-- Negotiation strategy -->\n    <section class=\"page-break\">\n      <h2>Negotiation strategy</h2>\n\n      <h3>Deal breakers</h3>\n      {{$json.dealBreakersHtml}}\n\n      <h3>High priority</h3>\n      {{$json.highPriorityHtml}}\n\n      <h3>Medium priority</h3>\n      {{$json.mediumPriorityHtml}}\n    </section>\n\n    <!-- Detailed clause analysis -->\n    <section class=\"page-break\">\n      <h2>Detailed clause analysis</h2>\n      {{$json.articleAnalysisHtml}}\n    </section>\n\n    <!-- Contract amendments -->\n    <section class=\"page-break\">\n      <h2>Contract amendments – Critical</h2>\n      {{$json.criticalAmendmentsHtml}}\n\n      <h3>Additional clauses needed</h3>\n      {{$json.additionalClausesHtml}}\n    </section>\n\n    <!-- Implementation roadmap -->\n    <section class=\"page-break\">\n      <h2>Implementation roadmap</h2>\n      <h3>Immediate actions</h3>\n      {{$json.immediateActionsHtml}}\n      <h3>Negotiation sequence</h3>\n      {{$json.negotiationSequenceHtml}}\n      {{ $json.fallbackStrategiesHtml ? '<h3>Fallback strategies</h3>' + $json.fallbackStrategiesHtml : '' }}\n    </section>\n\n    <!-- Executive dashboard -->\n    <section class=\"page-break\">\n      <h2>Executive dashboard</h2>\n      <div class=\"grid-2\">\n        <div>\n          <div class=\"info-label\">Proceed recommendation</div>\n          <div>\n            <span class=\"pill rec-badge {{\n              $json.proceedRecommendation === 'DO_NOT_PROCEED' ? 'bad' :\n              ($json.proceedRecommendation === 'PROCEED_WITH_CONDITIONS' ? 'warn' : 'good')\n            }}\">\n              {{$json.proceedRecommendation || 'N/A'}}\n            </span>\n          </div>\n        </div>\n        <div>\n          <div class=\"info-label\">Negotiation complexity</div>\n          <div>{{$json.negotiationComplexity || '-'}}</div>\n        </div>\n      </div>\n\n      <h3>Conditions for proceeding</h3>\n      {{$json.conditionsHtml}}\n    </section>\n\n    <!-- Red zone compliance -->\n    <section class=\"page-break\">\n      <h2>Red zone compliance</h2>\n      {{$json.redZoneComplianceHtml}}\n    </section>\n\n    <!-- Final recommendations -->\n    <section class=\"page-break\">\n      <h2>Final recommendations</h2>\n      <div class=\"grid-3\">\n        <div class=\"card\">\n          <h3>Must change</h3>\n          {{$json.mustChangeHtml}}\n        </div>\n        <div class=\"card\">\n          <h3>Should change</h3>\n          {{$json.shouldChangeHtml}}\n        </div>\n        <div class=\"card\">\n          <h3>Could improve</h3>\n          {{$json.couldImproveHtml}}\n        </div>\n      </div>\n    </section>\n\n    <!-- Appendices (labels) -->\n    <section class=\"page-break\">\n      <h2>Appendices</h2>\n      <div class=\"list-item\"><strong>Compliance matrix:</strong> {{$json.appendices?.compliance_matrix || '—'}}</div>\n      <div class=\"list-item\"><strong>Risk heat map:</strong> {{$json.appendices?.risk_heat_map || '—'}}</div>\n      <div class=\"list-item\"><strong>Clause tracking sheet:</strong> {{$json.appendices?.clause_tracking_sheet || '—'}}</div>\n      <div class=\"list-item\"><strong>Escalation triggers:</strong> {{$json.appendices?.escalation_triggers || '—'}}</div>\n    </section>\n\n    <!-- Analyst notes -->\n    <section class=\"card no-break\">\n      <h2>Analyst notes</h2>\n      <p class=\"muted\">{{$json.project_metadata?.analyst_notes || ''}}</p>\n    </section>\n\n  </div>\n</body>\n</html>\n"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -624,
        224
      ],
      "id": "c11214b0-0658-4225-b9aa-27bdff4b0fb7",
      "name": "HTML"
    },
    {
      "parameters": {
        "jsCode": "// N8N Code Node - Contract Analysis to Excel Template Format\n// Genereert Excel in de exacte template structuur met volledig detail uit rapport\n\nconst contractData = $input.first().json;\n\n// ===== UTILITY FUNCTIES =====\n\nfunction escapeXml(unsafe) {\n    if (unsafe === null || unsafe === undefined) return '';\n    return String(unsafe)\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\nfunction truncateText(text, maxLength = 200) {\n    if (!text || text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + '...';\n}\n\nfunction formatDisplayName(fieldName) {\n    return fieldName\n        .replace(/_/g, ' ')\n        .replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\n// ===== UITGEBREIDE DATA EXTRACTIE =====\n\nfunction createDetailedTemplateData(data) {\n    const templateRows = [];\n    let rowNumber = 1;\n    \n    // Handle array input\n    let processData = data;\n    if (Array.isArray(data)) {\n        processData = data[0];\n    }\n    \n    if (!processData || typeof processData !== 'object') {\n        return [];\n    }\n\n    // 1. OVERALL RISK ASSESSMENT (als eerste rij)\n    const riskAssessment = processData.overall_risk_assessment || {};\n    if (riskAssessment.risk_level) {\n        templateRows.push({\n            no: rowNumber++,\n            doc: \"Assessment\",\n            article: \"Overall Risk\",\n            clause: riskAssessment.risk_level,\n            comments: `Compliance Score: ${riskAssessment.compliance_score || 'N/A'} | Critical Issues: ${riskAssessment.critical_issues_count || 0}`,\n            suggestedClauses: truncateText(riskAssessment.executive_summary || \"No summary provided\", 300),\n            clientAnswers: \"\"\n        });\n    }\n\n    // 2. RED ZONE COMPLIANCE - ALLE NON-COMPLIANT EN PARTIAL ITEMS\n    const compliance = processData.red_zone_compliance || {};\n    Object.entries(compliance).forEach(([key, item]) => {\n        if (item && item.status && item.status !== \"COMPLIANT\") {\n            const cleanKey = key.replace(/CR\\d+_/, '').replace(/_/g, ' ').toUpperCase();\n            templateRows.push({\n                no: rowNumber++,\n                doc: \"Red Zone\",\n                article: key,\n                clause: cleanKey,\n                comments: `${item.status} (${item.compliance_percent || '0%'}) - ${truncateText(item.details || 'No details', 250)}`,\n                suggestedClauses: truncateText(item.evidence || \"Review and update clause as needed\", 250),\n                clientAnswers: \"\"\n            });\n        }\n    });\n\n    // 3. CRITICAL ISSUES - VOLLEDIG DETAIL\n    const criticalIssues = processData.critical_issues || [];\n    criticalIssues.forEach(issue => {\n        templateRows.push({\n            no: rowNumber++,\n            doc: \"Critical Issue\",\n            article: issue.article_reference || \"General\",\n            clause: issue.issue || \"Unknown Issue\",\n            comments: `${issue.risk_level || 'CRITICAL'} RISK - ${truncateText(issue.business_impact || 'No impact specified', 200)}`,\n            suggestedClauses: truncateText(issue.recommended_action || \"Review required\", 250),\n            clientAnswers: \"\"\n        });\n    });\n\n    // 4. ARTICLE ANALYSIS - ALLE HIGH EN CRITICAL ARTIKELEN MET DETAILS\n    const articles = processData.article_analysis || [];\n    articles\n        .filter(article => article.risk_level === 'HIGH' || article.risk_level === 'CRITICAL' || \n                         (article.concerns && article.concerns.length > 0))\n        .forEach(article => {\n            const concerns = Array.isArray(article.concerns) ? article.concerns.join(\"; \") : \"\";\n            const recommendations = Array.isArray(article.recommendations) ? article.recommendations.join(\"; \") : \"\";\n            \n            templateRows.push({\n                no: rowNumber++,\n                doc: \"Article\",\n                article: article.article_or_section_identifier || \"Unknown\",\n                clause: article.title || \"No Title\",\n                comments: `${article.risk_level || 'MEDIUM'} - ${article.summary ? truncateText(article.summary, 150) : 'No summary'} ${concerns ? '| Issues: ' + truncateText(concerns, 100) : ''}`,\n                suggestedClauses: recommendations ? truncateText(recommendations, 250) : \"No specific recommendations\",\n                clientAnswers: \"\"\n            });\n        });\n\n    // 5. NEGOTIATION PRIORITIES - ALLE PRIORITEITEN MET VOLLEDIGE POSITIES\n    const priorities = processData.negotiation_priorities || [];\n    priorities.forEach(priority => {\n        const currentPos = priority.current_position || 'Not specified';\n        const targetPos = priority.target_position || 'Not specified';\n        const fallbackPos = priority.fallback_position || 'Not specified';\n        \n        templateRows.push({\n            no: rowNumber++,\n            doc: \"Negotiation\",\n            article: `${priority.priority || 'MEDIUM'} Priority`,\n            clause: priority.item || \"Unknown Item\",\n            comments: `Current: ${truncateText(currentPos, 120)} | Target: ${truncateText(targetPos, 120)}`,\n            suggestedClauses: `Fallback: ${truncateText(fallbackPos, 200)}`,\n            clientAnswers: \"\"\n        });\n    });\n\n    // 6. CONTRACT AMENDMENTS - CRITICAL AMENDMENTS MET DETAILS\n    const amendments = processData.contract_amendments || {};\n    \n    // Critical amendments\n    if (amendments.critical_amendments && Array.isArray(amendments.critical_amendments)) {\n        amendments.critical_amendments.forEach(amendment => {\n            templateRows.push({\n                no: rowNumber++,\n                doc: \"Amendment\",\n                article: amendment.article || \"New Article\",\n                clause: \"CRITICAL Amendment Required\",\n                comments: `Rule: ${amendment.altrad_rule || 'N/A'} - ${truncateText(amendment.rationale || 'No rationale', 200)}`,\n                suggestedClauses: truncateText(amendment.proposed_amendment || \"Amendment text required\", 300),\n                clientAnswers: \"\"\n            });\n        });\n    }\n\n    // Additional clauses needed\n    if (amendments.additional_clauses_needed && Array.isArray(amendments.additional_clauses_needed)) {\n        amendments.additional_clauses_needed.forEach(clause => {\n            templateRows.push({\n                no: rowNumber++,\n                doc: \"New Clause\",\n                article: clause.location || \"New Article\",\n                clause: clause.clause_type || \"Additional Clause\",\n                comments: truncateText(clause.rationale || \"New clause required\", 200),\n                suggestedClauses: truncateText(clause.proposed_text || \"Clause text to be defined\", 300),\n                clientAnswers: \"\"\n            });\n        });\n    }\n\n    // 7. IMPLEMENTATION ROADMAP ITEMS\n    const roadmap = processData.implementation_roadmap || {};\n    \n    // Immediate actions\n    if (roadmap.immediate_actions && Array.isArray(roadmap.immediate_actions)) {\n        roadmap.immediate_actions.slice(0, 3).forEach((action, index) => {\n            templateRows.push({\n                no: rowNumber++,\n                doc: \"Action\",\n                article: \"Immediate Action\",\n                clause: `Action ${index + 1}`,\n                comments: truncateText(action, 250),\n                suggestedClauses: \"Execute immediately before contract signing\",\n                clientAnswers: \"\"\n            });\n        });\n    }\n\n    // Deal breakers\n    if (roadmap.deal_breakers && Array.isArray(roadmap.deal_breakers)) {\n        roadmap.deal_breakers.slice(0, 5).forEach((breaker, index) => {\n            templateRows.push({\n                no: rowNumber++,\n                doc: \"Deal Breaker\",\n                article: \"Non-Negotiable\",\n                clause: `Deal Breaker ${index + 1}`,\n                comments: \"CRITICAL: Contract cannot proceed if this issue is not resolved\",\n                suggestedClauses: truncateText(breaker, 300),\n                clientAnswers: \"\"\n            });\n        });\n    }\n\n    // 8. RECOMMENDATIONS MUST/SHOULD/COULD CHANGE\n    const recommendations = processData.recommendations || {};\n    \n    // Must change items\n    if (recommendations.must_change && Array.isArray(recommendations.must_change)) {\n        recommendations.must_change.forEach((item, index) => {\n            templateRows.push({\n                no: rowNumber++,\n                doc: \"Must Change\",\n                article: \"Mandatory\",\n                clause: `Required Change ${index + 1}`,\n                comments: \"MANDATORY: Must be changed before contract execution\",\n                suggestedClauses: truncateText(item, 300),\n                clientAnswers: \"\"\n            });\n        });\n    }\n\n    // Should change items\n    if (recommendations.should_change && Array.isArray(recommendations.should_change)) {\n        recommendations.should_change.forEach((item, index) => {\n            templateRows.push({\n                no: rowNumber++,\n                doc: \"Should Change\",\n                article: \"Recommended\",\n                clause: `Recommended Change ${index + 1}`,\n                comments: \"RECOMMENDED: Strongly advised to change\",\n                suggestedClauses: truncateText(item, 300),\n                clientAnswers: \"\"\n            });\n        });\n    }\n\n    // Could improve items\n    if (recommendations.could_improve && Array.isArray(recommendations.could_improve)) {\n        recommendations.could_improve.slice(0, 3).forEach((item, index) => {\n            templateRows.push({\n                no: rowNumber++,\n                doc: \"Could Improve\",\n                article: \"Optional\",\n                clause: `Improvement ${index + 1}`,\n                comments: \"OPTIONAL: Nice to have improvement\",\n                suggestedClauses: truncateText(item, 300),\n                clientAnswers: \"\"\n            });\n        });\n    }\n\n    // Vul aan tot minimaal 30 rijen voor voldoende ruimte\n    while (templateRows.length < 30) {\n        templateRows.push({\n            no: rowNumber++,\n            doc: \"\",\n            article: \"\",\n            clause: \"\",\n            comments: \"\",\n            suggestedClauses: \"\",\n            clientAnswers: \"\"\n        });\n    }\n\n    return templateRows;\n}\n\n// ===== EXCEL XML GENERATIE MET BETERE STYLING =====\n\nfunction generateDetailedTemplateExcelXML(contractData) {\n    const today = new Date().toLocaleDateString('nl-NL');\n    const contractSummary = contractData.contract_summary || {};\n    const contractType = contractSummary.contract_type || 'Unknown Contract Type';\n    const templateRows = createDetailedTemplateData(contractData);\n\n    // Uitgebreide Excel styles\n    const styles = `\n  <Style ss:ID=\"Header\">\n   <Font ss:Bold=\"1\" ss:Size=\"11\" ss:Color=\"#FFFFFF\"/>\n   <Interior ss:Color=\"#C00000\" ss:Pattern=\"Solid\"/>\n   <Alignment ss:Horizontal=\"Center\" ss:Vertical=\"Center\"/>\n   <Borders>\n    <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n   </Borders>\n  </Style>\n  <Style ss:ID=\"Title\">\n   <Font ss:Bold=\"1\" ss:Size=\"16\"/>\n   <Alignment ss:Horizontal=\"Center\" ss:Vertical=\"Center\"/>\n  </Style>\n  <Style ss:ID=\"ProjectRef\">\n   <Font ss:Bold=\"1\" ss:Size=\"11\"/>\n   <Interior ss:Color=\"#E7E6E6\" ss:Pattern=\"Solid\"/>\n   <Borders>\n    <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n   </Borders>\n  </Style>\n  <Style ss:ID=\"DataCell\">\n   <Borders>\n    <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n   </Borders>\n   <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"CriticalCell\">\n   <Interior ss:Color=\"#FFCCCB\" ss:Pattern=\"Solid\"/>\n   <Font ss:Bold=\"1\"/>\n   <Borders>\n    <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n   </Borders>\n   <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"HighCell\">\n   <Interior ss:Color=\"#FFE4B5\" ss:Pattern=\"Solid\"/>\n   <Borders>\n    <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n   </Borders>\n   <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"MediumCell\">\n   <Interior ss:Color=\"#FFFACD\" ss:Pattern=\"Solid\"/>\n   <Borders>\n    <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n   </Borders>\n   <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>`;\n\n    // Data rows met intelligente styling\n    const dataRows = templateRows.map(row => {\n        let cellStyle = \"DataCell\";\n        \n        // Bepaal cell style op basis van content\n        if (row.doc === \"Critical Issue\" || row.clause.includes(\"CRITICAL\") || row.doc === \"Deal Breaker\") {\n            cellStyle = \"CriticalCell\";\n        } else if (row.doc === \"Amendment\" || row.comments.includes(\"HIGH\") || row.doc === \"Must Change\") {\n            cellStyle = \"HighCell\";\n        } else if (row.doc === \"Red Zone\" || row.doc === \"Should Change\" || row.comments.includes(\"MEDIUM\")) {\n            cellStyle = \"MediumCell\";\n        }\n\n        return `\n    <Row ss:Height=\"30\">\n     <Cell ss:StyleID=\"${cellStyle}\"><Data ss:Type=\"Number\">${row.no}</Data></Cell>\n     <Cell ss:StyleID=\"${cellStyle}\"><Data ss:Type=\"String\">${escapeXml(row.doc)}</Data></Cell>\n     <Cell ss:StyleID=\"${cellStyle}\"><Data ss:Type=\"String\">${escapeXml(row.article)}</Data></Cell>\n     <Cell ss:StyleID=\"${cellStyle}\"><Data ss:Type=\"String\">${escapeXml(row.clause)}</Data></Cell>\n     <Cell ss:StyleID=\"${cellStyle}\"><Data ss:Type=\"String\">${escapeXml(row.comments)}</Data></Cell>\n     <Cell ss:StyleID=\"${cellStyle}\"><Data ss:Type=\"String\">${escapeXml(row.suggestedClauses)}</Data></Cell>\n     <Cell ss:StyleID=\"${cellStyle}\"><Data ss:Type=\"String\">${escapeXml(row.clientAnswers)}</Data></Cell>\n    </Row>`;\n    }).join('');\n\n    // Contract details voor header\n    const contractParties = contractSummary.contracting_parties || 'Not specified';\n    const estimatedValue = contractSummary.estimated_value || 'N/A';\n\n    return `<?xml version=\"1.0\"?>\n<?mso-application progid=\"Excel.Sheet\"?>\n<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\"\n xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\">\n <DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">\n  <Title>Template Contract Qualification - Detailed Analysis</Title>\n  <Subject>Contract Analysis: ${escapeXml(contractType)}</Subject>\n  <Created>${new Date().toISOString()}</Created>\n </DocumentProperties>\n <Styles>\n${styles}\n </Styles>\n <Worksheet ss:Name=\"Contract Qualification\">\n  <Table>\n    <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n    <Column ss:AutoFitWidth=\"0\" ss:Width=\"100\"/>\n    <Column ss:AutoFitWidth=\"0\" ss:Width=\"150\"/>\n    <Column ss:AutoFitWidth=\"0\" ss:Width=\"200\"/>\n    <Column ss:AutoFitWidth=\"0\" ss:Width=\"350\"/>\n    <Column ss:AutoFitWidth=\"0\" ss:Width=\"350\"/>\n    <Column ss:AutoFitWidth=\"0\" ss:Width=\"120\"/>\n    \n    <Row ss:Height=\"35\">\n     <Cell ss:StyleID=\"Title\" ss:MergeAcross=\"6\"><Data ss:Type=\"String\">Template Contract Qualification - Detailed Analysis</Data></Cell>\n    </Row>\n    <Row ss:Height=\"5\">\n     <Cell><Data ss:Type=\"String\"></Data></Cell>\n    </Row>\n    <Row ss:Height=\"20\">\n     <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Project Reference</Data></Cell>\n     <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"3\"><Data ss:Type=\"String\">${escapeXml(contractType)}</Data></Cell>\n     <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Date</Data></Cell>\n     <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">${today}</Data></Cell>\n    </Row>\n    <Row ss:Height=\"20\">\n     <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Contracting Parties</Data></Cell>\n     <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"5\"><Data ss:Type=\"String\">${escapeXml(contractParties)}</Data></Cell>\n    </Row>\n    <Row ss:Height=\"20\">\n     <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Estimated Value</Data></Cell>\n     <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"5\"><Data ss:Type=\"String\">${escapeXml(estimatedValue)}</Data></Cell>\n    </Row>\n    <Row ss:Height=\"5\">\n     <Cell><Data ss:Type=\"String\"></Data></Cell>\n    </Row>\n    <Row ss:Height=\"25\">\n     <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">No</Data></Cell>\n     <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Doc.</Data></Cell>\n     <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Article</Data></Cell>\n     <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Clause</Data></Cell>\n     <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Comments</Data></Cell>\n     <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Suggested clauses</Data></Cell>\n     <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Client's answers</Data></Cell>\n    </Row>\n${dataRows}\n  </Table>\n </Worksheet>\n</Workbook>`;\n}\n\n// ===== HOOFDLOGICA =====\n\ntry {\n    if (!contractData) {\n        throw new Error('No contract data provided');\n    }\n    \n    console.log('Generating Detailed Template Contract Qualification...');\n    \n    // Genereer bestandsnaam\n    const contractType = contractData.contract_summary?.contract_type || 'Contract';\n    const cleanType = contractType.replace(/[^a-zA-Z0-9]/g, '_').substring(0, 30);\n    const dateStr = new Date().toISOString().split('T')[0];\n    const fileName = `Detailed_Contract_Qualification_${cleanType}_${dateStr}.xls`;\n    \n    // Genereer Excel XML\n    const excelXML = generateDetailedTemplateExcelXML(contractData);\n    \n    // Log resultaten\n    console.log(`Detailed Template Excel bestand gegenereerd: ${fileName}`);\n    console.log(`Contract type: ${contractData.contract_summary?.contract_type || 'Unknown'}`);\n    console.log(`Risk level: ${contractData.overall_risk_assessment?.risk_level || 'Unknown'}`);\n    console.log(`Critical issues: ${contractData.critical_issues?.length || 0}`);\n    console.log(`Negotiation priorities: ${contractData.negotiation_priorities?.length || 0}`);\n    \n    // Return resultaat\n    return {\n        json: {\n            ...contractData,\n            excelGenerated: true,\n            excelFilename: fileName,\n            templateFormat: true,\n            detailedAnalysis: true,\n            processingTimestamp: new Date().toISOString(),\n            reportSummary: {\n                contractType: contractData.contract_summary?.contract_type || 'Unknown',\n                riskLevel: contractData.overall_risk_assessment?.risk_level || 'Unknown',\n                complianceScore: contractData.overall_risk_assessment?.compliance_score || 'N/A',\n                criticalIssues: contractData.critical_issues?.length || 0,\n                totalAnalyzedItems: (contractData.critical_issues?.length || 0) + \n                                 (contractData.negotiation_priorities?.length || 0) +\n                                 (contractData.article_analysis?.length || 0)\n            }\n        },\n        binary: {\n            ...($input.first().binary || {}),\n            file: {\n                data: Buffer.from(excelXML, 'utf8').toString('base64'),\n                mimeType: 'application/vnd.ms-excel',\n                fileName: fileName\n            }\n        }\n    };\n\n} catch (error) {\n    console.error('Critical error during detailed template Excel generation:', error);\n    \n    return {\n        json: {\n            ...contractData,\n            excelGenerated: false,\n            error: error.message,\n            errorTimestamp: new Date().toISOString()\n        },\n        binary: $input.first().binary || {}\n    };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1856,
        -240
      ],
      "id": "ea177d9b-07ba-430b-be41-62e4fb258d5e",
      "name": "Excel code1",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Conduct a thorough legal and commercial review of this contract documentation under  Qatar law: {{$json.contract_text || $json.text || $json.combinedText}}\n\nProvide comprehensive analysis including risk assessment, compliance evaluation, and negotiation recommendations. Reference specific DOCUMENT numbers when citing clauses for traceability.",
        "options": {
          "systemMessage": "=# Enhanced Altrad Contract Analysis System\n\nYou are Altrad's advanced contract analysis AI, designed to provide comprehensive risk assessment and negotiation guidance for construction and services contracts worldwide.\n\n## Core Behavioral Guidelines\n\n### Communication Standards\n- Never start responses by saying a question, idea, or observation was good, great, fascinating, profound, excellent, or any other positive adjective. Skip the flattery and respond directly.\n- Do not use emojis unless the person asks for them or if their message immediately prior contains an emoji, and be judicious about emoji use even in these circumstances.\n- Avoid emotes or actions inside asterisks unless the person specifically asks for this style of communication.\n- Maintain professional tone suitable for senior management.\n\n### Critical Evaluation and Professional Integrity\n- Critically evaluate any contract terms, theories, claims, and ideas presented rather than automatically agreeing or praising them.\n- When presented with dubious, incorrect, ambiguous, or unverifiable contract provisions, respectfully point out flaws, factual errors, lack of evidence, or lack of clarity rather than validating them.\n- Prioritize truthfulness and accuracy over agreeability, and do not tell people that problematic contract terms are acceptable just to be polite.\n- When engaging with metaphorical, allegorical, or symbolic interpretations in contract language, acknowledge their non-literal nature while still being able to discuss them critically.\n- Clearly distinguish between literal contractual obligations and figurative/interpretive frameworks, helping users understand when something is meant as metaphor rather than empirical fact.\n- If unclear whether a contract provision is empirical or metaphorical, assess it from both perspectives.\n- Present critiques with kindness, clearly stating when assessment is based on professional analysis.\n\n### User Wellbeing and Professional Support\n- Care about people's wellbeing and avoid encouraging or facilitating self-destructive behaviors in business decisions such as accepting disordered or unhealthy contract terms, or highly negative self-criticism about negotiation positions.\n- Avoid creating content that would support or reinforce self-destructive business behavior even if requested.\n- In ambiguous cases, ensure the user approaches contract decisions in a healthy, well-informed way.\n- If you notice signs that someone may unknowingly be experiencing mental health symptoms such as mania, psychosis, dissociation, or loss of attachment with reality, avoid reinforcing these beliefs and share concerns explicitly and openly without either sugar coating them or being infantilizing, and suggest the person speaks with a professional or trusted person for support.\n- Remain vigilant for escalating detachment from reality even if the conversation begins with seemingly harmless contract discussions.\n- Provide honest and accurate feedback even when it might not be what the person hopes to hear, rather than prioritizing immediate approval or agreement.\n- While remaining compassionate and helpful, maintain objectivity when it comes to business issues, offer constructive feedback when appropriate, and point out false assumptions.\n- Maintain clear awareness of when engaged in contract analysis versus normal conversation, and break character to remind the person of your analytical nature if judged necessary for their wellbeing or if extended roleplay seems to be creating confusion about actual contract risks.\n\n## Core Capabilities\n\n### Input Flexibility\n- Accept single or multiple contract documents\n- Process various formats: PDF, Word, text files\n- Handle incomplete contracts with placeholders\n- Analyze contract packages with multiple related documents\n\n### Multi-Jurisdiction Support\nDefault to English law unless explicitly specified. Supported jurisdictions include:\n- Qatar, UAE, Saudi Arabia, Kuwait (Middle East)\n- UK, France, Netherlands, Belgium (Europe)  \n- Australia, New Zealand (APAC)\n- Canada, USA (Americas)\n\nAdapt analysis based on specified jurisdiction's legal framework and construction industry practices.\n\n## Altrad Contracting Rules (CR1-CR11)\n\n### CR1: Consequential Damages\n- **Rule**: Altrad must not be liable for indirect/consequential damages (loss of profit, business, goodwill, reputation)\n- **Compliance**: Contract must explicitly exclude such damages OR provide mutual exclusion\n- **Scoring**: COMPLIANT (100%) = explicit exclusion; PARTIAL (50%) = mutual exclusion; NON_COMPLIANT (0%) = Altrad liable\n\n### CR2: Liquidated Damages\n- **Rule**: Daily rate ≤1% per week of contract value; Cap ≤10% total; 5 working day grace period\n- **Compliance**: All three criteria must be met\n- **Scoring**: COMPLIANT (100%) = all criteria met; PARTIAL (33-66%) = some criteria met; NON_COMPLIANT (0%) = major violations\n\n### CR3: Liability Cap\n- **Rule**: Overall liability cap required:\n  - €0-750k: 100% of contract value\n  - €750k-5M: 75% of contract value  \n  - >€5M: 50% of contract value\n- **Compliance**: Appropriate cap must be present\n- **Scoring**: COMPLIANT (100%) = appropriate cap; NON_COMPLIANT (0%) = no cap or inappropriate level\n\n### CR4: Warranty Period\n- **Rule**: Maximum 24 months; Back-to-back arrangements with suppliers required\n- **Compliance**: Both criteria must be met\n- **Scoring**: COMPLIANT (100%) = ≤24 months + back-to-back; PARTIAL (50%) = only one criteria met; NON_COMPLIANT (0%) = >24 months\n\n### CR5: Third Party Liability\n- **Rule**: Each party assumes own liability for injury/death of personnel or damage to own property\n- **Compliance**: Mutual arrangement or each party's own liability\n- **Scoring**: COMPLIANT (100%) = mutual; NON_COMPLIANT (0%) = one-sided against Altrad\n\n### CR6: Insurance\n- **Rule**: Client's insurer must waive subrogation rights against Altrad; No liability for client's deductibles/exclusions\n- **Compliance**: Both waiver and deductible protection required\n- **Scoring**: COMPLIANT (100%) = both present; PARTIAL (50%) = one present; NON_COMPLIANT (0%) = neither present\n\n### CR7: Payment Terms\n- **Rule**: ≤60 days payment terms; No broad withholding rights; Credit check on counterparty\n- **Compliance**: All criteria should be met\n- **Scoring**: COMPLIANT (100%) = all met; PARTIAL (33-66%) = some met; NON_COMPLIANT (0%) = major violations\n\n### CR8: Suspension/Termination\n- **Rule**: Entitlement to standby rates for no-fault suspensions; Right to terminate for insolvency, non-payment (60+ days), suspension (90+ days)\n- **Compliance**: Reasonable suspension terms and termination rights\n- **Scoring**: COMPLIANT (100%) = both present; PARTIAL (50%) = one present; NON_COMPLIANT (0%) = neither present\n\n### CR9: Retentions/Security\n- **Rule**: Retention ≤5%; Performance bond ≤10%; Warranty bond ≤5%; No overlap between bank and parent company guarantees\n- **Compliance**: All limits must be respected\n- **Scoring**: COMPLIANT (100%) = all limits met; PARTIAL (25-75%) = some limits exceeded; NON_COMPLIANT (0%) = major violations\n\n### CR10: Governing Law\n- **Rule**: Must align with specified jurisdiction\n- **Compliance**: Law clause must match project jurisdiction\n- **Scoring**: COMPLIANT (100%) = matches; NON_COMPLIANT (0%) = doesn't match\n\n### CR11: Code of Conduct\n- **Rule**: Anti-corruption and compliance clauses required\n- **Compliance**: Appropriate ethical standards clauses present\n- **Scoring**: COMPLIANT (100%) = present; NON_COMPLIANT (0%) = absent\n\n## Risk Assessment Methodology\n\n### Overall Risk Calculation\n- Calculate weighted compliance score across all CRs\n- CRITICAL: <50% compliance\n- HIGH: 50-69% compliance  \n- MEDIUM: 70-84% compliance\n- LOW: 85-100% compliance\n\n### Critical Issues Identification\nIdentify issues that are:\n- Deal-breakers for Altrad\n- Significant financial exposure\n- Operational disruption potential\n- Legal/regulatory non-compliance\n\n## Output Structure\n\nProvide comprehensive analysis in this exact JSON structure:\n\n```json\n{\n  \"project_metadata\": {\n    \"analysis_date\": \"YYYY-MM-DD\",\n    \"project_reference\": \"extracted or generated reference\",\n    \"analyst_notes\": \"any relevant context\"\n  },\n  \"contract_summary\": {\n    \"contract_type\": \"description\",\n    \"contracting_parties\": \"parties involved\", \n    \"estimated_value\": \"contract value if stated\",\n    \"key_scope\": \"main work description\",\n    \"document_structure\": \"explanation of documents analyzed\",\n    \"governing_law\": \"applicable legal framework\"\n  },\n  \"overall_risk_assessment\": {\n    \"risk_level\": \"CRITICAL/HIGH/MEDIUM/LOW\",\n    \"executive_summary\": \"2-3 sentence summary for C-suite\",\n    \"critical_issues_count\": number,\n    \"compliance_score\": \"percentage with 1 decimal\",\n    \"key_concerns\": [\"list of top 3-5 concerns\"],\n    \"deal_breaker_issues\": [\"absolute show-stoppers\"]\n  },\n  \"red_zone_compliance\": {\n    \"CR1_consequential_damages\": {\n      \"status\": \"COMPLIANT/PARTIAL/NON_COMPLIANT\",\n      \"compliance_percent\": \"0-100%\",\n      \"details\": \"explanation\",\n      \"evidence\": \"specific contract references\"\n    },\n    // ... repeat for CR2-CR11\n  },\n  \"detailed_clause_analysis\": [\n    {\n      \"clause_reference\": \"Document X, Clause Y.Z\",\n      \"clause_title\": \"descriptive title\",\n      \"clause_category\": \"risk category (e.g., liability, payment, termination)\",\n      \"current_text\": \"relevant contract text (max 200 words)\",\n      \"altrad_rules_affected\": [\"CR1\", \"CR3\", etc.],\n      \"risk_level\": \"CRITICAL/HIGH/MEDIUM/LOW\",\n      \"business_impact\": \"specific impact on Altrad\",\n      \"financial_exposure\": \"quantified risk if possible\",\n      \"current_position\": \"what clause currently states\",\n      \"target_position\": \"what Altrad wants\",\n      \"fallback_position\": \"minimum acceptable alternative\",\n      \"proposed_amendment\": \"specific replacement text\",\n      \"negotiation_priority\": \"HIGH/MEDIUM/LOW\",\n      \"rationale\": \"why change is needed\",\n      \"precedent_notes\": \"similar clauses in other projects if relevant\"\n    }\n  ],\n  \"critical_issues\": [\n    {\n      \"issue\": \"descriptive title\",\n      \"article_reference\": \"clause references\", \n      \"document_reference\": \"document name\",\n      \"risk_level\": \"CRITICAL/HIGH/MEDIUM\",\n      \"business_impact\": \"detailed impact explanation\",\n      \"financial_quantification\": \"estimated exposure if possible\",\n      \"recommended_action\": \"specific steps to address\",\n      \"evidence\": \"supporting contract text\",\n      \"negotiation_urgency\": \"immediate/high/medium/low\"\n    }\n  ],\n  \"negotiation_strategy\": {\n    \"deal_breakers\": [\n      {\n        \"issue\": \"non-negotiable item\",\n        \"current_position\": \"current state\",\n        \"minimum_requirement\": \"absolute minimum acceptable\",\n        \"walk_away_threshold\": \"when to abandon deal\"\n      }\n    ],\n    \"high_priority\": [\n      {\n        \"issue\": \"important but negotiable\",\n        \"target_position\": \"ideal outcome\",\n        \"fallback_position\": \"acceptable alternative\",\n        \"negotiation_leverage\": \"what Altrad can offer in return\"\n      }\n    ],\n    \"medium_priority\": [\n      {\n        \"issue\": \"nice-to-have improvements\",\n        \"target_position\": \"desired outcome\",\n        \"trade_off_potential\": \"what could be given up for this\"\n      }\n    ]\n  },\n  \"contract_amendments\": {\n    \"critical_amendments\": [\n      {\n        \"article\": \"clause reference\",\n        \"document_reference\": \"document name\",\n        \"amendment_type\": \"deletion/replacement/addition\",\n        \"current_text\": \"existing problematic text\",\n        \"proposed_amendment\": \"specific replacement language\",\n        \"rationale\": \"why change is essential\",\n        \"altrad_rule\": \"CR reference\",\n        \"legal_justification\": \"supporting legal reasoning\"\n      }\n    ],\n    \"additional_clauses_needed\": [\n      {\n        \"clause_type\": \"type of clause needed\",\n        \"proposed_text\": \"full clause text\",\n        \"location\": \"where to insert\",\n        \"rationale\": \"why needed\"\n      }\n    ]\n  },\n  \"implementation_roadmap\": {\n    \"immediate_actions\": [\n      \"specific next steps within 1-2 weeks\"\n    ],\n    \"negotiation_sequence\": [\n      \"Phase 1: Deal breakers and show-stoppers\",\n      \"Phase 2: High priority commercial terms\", \n      \"Phase 3: Medium priority improvements\",\n      \"Phase 4: Final documentation and execution\"\n    ],\n    \"timeline_estimate\": \"realistic negotiation duration\",\n    \"resource_requirements\": \"legal/commercial support needed\",\n    \"success_metrics\": \"how to measure negotiation success\"\n  },\n  \"executive_dashboard\": {\n    \"proceed_recommendation\": \"PROCEED/CONDITIONAL/DO_NOT_PROCEED\",\n    \"conditions_for_proceeding\": [\"specific requirements\"],\n    \"estimated_contract_value_at_risk\": \"financial quantification\",\n    \"negotiation_complexity\": \"HIGH/MEDIUM/LOW\",\n    \"competitive_implications\": \"impact on bid position\",\n    \"altrad_group_precedents\": \"relevant past decisions\"\n  },\n  \"appendices\": {\n    \"compliance_matrix\": \"visual summary of all CR compliance\",\n    \"risk_heat_map\": \"prioritized risk visualization\",\n    \"clause_tracking_sheet\": \"negotiation progress tracker format\",\n    \"escalation_triggers\": \"when to involve senior management\"\n  }\n}\n```\n\n## Analysis Guidelines\n\n### Document Processing\n1. Read all provided documents thoroughly\n2. Identify document hierarchy and relationships\n3. Note any missing or incomplete sections\n4. Cross-reference between documents for consistency\n\n### Clause-by-Clause Review\n- Analyze EVERY substantive clause, not just problematic ones\n- Provide specific contract text quotes as evidence\n- Link each clause to relevant Altrad Rules where applicable\n- Assess individual clause risk independent of overall contract\n- Challenge unclear or potentially problematic language objectively\n\n### Risk Quantification\n- Provide financial estimates where possible\n- Consider probability and impact of risks\n- Distinguish between immediate and long-term exposures\n- Account for jurisdiction-specific factors\n- Flag unrealistic risk allocations or terms\n\n### Negotiation Intelligence\n- Prioritize issues by business impact and achievability\n- Provide specific alternative language for problematic clauses\n- Consider counterparty perspective and likely resistance\n- Suggest trading strategies (give X to get Y)\n- Assess realistic negotiation outcomes honestly\n\n### Quality Assurance\n- Ensure all CR rules are systematically evaluated\n- Verify compliance percentages are accurately calculated\n- Check that critical issues align with compliance scores\n- Confirm recommendations are actionable and specific\n- Maintain objectivity in risk assessment\n\n## Special Instructions\n\n- Always quote specific contract text as evidence\n- Provide document and clause references for all citations\n- Distinguish between mandatory changes vs. improvements\n- Consider cumulative effect of multiple issues\n- Account for industry standards and market practices\n- Maintain professional tone suitable for senior management\n- Flag any unusual or non-standard contract provisions\n- Note positive/favorable clauses as well as problematic ones\n- Provide honest assessment of negotiation feasibility\n- Alert to potential unrealistic expectations or harmful decisions\n\nThis system provides strategic contract intelligence to support Altrad's commercial decision-making and risk management across global operations while maintaining professional integrity and user wellbeing awareness.",
          "passthroughBinaryImages": "={{ true }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1488,
        -480
      ],
      "id": "10f1ae4f-121c-4db0-8716-b8638cd52085",
      "name": "AI Agent3",
      "disabled": true
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Altrad Contract Assessment Report</title>\n    <style>\n        @page {\n            size: A4;\n            margin: 2cm 1.5cm;\n        }\n        \n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: Arial, sans-serif;\n            font-size: 10pt;\n            line-height: 1.4;\n            color: #333;\n            background: white;\n        }\n        \n        .page-break {\n            page-break-before: always;\n        }\n        \n        .no-break {\n            page-break-inside: avoid;\n        }\n        \n        .header {\n            text-align: center;\n            border-bottom: 3px solid #e31e24;\n            padding-bottom: 20px;\n            margin-bottom: 30px;\n        }\n        \n        .logo {\n            font-size: 24pt;\n            font-weight: bold;\n            color: #e31e24;\n            margin-bottom: 10px;\n        }\n        \n        .report-title {\n            font-size: 18pt;\n            color: #333;\n            margin-bottom: 5px;\n        }\n        \n        .report-date {\n            font-size: 10pt;\n            color: #666;\n        }\n        \n        .section {\n            margin-bottom: 25px;\n        }\n        \n        .section-title {\n            font-size: 14pt;\n            font-weight: bold;\n            color: #e31e24;\n            border-bottom: 2px solid #e31e24;\n            padding-bottom: 5px;\n            margin-bottom: 15px;\n        }\n        \n        .subsection-title {\n            font-size: 12pt;\n            font-weight: bold;\n            color: #333;\n            margin-bottom: 10px;\n            margin-top: 15px;\n        }\n        \n        .risk-badge {\n            display: inline-block;\n            padding: 3px 8px;\n            border-radius: 3px;\n            font-size: 9pt;\n            font-weight: bold;\n            color: white;\n            margin-right: 5px;\n        }\n        \n        .risk-low { background-color: #28a745; }\n        .risk-medium { background-color: #ffc107; color: #333; }\n        .risk-high { background-color: #fd7e14; }\n        .risk-critical { background-color: #dc3545; }\n        \n        .status-badge {\n            display: inline-block;\n            padding: 2px 6px;\n            border-radius: 3px;\n            font-size: 8pt;\n            font-weight: bold;\n            margin-right: 5px;\n        }\n        \n        .status-compliant { background-color: #28a745; color: white; }\n        .status-non-compliant { background-color: #dc3545; color: white; }\n        .status-unclear { background-color: #6c757d; color: white; }\n        \n        .priority-badge {\n            display: inline-block;\n            padding: 2px 6px;\n            border-radius: 3px;\n            font-size: 8pt;\n            font-weight: bold;\n            margin-right: 5px;\n        }\n        \n        .priority-high { background-color: #dc3545; color: white; }\n        .priority-medium { background-color: #ffc107; color: #333; }\n        .priority-low { background-color: #28a745; color: white; }\n        \n        .info-grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 20px;\n        }\n        \n        .info-box {\n            border: 1px solid #ddd;\n            padding: 15px;\n            border-radius: 5px;\n            background-color: #f8f9fa;\n        }\n        \n        .info-label {\n            font-weight: bold;\n            color: #495057;\n            margin-bottom: 5px;\n        }\n        \n        .article-card {\n            border: 1px solid #ddd;\n            margin-bottom: 15px;\n            border-radius: 5px;\n            overflow: hidden;\n        }\n        \n        .article-header {\n            background-color: #f8f9fa;\n            padding: 10px 15px;\n            border-bottom: 1px solid #ddd;\n        }\n        \n        .article-content {\n            padding: 15px;\n        }\n        \n        .article-title {\n            font-weight: bold;\n            font-size: 11pt;\n            margin-bottom: 5px;\n        }\n        \n        .list-item {\n            margin-bottom: 8px;\n            padding-left: 15px;\n            position: relative;\n        }\n        \n        .list-item:before {\n            content: \"•\";\n            position: absolute;\n            left: 0;\n            color: #e31e24;\n            font-weight: bold;\n        }\n        \n        .amendment-box {\n            border: 1px solid #17a2b8;\n            background-color: #f0f9ff;\n            padding: 15px;\n            margin-bottom: 15px;\n            border-radius: 5px;\n        }\n        \n        .amendment-title {\n            font-weight: bold;\n            color: #17a2b8;\n            margin-bottom: 8px;\n        }\n        \n        .proposed-text {\n            background-color: #e8f5e8;\n            border-left: 4px solid #28a745;\n            padding: 10px;\n            margin: 10px 0;\n            font-size: 9pt;\n            font-style: italic;\n        }\n        \n        .implementation-step {\n            background-color: #fff3cd;\n            border-left: 4px solid #ffc107;\n            padding: 10px;\n            margin-bottom: 10px;\n        }\n        \n        .executive-summary {\n            background-color: #f8f9fa;\n            border-left: 4px solid #e31e24;\n            padding: 20px;\n            margin-bottom: 25px;\n            font-size: 11pt;\n        }\n        \n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 15px;\n            font-size: 9pt;\n        }\n        \n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: left;\n            vertical-align: top;\n        }\n        \n        th {\n            background-color: #f8f9fa;\n            font-weight: bold;\n        }\n        \n        .footer {\n            margin-top: 30px;\n            text-align: center;\n            font-size: 8pt;\n            color: #666;\n            border-top: 1px solid #ddd;\n            padding-top: 15px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <div class=\"logo\">ALTRAD</div>\n        <div class=\"report-title\">Contract Assessment Report</div>\n        <div class=\"report-date\">Generated on {{ new Date().toLocaleDateString('en-GB') }}</div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">Contract Summary</div>\n        <div class=\"info-grid\">\n            <div class=\"info-box\">\n                <div class=\"info-label\">Contract Type:</div>\n                <div>{{ $json.contract_summary.contract_type }}</div>\n            </div>\n            <div class=\"info-box\">\n                <div class=\"info-label\">Contracting Parties:</div>\n                <div>{{ $json.contract_summary.contracting_parties }}</div>\n            </div>\n            <div class=\"info-box\">\n                <div class=\"info-label\">Estimated Value:</div>\n                <div>{{ $json.contract_summary.estimated_value }}</div>\n            </div>\n            <div class=\"info-box\">\n                <div class=\"info-label\">Key Scope:</div>\n                <div>{{ $json.contract_summary.key_scope }}</div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">Overall Risk Assessment</div>\n        <div class=\"executive-summary\">\n            <div style=\"margin-bottom: 15px;\">\n                <span class=\"risk-badge risk-high\">\n                    {{ $json.overall_risk_assessment.risk_level }} RISK\n                </span>\n                <strong>Critical Issues: {{ $json.overall_risk_assessment.critical_issues_count }}</strong>\n            </div>\n            <div>{{ $json.overall_risk_assessment.executive_summary }}</div>\n        </div>\n    </div>\n\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Red Zone Compliance Overview</div>\n        <table>\n            <thead>\n                <tr>\n                    <th style=\"width: 25%;\">Rule</th>\n                    <th style=\"width: 15%;\">Status</th>\n                    <th style=\"width: 60%;\">Details</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td><strong>CR1 - Consequential Damages</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR1_consequential_damages.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR1_consequential_damages.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR2 - Liquidated Damages</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR2_liquidated_damages.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR2_liquidated_damages.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR3 - Liability Cap</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR3_liability_cap.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR3_liability_cap.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR4 - Warranty Period</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR4_warranty_period.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR4_warranty_period.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR5 - Third Party Liability</strong></td>\n                    <td><span class=\"status-badge status-unclear\">{{ $json.red_zone_compliance.CR5_third_party_liability.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR5_third_party_liability.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR6 - Insurance</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR6_insurance.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR6_insurance.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR7 - Payment Terms</strong></td>\n                    <td><span class=\"status-badge status-compliant\">{{ $json.red_zone_compliance.CR7_payment_terms.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR7_payment_terms.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR8 - Suspension/Termination</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR8_suspension_termination.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR8_suspension_termination.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR9 - Retentions/Security</strong></td>\n                    <td><span class=\"status-badge status-non-compliant\">{{ $json.red_zone_compliance.CR9_retentions_security.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR9_retentions_security.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR10 - Governing Law</strong></td>\n                    <td><span class=\"status-badge status-compliant\">{{ $json.red_zone_compliance.CR10_governing_law.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR10_governing_law.details }}</td>\n                </tr>\n                <tr>\n                    <td><strong>CR11 - Code of Conduct</strong></td>\n                    <td><span class=\"status-badge status-unclear\">{{ $json.red_zone_compliance.CR11_code_conduct.status }}</span></td>\n                    <td>{{ $json.red_zone_compliance.CR11_code_conduct.details }}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Critical Issues</div>\n        {{ $json.criticalIssuesHtml }}\n    </div>\n\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Negotiation Priorities</div>\n        <div class=\"subsection-title\">High Priority</div>\n        {{ $json.highPriorityHtml }}\n        <div class=\"subsection-title\">Medium Priority</div>\n        {{ $json.mediumPriorityHtml }}\n    </div>\n\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Contract Amendments</div>\n        <div class=\"subsection-title\">Critical Amendments Required</div>\n        {{ $json.criticalAmendmentsHtml }}\n\n        <div class=\"subsection-title\">Additional Clauses Needed</div>\n        {{ $json.additionalClausesHtml }}\n    </div>\n\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Implementation Roadmap</div>\n        \n        <div class=\"subsection-title\">Immediate Actions</div>\n        {{ $json.immediateActionsHtml }}\n\n        <div class=\"subsection-title\">Negotiation Sequence</div>\n        {{ $json.negotiationSequenceHtml }}\n\n        <div class=\"subsection-title\">Fallback Strategies</div>\n        <p>Er zijn geen specifieke fallback strategieën in de JSON-input.</p>\n\n        <div class=\"subsection-title\">Deal Breakers</div>\n        {{ $json.dealBreakersHtml }}\n    </div>\n\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Detailed Article Analysis</div>\n        {{ $json.articleAnalysisHtml }}\n    </div>\n\n    <div class=\"section page-break\">\n        <div class=\"section-title\">Final Recommendations</div>\n        \n        <div class=\"info-box\" style=\"margin-bottom: 20px;\">\n            <div class=\"info-label\">Proceed with Contract:</div>\n            <div style=\"font-size: 12pt; font-weight: bold; color: #ffc107;\">\n                {{ $json.executive_dashboard.proceed_recommendation }}\n            </div>\n        </div>\n\n        <div class=\"subsection-title\">Conditions:</div>\n        {{ $json.conditionsHtml }}\n\n        <div class=\"info-grid\">\n            <div>\n                <div class=\"subsection-title\">Must Change:</div>\n                {{ $json.criticalAmendmentsHtml }}\n            </div>\n            <div>\n                <div class=\"subsection-title\">Should Change:</div>\n                {{ $json.additionalClausesHtml }}\n            </div>\n        </div>\n    </div>\n\n    <div class=\"footer\">\n        <div>This report was generated by Altrad's Contract Assessment System</div>\n        <div>Confidential and Proprietary - For Internal Use Only</div>\n    </div>\n</body>\n</html>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        1024,
        -256
      ],
      "id": "d31c27b1-bb2b-4cca-a0a4-1ff6bffe1105",
      "name": "HTML2",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// N8N Code Node — Enhanced Altrad Excel Export (v4)\n// Aangepast voor Enhanced Altrad Contract Analysis System output\n// - Correcte mapping naar bestaande JSON structuur\n// - Exact 30 rijen, risico-gesorteerd\n// - Veilige XML-escaping, geen HTML-ruis\n// - Dynamische secties met caps\n\nconst contractData = $input.first().json;\n\n// ===================== CONFIG =====================\nconst CONFIG = {\n  title: 'Enhanced Altrad Contract Analysis - Detailed Report',\n  sheetName: 'Contract Analysis',\n  binaryPropertyName: 'file',\n\n  // rijenbeheer\n  minRows: 30,\n  maxRows: 30,\n  enforceHardCap: true,\n  sortByRiskBeforeCap: true,\n\n  // welke secties/caps meenemen\n  caps: {\n    red_zone_compliance: Infinity,\n    critical_issues: Infinity,\n    detailed_clause_analysis: 8,\n    deal_breakers: 5,\n    high_priority_negotiation: 5,\n    medium_priority_negotiation: 3,\n    contract_amendments__critical: 4,\n    contract_amendments__additional: 3,\n    implementation_immediate: 3,\n    generic_section: 5,\n  },\n  redZoneIncludeCompliant: false,\n\n  // header velden\n  headerPaths: {\n    projectReference: [\n      'project_metadata.project_reference',\n      'contract_summary.contract_type',\n    ],\n    contractingParties: [\n      'contract_summary.contracting_parties',\n    ],\n    estimatedValue: [\n      'contract_summary.estimated_value',\n    ],\n    analysisDate: [\n      'project_metadata.analysis_date',\n    ],\n  },\n\n  dateStrategy: 'iso',\n};\n\n// ===================== HELPERS =====================\nfunction get(obj, path) {\n  if (!obj) return undefined;\n  const parts = path.split('.');\n  let cur = obj;\n  for (const p of parts) {\n    if (cur && Object.prototype.hasOwnProperty.call(cur, p)) cur = cur[p]; else return undefined;\n  }\n  return cur;\n}\n\nfunction firstDefined(obj, paths = []) {\n  for (const p of paths) {\n    const v = get(obj, p);\n    if (v !== undefined && v !== null && v !== '') return v;\n  }\n  return undefined;\n}\n\nfunction escapeXml(unsafe) {\n  if (unsafe === null || unsafe === undefined) return '';\n  return String(unsafe)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\nfunction truncateText(text, maxLength = 300) {\n  const s = text == null ? '' : String(text);\n  if (s.length <= maxLength) return s;\n  return s.substring(0, maxLength) + '...';\n}\n\nfunction normalizeData(data) {\n  const d = Array.isArray(data) ? data[0] : data;\n  return (d && typeof d === 'object') ? d : {};\n}\n\nfunction toTitle(str) {\n  return String(str || '')\n    .replace(/_/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim()\n    .replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\nfunction detectRisk(item = {}, fallback = 'LOW') {\n  const candidates = [\n    (item.risk || item.risk_level || item.level || item.severity || ''),\n    (item.status || ''),\n    (item.priority || ''),\n  ].map(x => String(x || '').toUpperCase());\n\n  for (const c of candidates) {\n    if (['CRITICAL','HIGH','MEDIUM','LOW'].includes(c)) return c;\n    if (c === 'NON_COMPLIANT') return 'CRITICAL';\n    if (c === 'PARTIAL') return 'MEDIUM';\n  }\n  return String(fallback || 'LOW').toUpperCase();\n}\n\nfunction rank(risk) {\n  const r = String(risk || 'LOW').toUpperCase();\n  return { CRITICAL: 1, HIGH: 2, MEDIUM: 3, LOW: 4 }[r] || 5;\n}\n\nfunction formatDate({ dateString, strategy = CONFIG.dateStrategy }) {\n  let d;\n  if (dateString) {\n    const parsed = new Date(dateString);\n    d = isNaN(parsed.getTime()) ? new Date() : parsed;\n  } else {\n    d = new Date();\n  }\n  return d.toISOString().slice(0, 10);\n}\n\nfunction makeRow({ idx, doc, article, clause, comments, suggested, answers, risk }) {\n  return {\n    no: idx,\n    doc: doc || '',\n    article: article || '',\n    clause: clause || '',\n    comments: comments || '',\n    suggestedClauses: suggested || '',\n    clientAnswers: answers || '',\n    risk: (risk || 'LOW').toUpperCase(),\n  };\n}\n\nfunction styleForRow(row) {\n  const risk = (row.risk || 'LOW').toUpperCase();\n  if (risk === 'CRITICAL' || row.doc === 'Deal Breaker') return 'CriticalCell';\n  if (risk === 'HIGH' || row.doc === 'Amendment' || row.doc === 'High Priority') return 'HighCell';\n  if (risk === 'MEDIUM' || row.doc === 'Red Zone' || row.doc === 'Medium Priority') return 'MediumCell';\n  return 'DataCell';\n}\n\nfunction addWithCap(out, incoming, capLeft, sortByRisk = CONFIG.sortByRiskBeforeCap) {\n  if (capLeft <= 0) return 0;\n  const arr = sortByRisk ? [...incoming].sort((a,b) => rank(a.risk) - rank(b.risk)) : incoming;\n  const slice = arr.slice(0, capLeft);\n  out.push(...slice);\n  return slice.length;\n}\n\n// ===================== ROW CONSTRUCTION =====================\nfunction createRows(data) {\n  const rows = [];\n  let idx = 1;\n  const d = normalizeData(data);\n  let capLeft = CONFIG.maxRows;\n\n  const pushRows = (arr) => addWithCap(rows, arr.map(r => ({ ...r, no: idx++ })), capLeft);\n  const decCap = (n) => { capLeft -= n; if (capLeft < 0) capLeft = 0; };\n\n  // 1) OVERALL RISK ASSESSMENT\n  const ora = d.overall_risk_assessment;\n  if (ora && capLeft > 0) {\n    const n = pushRows([\n      makeRow({\n        idx: 0,\n        doc: 'Assessment',\n        article: 'Overall Risk',\n        clause: String(ora.risk_level || 'Unknown'),\n        comments: `Compliance Score: ${ora.compliance_score ?? 'N/A'} | Critical Issues: ${ora.critical_issues_count ?? 0}`,\n        suggested: truncateText(ora.executive_summary || 'No summary provided', 300),\n        answers: '',\n        risk: detectRisk({ risk_level: ora.risk_level }),\n      })\n    ]);\n    decCap(n);\n  }\n\n  // 2) RED ZONE COMPLIANCE\n  if (capLeft > 0 && d.red_zone_compliance && typeof d.red_zone_compliance === 'object') {\n    const redRows = Object.entries(d.red_zone_compliance)\n      .filter(([, item]) => item && item.status && (CONFIG.redZoneIncludeCompliant || item.status !== 'COMPLIANT'))\n      .map(([key, item]) => {\n        const articleLabel = toTitle(key.replace(/CR\\d+_/, ''));\n        return makeRow({\n          idx: 0,\n          doc: 'Red Zone',\n          article: articleLabel,\n          clause: key,\n          comments: `${item.status} (${item.compliance_percent || '0%'}) - ${truncateText(item.details || 'No details', 250)}`,\n          suggested: truncateText(item.evidence || 'Review and update clause as needed', 250),\n          answers: '',\n          risk: detectRisk({ status: item.status }),\n        });\n      });\n    const n = pushRows(redRows);\n    decCap(n);\n  }\n\n  // 3) CRITICAL ISSUES\n  if (capLeft > 0 && Array.isArray(d.critical_issues)) {\n    const arr = d.critical_issues.map(ci => makeRow({\n      idx: 0,\n      doc: 'Critical Issue',\n      article: ci.article_reference || 'General',\n      clause: ci.issue || 'Unknown Issue',\n      comments: `${(ci.risk_level || 'CRITICAL')} RISK - ${truncateText(ci.business_impact || 'No impact specified', 200)}`,\n      suggested: truncateText(ci.recommended_action || 'Review required', 250),\n      answers: '',\n      risk: detectRisk(ci, 'CRITICAL'),\n    }));\n    const n = pushRows(arr);\n    decCap(n);\n  }\n\n  // 4) DETAILED CLAUSE ANALYSIS\n  if (capLeft > 0 && Array.isArray(d.detailed_clause_analysis)) {\n    const arr = d.detailed_clause_analysis.slice(0, CONFIG.caps.detailed_clause_analysis).map(a => makeRow({\n      idx: 0,\n      doc: 'Clause Analysis',\n      article: a.clause_reference || 'Unknown',\n      clause: a.clause_title || 'No Title',\n      comments: `${a.risk_level || 'MEDIUM'} - ${truncateText(a.business_impact || '', 150)}`,\n      suggested: truncateText(a.proposed_amendment || a.target_position || '', 250),\n      answers: '',\n      risk: detectRisk(a, 'MEDIUM'),\n    }));\n    const n = pushRows(arr);\n    decCap(n);\n  }\n\n  // 5) NEGOTIATION STRATEGY - DEAL BREAKERS\n  if (capLeft > 0 && d.negotiation_strategy?.deal_breakers && Array.isArray(d.negotiation_strategy.deal_breakers)) {\n    const arr = d.negotiation_strategy.deal_breakers.slice(0, CONFIG.caps.deal_breakers).map(p => makeRow({\n      idx: 0,\n      doc: 'Deal Breaker',\n      article: 'Critical',\n      clause: p.issue || 'Unknown Item',\n      comments: `Current: ${truncateText(p.current_position || '', 120)} | Walk away if: ${truncateText(p.walk_away_threshold || '', 100)}`,\n      suggested: truncateText(p.minimum_requirement || '', 250),\n      answers: '',\n      risk: 'CRITICAL',\n    }));\n    const n = pushRows(arr);\n    decCap(n);\n  }\n\n  // 6) NEGOTIATION STRATEGY - HIGH PRIORITY\n  if (capLeft > 0 && d.negotiation_strategy?.high_priority && Array.isArray(d.negotiation_strategy.high_priority)) {\n    const arr = d.negotiation_strategy.high_priority.slice(0, CONFIG.caps.high_priority_negotiation).map(p => makeRow({\n      idx: 0,\n      doc: 'High Priority',\n      article: 'Important',\n      clause: p.issue || 'Unknown Item',\n      comments: `Target: ${truncateText(p.target_position || '', 120)} | Leverage: ${truncateText(p.negotiation_leverage || '', 100)}`,\n      suggested: truncateText(p.fallback_position || '', 250),\n      answers: '',\n      risk: 'HIGH',\n    }));\n    const n = pushRows(arr);\n    decCap(n);\n  }\n\n  // 7) NEGOTIATION STRATEGY - MEDIUM PRIORITY\n  if (capLeft > 0 && d.negotiation_strategy?.medium_priority && Array.isArray(d.negotiation_strategy.medium_priority)) {\n    const arr = d.negotiation_strategy.medium_priority.slice(0, CONFIG.caps.medium_priority_negotiation).map(p => makeRow({\n      idx: 0,\n      doc: 'Medium Priority',\n      article: 'Optional',\n      clause: p.issue || 'Unknown Item',\n      comments: `Target: ${truncateText(p.target_position || '', 150)}`,\n      suggested: truncateText(p.trade_off_potential || '', 250),\n      answers: '',\n      risk: 'MEDIUM',\n    }));\n    const n = pushRows(arr);\n    decCap(n);\n  }\n\n  // 8) CONTRACT AMENDMENTS - CRITICAL\n  if (capLeft > 0 && d.contract_amendments?.critical_amendments && Array.isArray(d.contract_amendments.critical_amendments)) {\n    const arr = d.contract_amendments.critical_amendments.slice(0, CONFIG.caps.contract_amendments__critical).map(am => makeRow({\n      idx: 0,\n      doc: 'Amendment',\n      article: am.article || 'New Article',\n      clause: 'CRITICAL Amendment Required',\n      comments: `Rule: ${am.altrad_rule || 'N/A'} - ${truncateText(am.rationale || 'No rationale', 200)}`,\n      suggested: truncateText(am.proposed_amendment || 'Amendment text required', 300),\n      answers: '',\n      risk: 'HIGH',\n    }));\n    const n = pushRows(arr);\n    decCap(n);\n  }\n\n  // 9) CONTRACT AMENDMENTS - ADDITIONAL CLAUSES\n  if (capLeft > 0 && d.contract_amendments?.additional_clauses_needed && Array.isArray(d.contract_amendments.additional_clauses_needed)) {\n    const arr = d.contract_amendments.additional_clauses_needed.slice(0, CONFIG.caps.contract_amendments__additional).map(cl => makeRow({\n      idx: 0,\n      doc: 'New Clause',\n      article: cl.location || 'New Article',\n      clause: cl.clause_type || 'Additional Clause',\n      comments: truncateText(cl.rationale || 'New clause required', 200),\n      suggested: truncateText(cl.proposed_text || 'Clause text to be defined', 300),\n      answers: '',\n      risk: 'MEDIUM',\n    }));\n    const n = pushRows(arr);\n    decCap(n);\n  }\n\n  // 10) IMPLEMENTATION ROADMAP - IMMEDIATE ACTIONS\n  if (capLeft > 0 && d.implementation_roadmap?.immediate_actions && Array.isArray(d.implementation_roadmap.immediate_actions)) {\n    const arr = d.implementation_roadmap.immediate_actions.slice(0, CONFIG.caps.implementation_immediate).map((action, i) => makeRow({\n      idx: 0,\n      doc: 'Action',\n      article: 'Immediate Action',\n      clause: `Action ${i + 1}`,\n      comments: truncateText(action, 250),\n      suggested: 'Execute immediately before contract signing',\n      answers: '',\n      risk: 'HIGH',\n    }));\n    const n = pushRows(arr);\n    decCap(n);\n  }\n\n  // 11) GENERIC FALLBACK voor overige array-secties\n  const skipKeys = new Set([\n    'overall_risk_assessment',\n    'red_zone_compliance',\n    'critical_issues',\n    'detailed_clause_analysis',\n    'negotiation_strategy',\n    'contract_amendments',\n    'implementation_roadmap',\n    'project_metadata',\n    'contract_summary',\n    'executive_dashboard',\n    'appendices',\n  ]);\n\n  if (capLeft > 0) {\n    Object.entries(d).forEach(([key, val]) => {\n      if (capLeft <= 0) return;\n      if (skipKeys.has(key)) return;\n      if (/_?html$/i.test(key)) return; // HTML velden negeren\n      if (!Array.isArray(val)) return;\n\n      const arr = val.slice(0, CONFIG.caps.generic_section).map((item, i) => {\n        const article = item?.article || item?.article_reference || item?.name || item?.title || item?.section || toTitle(key);\n        const clause  = item?.clause || item?.issue || item?.subsection || item?.key || `Item ${i + 1}`;\n        const comments = item?.comments || item?.summary || item?.details || item?.description || '';\n        const suggested = item?.recommended_action || item?.recommendation || item?.proposed_text || '';\n        return makeRow({\n          idx: 0,\n          doc: toTitle(key),\n          article,\n          clause,\n          comments: truncateText(comments, 300),\n          suggested: truncateText(suggested, 300),\n          answers: '',\n          risk: detectRisk(item, 'LOW'),\n        });\n      });\n\n      const n = pushRows(arr);\n      decCap(n);\n    });\n  }\n\n  // Padding tot exact 30 rijen\n  const target = CONFIG.enforceHardCap ? CONFIG.maxRows : Math.max(CONFIG.minRows, Math.min(rows.length, CONFIG.maxRows));\n  while (rows.length < target) {\n    rows.push(makeRow({ idx: 0, doc: '', article: '', clause: '', comments: '', suggested: '', answers: '', risk: 'LOW' }));\n  }\n  if (rows.length > CONFIG.maxRows) rows.length = CONFIG.maxRows;\n\n  // Her-nummering\n  rows.forEach((r, i) => { r.no = i + 1; });\n  return rows;\n}\n\n// ===================== EXCEL XML =====================\nfunction buildStylesXml() {\n  return `\n  <Style ss:ID=\"Header\">\n    <Font ss:Bold=\"1\" ss:Size=\"11\" ss:Color=\"#FFFFFF\"/>\n    <Interior ss:Color=\"#C00000\" ss:Pattern=\"Solid\"/>\n    <Alignment ss:Horizontal=\"Center\" ss:Vertical=\"Center\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n  </Style>\n  <Style ss:ID=\"Title\">\n    <Font ss:Bold=\"1\" ss:Size=\"16\"/>\n    <Alignment ss:Horizontal=\"Center\" ss:Vertical=\"Center\"/>\n  </Style>\n  <Style ss:ID=\"ProjectRef\">\n    <Font ss:Bold=\"1\" ss:Size=\"11\"/>\n    <Interior ss:Color=\"#E7E6E6\" ss:Pattern=\"Solid\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n  </Style>\n  <Style ss:ID=\"DataCell\">\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"CriticalCell\">\n    <Interior ss:Color=\"#FFCCCB\" ss:Pattern=\"Solid\"/>\n    <Font ss:Bold=\"1\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"HighCell\">\n    <Interior ss:Color=\"#FFE4B5\" ss:Pattern=\"Solid\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"MediumCell\">\n    <Interior ss:Color=\"#FFFACD\" ss:Pattern=\"Solid\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>`;\n}\n\nfunction generateExcelXML(data) {\n  const d = normalizeData(data);\n  const rows = createRows(d);\n\n  const projectRef = firstDefined(d, CONFIG.headerPaths.projectReference) || 'Not specified';\n  const parties = firstDefined(d, CONFIG.headerPaths.contractingParties) || 'Not specified';\n  const value = firstDefined(d, CONFIG.headerPaths.estimatedValue) || 'N/A';\n\n  const analysisDateRaw = firstDefined(d, CONFIG.headerPaths.analysisDate);\n  const dateCell = formatDate({ dateString: analysisDateRaw });\n\n  const styles = buildStylesXml();\n\n  const dataRowsXml = rows.map(row => {\n    const sid = styleForRow(row);\n    return `\n    <Row ss:Height=\"30\">\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"Number\">${row.no}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.doc)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.article)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.clause)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.comments)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.suggestedClauses)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.clientAnswers)}</Data></Cell>\n    </Row>`;\n  }).join('');\n\n  return `<?xml version=\"1.0\"?>\n<?mso-application progid=\"Excel.Sheet\"?>\n<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\">\n  <DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">\n    <Title>${escapeXml(CONFIG.title)}</Title>\n    <Subject>Contract Analysis: ${escapeXml(String(projectRef))}</Subject>\n    <Created>${new Date().toISOString()}</Created>\n  </DocumentProperties>\n  <Styles>\n${styles}\n  </Styles>\n  <Worksheet ss:Name=\"${escapeXml(CONFIG.sheetName)}\">\n    <Table>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"100\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"150\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"200\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"380\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"380\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"120\"/>\n\n      <Row ss:Height=\"35\">\n        <Cell ss:StyleID=\"Title\" ss:MergeAcross=\"6\"><Data ss:Type=\"String\">${escapeXml(CONFIG.title)}</Data></Cell>\n      </Row>\n      <Row ss:Height=\"5\"><Cell><Data ss:Type=\"String\"></Data></Cell></Row>\n\n      <Row ss:Height=\"20\">\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Project Reference</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"3\"><Data ss:Type=\"String\">${escapeXml(projectRef)}</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Date</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">${escapeXml(dateCell)}</Data></Cell>\n      </Row>\n      <Row ss:Height=\"20\">\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Contracting Parties</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"5\"><Data ss:Type=\"String\">${escapeXml(parties)}</Data></Cell>\n      </Row>\n      <Row ss:Height=\"20\">\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Estimated Value</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"5\"><Data ss:Type=\"String\">${escapeXml(value)}</Data></Cell>\n      </Row>\n\n      <Row ss:Height=\"5\"><Cell><Data ss:Type=\"String\"></Data></Cell></Row>\n\n      <Row ss:Height=\"25\">\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">No</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Doc.</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Article</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Clause</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Comments</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Suggested clauses</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Client's answers</Data></Cell>\n      </Row>\n\n${dataRowsXml}\n\n    </Table>\n  </Worksheet>\n</Workbook>`;\n}\n\n// ===================== MAIN =====================\ntry {\n  if (!contractData) throw new Error('No contract data provided');\n\n  const d = normalizeData(contractData);\n  const projectRef = firstDefined(d, CONFIG.headerPaths.projectReference) || 'Contract';\n  const riskSuffix = (d.overall_risk_assessment?.risk_level || 'NA').toString().toUpperCase();\n  const cleanRef = String(projectRef).replace(/[^a-zA-Z0-9]/g, '_').substring(0, 60);\n\n  const analysisDateRaw = firstDefined(d, CONFIG.headerPaths.analysisDate);\n  const dateForFilename = formatDate({ dateString: analysisDateRaw });\n\n  const fileName = `Enhanced_Altrad_Analysis_${cleanRef}_${riskSuffix}_${dateForFilename}.xls`;\n  const xml = generateExcelXML(d);\n\n  console.log(`[Excel] Generated Enhanced Altrad Analysis (${CONFIG.maxRows} rows): ${fileName}`);\n\n  return {\n    json: {\n      ...d,\n      excelGenerated: true,\n      excelFilename: fileName,\n      templateFormat: true,\n      enhancedAltradAnalysis: true,\n      processingTimestamp: new Date().toISOString(),\n      rowCount: CONFIG.maxRows,\n      config: {\n        sheetName: CONFIG.sheetName,\n        maxRows: CONFIG.maxRows,\n        enforceHardCap: CONFIG.enforceHardCap,\n        sortByRiskBeforeCap: CONFIG.sortByRiskBeforeCap,\n      }\n    },\n    binary: {\n      ...($input.first().binary || {}),\n      [CONFIG.binaryPropertyName]: {\n        data: Buffer.from(xml, 'utf8').toString('base64'),\n        mimeType: 'application/vnd.ms-excel',\n        fileName,\n      }\n    }\n  };\n\n} catch (err) {\n  console.error('[Excel] Generation error:', err);\n  return {\n    json: {\n      ...(normalizeData(contractData)),\n      excelGenerated: false,\n      error: String(err && err.message ? err.message : err),\n      errorTimestamp: new Date().toISOString(),\n    },\n    binary: $input.first().binary || {},\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1648,
        -240
      ],
      "id": "1bd9fd1d-d26b-424c-b7f7-052b59dddb9b",
      "name": "Excel code2",
      "disabled": true
    },
    {
      "parameters": {
        "html": "Contract Risk Assessment Report\n\nProject: {{$json.project_metadata?.project_reference || 'Project'}}\n\n\n\n1. Executive Summary\n\nThis report presents a comprehensive risk assessment of the proposed contract. The analysis evaluates key contractual provisions, compliance requirements, and associated risks.\n\nOverall Risk Level: {{$json.overall_risk_assessment?.risk_level || 'To be determined'}}\nCompliance Score: {{$json.overall_risk_assessment?.compliance_score || 'Pending assessment'}}\nFinal Recommendation: {{$json.proceedRecommendation || 'Under review'}}\n\n{{$json.overall_risk_assessment?.executive_summary || 'Executive summary to be provided upon completion of analysis.'}}\n\nKey Assessment Metrics:\n• Critical issues identified: {{$json.overall_risk_assessment?.critical_issues_count || 0}}\n• Primary area of concern: {{ ($json.overall_risk_assessment?.key_concerns || [])[0] || 'None identified at this time' }}\n• Estimated financial exposure: {{$json.estimatedValueAtRisk || 'Calculation in progress'}}\n\n\n2. Contract Overview\n\nThe following section provides an overview of the key contractual elements under review:\n\nContract Type: {{$json.contract_summary?.contract_type || 'Not specified'}}\nContracting Parties: {{$json.contract_summary?.contracting_parties || 'Not specified'}}\nScope of Work: {{$json.contract_summary?.key_scope || 'Not specified'}}\nGoverning Law: {{$json.contract_summary?.governing_law || 'Not specified'}}\n\n\n3. Critical Issues and Concerns\n\n{{$json.criticalIssuesHtml}}\n\n\n4. Risk Management Strategy\n\n4.1 Non-Negotiable Items\n\n{{$json.dealBreakersHtml}}\n\n4.2 High Priority Concerns\n\n{{$json.highPriorityHtml}}\n\n4.3 Medium Priority Items\n\n{{$json.mediumPriorityHtml}}\n\n\n5. Detailed Analysis\n\n{{$json.articleAnalysisHtml}}\n\n\n6. Recommended Contract Modifications\n\nThe following amendments are recommended to address critical risk factors:\n\n{{$json.criticalAmendmentsHtml}}\n\n6.1 Additional Provisions Required\n\n{{$json.additionalClausesHtml}}\n\n\n7. Implementation Plan\n\n7.1 Immediate Actions Required\n\n{{$json.immediateActionsHtml}}\n\n7.2 Negotiation Approach\n\n{{$json.negotiationSequenceHtml}}\n\n{{ $json.fallbackStrategiesHtml ? '7.3 Alternative Strategies\\n\\n' + $json.fallbackStrategiesHtml : '' }}\n\n\n8. Management Summary\n\nRecommendation: {{$json.proceedRecommendation || 'Pending final review'}}\nNegotiation Complexity: {{$json.negotiationComplexity || 'To be assessed'}}\n\nConditions for Contract Approval:\n\n{{$json.conditionsHtml}}\n\n\n9. Compliance Assessment\n\n{{$json.redZoneComplianceHtml}}\n\n\n10. Final Recommendations\n\n10.1 Required Changes\n\n{{$json.mustChangeHtml}}\n\n10.2 Recommended Changes\n\n{{$json.shouldChangeHtml}}\n\n10.3 Optional Improvements\n\n{{$json.couldImproveHtml}}\n\n\nAppendices\n\nA. Compliance Assessment Matrix: {{$json.appendices?.compliance_matrix || 'Available upon request'}}\nB. Risk Visualization: {{$json.appendices?.risk_heat_map || 'Available upon request'}}\nC. Clause Tracking Documentation: {{$json.appendices?.clause_tracking_sheet || 'Available upon request'}}\nD. Escalation Procedures: {{$json.appendices?.escalation_triggers || 'Available upon request'}}\n\n\nAnalyst Notes\n\n{{$json.project_metadata?.analyst_notes || ''}}"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -624,
        384
      ],
      "id": "2a020a39-f70c-4c58-acc8-c795a05f008f",
      "name": "HTML3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "56ddeb35-240e-44eb-87e5-d2d63bb6b6f3",
              "name": "html",
              "value": "={{ $json.html.base64Encode() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -448,
        384
      ],
      "id": "d8d0eb21-fdb7-47b3-adea-d69975a1026d",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "html",
        "options": {
          "fileName": "index.html",
          "mimeType": "text/html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -192,
        384
      ],
      "id": "bf6f15a8-12fd-4efe-bf14-9d9de5f475f7",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://172.17.0.6:3000/forms/chromium/convert/html",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Gotenberg-Output-Filename",
              "value": "=contract_review-"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "contract_review.pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        64,
        400
      ],
      "id": "9fa2f9d8-70f2-45ec-83ae-9ea9710593a9",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Conduct a thorough legal and commercial review of this contract documentation under  in document law: {{$json.contract_text || $json.text || $json.combinedText}}\n\nProvide comprehensive analysis including risk assessment, compliance evaluation, and negotiation recommendations. Reference specific DOCUMENT numbers when citing clauses for traceability.",
        "options": {
          "systemMessage": "=Enhanced Altrad Contract Analysis System\nYou are Altrad's advanced contract analysis AI, designed to provide comprehensive risk assessment and negotiation guidance for construction and services contracts worldwide. You operate with professional integrity, providing honest and objective analysis while maintaining awareness of user wellbeing.\nCore Behavioral Guidelines\nCommunication Standards\n\nProvide direct, professional responses without unnecessary flattery or positive adjectives\nUse emojis only when specifically requested or when the user's message contains them\nAvoid asterisk-based emotes or actions unless explicitly requested\nMaintain clear awareness of roleplay versus analytical work, breaking character if necessary for user wellbeing\n\nProfessional Integrity\n\nCritically evaluate all contract terms, claims, and proposals rather than automatically agreeing\nPoint out flaws, factual errors, or lack of clarity in contract language respectfully but directly\nPrioritize truthfulness and accuracy over agreeability\nProvide honest feedback even when it may not align with user preferences\nDistinguish between literal contractual obligations and metaphorical or interpretive language\n\nUser Wellbeing Awareness\n\nMonitor for signs of unrealistic expectations or potentially harmful decision-making\nAvoid reinforcing decisions that could lead to significant business harm\nSuggest professional consultation when contract issues exceed standard risk parameters\nMaintain objectivity in interpersonal or organizational dynamics affecting contract decisions\n\nCore Capabilities\nInput Flexibility\n\nAccept single or multiple contract documents\nProcess various formats: PDF, Word, text files\nHandle incomplete contracts with placeholders\nAnalyze contract packages with multiple related documents\n\nMulti-Jurisdiction Support\nDefault to English law unless explicitly specified. Supported jurisdictions include:\n\nQatar, UAE, Saudi Arabia, Kuwait (Middle East)\nUK, France, Netherlands, Belgium (Europe)\nAustralia, New Zealand (APAC)\nCanada, USA (Americas)\n\nAdapt analysis based on specified jurisdiction's legal framework and construction industry practices.\nAltrad Contracting Rules (CR1-CR11)\nCR1: Consequential Damages\n\nRule: Altrad must not be liable for indirect/consequential damages (loss of profit, business, goodwill, reputation)\nCompliance: Contract must explicitly exclude such damages OR provide mutual exclusion\nScoring: COMPLIANT (100%) = explicit exclusion; PARTIAL (50%) = mutual exclusion; NON_COMPLIANT (0%) = Altrad liable\n\nCR2: Liquidated Damages\n\nRule: Daily rate ≤1% per week of contract value; Cap ≤10% total; 5 working day grace period\nCompliance: All three criteria must be met\nScoring: COMPLIANT (100%) = all criteria met; PARTIAL (33-66%) = some criteria met; NON_COMPLIANT (0%) = major violations\n\nCR3: Liability Cap\n\nRule: Overall liability cap required:\n\n€0-750k: 100% of contract value\n€750k-5M: 75% of contract value\n\n\n€5M: 50% of contract value\n\n\n\n\nCompliance: Appropriate cap must be present\nScoring: COMPLIANT (100%) = appropriate cap; NON_COMPLIANT (0%) = no cap or inappropriate level\n\nCR4: Warranty Period\n\nRule: Maximum 24 months; Back-to-back arrangements with suppliers required\nCompliance: Both criteria must be met\nScoring: COMPLIANT (100%) = ≤24 months + back-to-back; PARTIAL (50%) = only one criteria met; NON_COMPLIANT (0%) = >24 months\n\nCR5: Third Party Liability\n\nRule: Each party assumes own liability for injury/death of personnel or damage to own property\nCompliance: Mutual arrangement or each party's own liability\nScoring: COMPLIANT (100%) = mutual; NON_COMPLIANT (0%) = one-sided against Altrad\n\nCR6: Insurance\n\nRule: Client's insurer must waive subrogation rights against Altrad; No liability for client's deductibles/exclusions\nCompliance: Both waiver and deductible protection required\nScoring: COMPLIANT (100%) = both present; PARTIAL (50%) = one present; NON_COMPLIANT (0%) = neither present\n\nCR7: Payment Terms\n\nRule: ≤60 days payment terms; No broad withholding rights; Credit check on counterparty\nCompliance: All criteria should be met\nScoring: COMPLIANT (100%) = all met; PARTIAL (33-66%) = some met; NON_COMPLIANT (0%) = major violations\n\nCR8: Suspension/Termination\n\nRule: Entitlement to standby rates for no-fault suspensions; Right to terminate for insolvency, non-payment (60+ days), suspension (90+ days)\nCompliance: Reasonable suspension terms and termination rights\nScoring: COMPLIANT (100%) = both present; PARTIAL (50%) = one present; NON_COMPLIANT (0%) = neither present\n\nCR9: Retentions/Security\n\nRule: Retention ≤5%; Performance bond ≤10%; Warranty bond ≤5%; No overlap between bank and parent company guarantees\nCompliance: All limits must be respected\nScoring: COMPLIANT (100%) = all limits met; PARTIAL (25-75%) = some limits exceeded; NON_COMPLIANT (0%) = major violations\n\nCR10: Governing Law\n\nRule: Must align with specified jurisdiction\nCompliance: Law clause must match project jurisdiction\nScoring: COMPLIANT (100%) = matches; NON_COMPLIANT (0%) = doesn't match\n\nCR11: Code of Conduct\n\nRule: Anti-corruption and compliance clauses required\nCompliance: Appropriate ethical standards clauses present\nScoring: COMPLIANT (100%) = present; NON_COMPLIANT (0%) = absent\n\nRisk Assessment Methodology\nOverall Risk Calculation\n\nCalculate weighted compliance score across all CRs\nCRITICAL: <50% compliance\nHIGH: 50-69% compliance\nMEDIUM: 70-84% compliance\nLOW: 85-100% compliance\n\nCritical Issues Identification\nIdentify issues that are:\n\nDeal-breakers for Altrad\nSignificant financial exposure\nOperational disruption potential\nLegal/regulatory non-compliance\n\nOutput Structure\nProvide comprehensive analysis in this exact JSON structure:\njson{\n  \"project_metadata\": {\n    \"analysis_date\": \"YYYY-MM-DD\",\n    \"project_reference\": \"extracted or generated reference\",\n    \"analyst_notes\": \"any relevant context\"\n  },\n  \"contract_summary\": {\n    \"contract_type\": \"description\",\n    \"contracting_parties\": \"parties involved\", \n    \"estimated_value\": \"contract value if stated\",\n    \"key_scope\": \"main work description\",\n    \"document_structure\": \"explanation of documents analyzed\",\n    \"governing_law\": \"applicable legal framework\"\n  },\n  \"overall_risk_assessment\": {\n    \"risk_level\": \"CRITICAL/HIGH/MEDIUM/LOW\",\n    \"executive_summary\": \"2-3 sentence summary for C-suite\",\n    \"critical_issues_count\": number,\n    \"compliance_score\": \"percentage with 1 decimal\",\n    \"key_concerns\": [\"list of top 3-5 concerns\"],\n    \"deal_breaker_issues\": [\"absolute show-stoppers\"]\n  },\n  \"red_zone_compliance\": {\n    \"CR1_consequential_damages\": {\n      \"status\": \"COMPLIANT/PARTIAL/NON_COMPLIANT\",\n      \"compliance_percent\": \"0-100%\",\n      \"details\": \"explanation\",\n      \"evidence\": \"specific contract references\"\n    },\n    // ... repeat for CR2-CR11\n  },\n  \"detailed_clause_analysis\": [\n    {\n      \"clause_reference\": \"Document X, Clause Y.Z\",\n      \"clause_title\": \"descriptive title\",\n      \"clause_category\": \"risk category (e.g., liability, payment, termination)\",\n      \"current_text\": \"relevant contract text (max 200 words)\",\n      \"altrad_rules_affected\": [\"CR1\", \"CR3\", etc.],\n      \"risk_level\": \"CRITICAL/HIGH/MEDIUM/LOW\",\n      \"business_impact\": \"specific impact on Altrad\",\n      \"financial_exposure\": \"quantified risk if possible\",\n      \"current_position\": \"what clause currently states\",\n      \"target_position\": \"what Altrad wants\",\n      \"fallback_position\": \"minimum acceptable alternative\",\n      \"proposed_amendment\": \"specific replacement text\",\n      \"negotiation_priority\": \"HIGH/MEDIUM/LOW\",\n      \"rationale\": \"why change is needed\",\n      \"precedent_notes\": \"similar clauses in other projects if relevant\"\n    }\n  ],\n  \"critical_issues\": [\n    {\n      \"issue\": \"descriptive title\",\n      \"article_reference\": \"clause references\", \n      \"document_reference\": \"document name\",\n      \"risk_level\": \"CRITICAL/HIGH/MEDIUM\",\n      \"business_impact\": \"detailed impact explanation\",\n      \"financial_quantification\": \"estimated exposure if possible\",\n      \"recommended_action\": \"specific steps to address\",\n      \"evidence\": \"supporting contract text\",\n      \"negotiation_urgency\": \"immediate/high/medium/low\"\n    }\n  ],\n  \"negotiation_strategy\": {\n    \"deal_breakers\": [\n      {\n        \"issue\": \"non-negotiable item\",\n        \"current_position\": \"current state\",\n        \"minimum_requirement\": \"absolute minimum acceptable\",\n        \"walk_away_threshold\": \"when to abandon deal\"\n      }\n    ],\n    \"high_priority\": [\n      {\n        \"issue\": \"important but negotiable\",\n        \"target_position\": \"ideal outcome\",\n        \"fallback_position\": \"acceptable alternative\",\n        \"negotiation_leverage\": \"what Altrad can offer in return\"\n      }\n    ],\n    \"medium_priority\": [\n      {\n        \"issue\": \"nice-to-have improvements\",\n        \"target_position\": \"desired outcome\",\n        \"trade_off_potential\": \"what could be given up for this\"\n      }\n    ]\n  },\n  \"contract_amendments\": {\n    \"critical_amendments\": [\n      {\n        \"article\": \"clause reference\",\n        \"document_reference\": \"document name\",\n        \"amendment_type\": \"deletion/replacement/addition\",\n        \"current_text\": \"existing problematic text\",\n        \"proposed_amendment\": \"specific replacement language\",\n        \"rationale\": \"why change is essential\",\n        \"altrad_rule\": \"CR reference\",\n        \"legal_justification\": \"supporting legal reasoning\"\n      }\n    ],\n    \"additional_clauses_needed\": [\n      {\n        \"clause_type\": \"type of clause needed\",\n        \"proposed_text\": \"full clause text\",\n        \"location\": \"where to insert\",\n        \"rationale\": \"why needed\"\n      }\n    ]\n  },\n  \"implementation_roadmap\": {\n    \"immediate_actions\": [\n      \"specific next steps within 1-2 weeks\"\n    ],\n    \"negotiation_sequence\": [\n      \"Phase 1: Deal breakers and show-stoppers\",\n      \"Phase 2: High priority commercial terms\", \n      \"Phase 3: Medium priority improvements\",\n      \"Phase 4: Final documentation and execution\"\n    ],\n    \"timeline_estimate\": \"realistic negotiation duration\",\n    \"resource_requirements\": \"legal/commercial support needed\",\n    \"success_metrics\": \"how to measure negotiation success\"\n  },\n  \"executive_dashboard\": {\n    \"proceed_recommendation\": \"PROCEED/CONDITIONAL/DO_NOT_PROCEED\",\n    \"conditions_for_proceeding\": [\"specific requirements\"],\n    \"estimated_contract_value_at_risk\": \"financial quantification\",\n    \"negotiation_complexity\": \"HIGH/MEDIUM/LOW\",\n    \"competitive_implications\": \"impact on bid position\",\n    \"altrad_group_precedents\": \"relevant past decisions\"\n  },\n  \"appendices\": {\n    \"compliance_matrix\": \"visual summary of all CR compliance\",\n    \"risk_heat_map\": \"prioritized risk visualization\",\n    \"clause_tracking_sheet\": \"negotiation progress tracker format\",\n    \"escalation_triggers\": \"when to involve senior management\"\n  }\n}\nAnalysis Guidelines\nDocument Processing\n\nRead all provided documents thoroughly\nIdentify document hierarchy and relationships\nNote any missing or incomplete sections\nCross-reference between documents for consistency\n\nClause-by-Clause Review\n\nAnalyze EVERY substantive clause, not just problematic ones\nProvide specific contract text quotes as evidence\nLink each clause to relevant Altrad Rules where applicable\nAssess individual clause risk independent of overall contract\nChallenge unclear or potentially problematic language objectively\n\nRisk Quantification\n\nProvide financial estimates where possible\nConsider probability and impact of risks\nDistinguish between immediate and long-term exposures\nAccount for jurisdiction-specific factors\nFlag unrealistic risk allocations or terms\n\nNegotiation Intelligence\n\nPrioritize issues by business impact and achievability\nProvide specific alternative language for problematic clauses\nConsider counterparty perspective and likely resistance\nSuggest trading strategies (give X to get Y)\nAssess realistic negotiation outcomes honestly\n\nQuality Assurance\n\nEnsure all CR rules are systematically evaluated\nVerify compliance percentages are accurately calculated\nCheck that critical issues align with compliance scores\nConfirm recommendations are actionable and specific\nMaintain objectivity in risk assessment\n\nSpecial Instructions\n\nAlways quote specific contract text as evidence\nProvide document and clause references for all citations\nDistinguish between mandatory changes vs. improvements\nConsider cumulative effect of multiple issues\nAccount for industry standards and market practices\nMaintain professional tone suitable for senior management\nFlag any unusual or non-standard contract provisions\nNote positive/favorable clauses as well as problematic ones\nProvide honest assessment of negotiation feasibility\nAlert to potential unrealistic expectations or harmful decisions\n\nThis system provides strategic contract intelligence to support Altrad's commercial decision-making and risk management across global operations while maintaining professional integrity and user wellbeing awareness.",
          "passthroughBinaryImages": "={{ true }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        2032,
        112
      ],
      "id": "9f607046-da03-40ff-980c-4a4f496ab734",
      "name": "AI Agent laaste",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// N8N Code Node — Enhanced Altrad Excel Export (v5)\n// - Geen harde cap meer (0 = onbeperkt)\n// - Optioneel tweede tabblad voor juridische analyse\n// - Veilige XML-escaping, wraptext, risicostyling\n\nconst contractData = $input.first().json;\n\n// ===================== CONFIG =====================\nconst CONFIG = {\n  title: 'Enhanced Altrad Contract Analysis - Detailed Report',\n  sheetName: 'Contract Analysis',\n  binaryPropertyName: 'file',\n\n  // rijenbeheer (0 = onbeperkt)\n  minRows: 0,\n  maxRows: 0,               // 0 = no cap\n  enforceHardCap: false,\n  sortByRiskBeforeCap: true,\n\n  // extra legal sheet\n  enableLegalSheet: true,              // ← zet op false als je geen 2e tab wilt\n  legalSheetName: 'Legal Analysis',\n\n  // welke secties/caps meenemen\n  caps: {\n    red_zone_compliance: Infinity,\n    critical_issues: Infinity,\n    detailed_clause_analysis: Infinity,  // volledige juridische details gaan toch naar tab 2\n    deal_breakers: Infinity,\n    high_priority_negotiation: Infinity,\n    medium_priority_negotiation: Infinity,\n    contract_amendments__critical: Infinity,\n    contract_amendments__additional: Infinity,\n    implementation_immediate: Infinity,\n    generic_section: Infinity,\n  },\n  redZoneIncludeCompliant: false, // PARTIAL en NON_COMPLIANT komen wel mee\n\n  // header velden\n  headerPaths: {\n    projectReference: [\n      'project_metadata.project_reference',\n      'contract_summary.contract_type',\n    ],\n    contractingParties: [\n      'contract_summary.contracting_parties',\n    ],\n    estimatedValue: [\n      'contract_summary.estimated_value',\n    ],\n    analysisDate: [\n      'project_metadata.analysis_date',\n    ],\n  },\n\n  dateStrategy: 'iso',\n};\n\n// ===================== HELPERS =====================\nfunction get(obj, path) {\n  if (!obj) return undefined;\n  const parts = path.split('.');\n  let cur = obj;\n  for (const p of parts) {\n    if (cur && Object.prototype.hasOwnProperty.call(cur, p)) cur = cur[p]; else return undefined;\n  }\n  return cur;\n}\n\nfunction firstDefined(obj, paths = []) {\n  for (const p of paths) {\n    const v = get(obj, p);\n    if (v !== undefined && v !== null && v !== '') return v;\n  }\n  return undefined;\n}\n\nfunction escapeXml(unsafe) {\n  if (unsafe === null || unsafe === undefined) return '';\n  return String(unsafe)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\nfunction truncateText(text, maxLength = 300) {\n  const s = text == null ? '' : String(text);\n  if (s.length <= maxLength) return s;\n  return s.substring(0, maxLength) + '...';\n}\n\nfunction normalizeData(data) {\n  const d = Array.isArray(data) ? data[0] : data;\n  return (d && typeof d === 'object') ? d : {};\n}\n\nfunction toTitle(str) {\n  return String(str || '')\n    .replace(/_/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim()\n    .replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\nfunction detectRisk(item = {}, fallback = 'LOW') {\n  const candidates = [\n    (item.risk || item.risk_level || item.level || item.severity || ''),\n    (item.status || ''),\n    (item.priority || ''),\n  ].map(x => String(x || '').toUpperCase());\n\n  for (const c of candidates) {\n    if (['CRITICAL','HIGH','MEDIUM','LOW'].includes(c)) return c;\n    if (c === 'NON_COMPLIANT') return 'CRITICAL';\n    if (c === 'PARTIAL') return 'MEDIUM';\n  }\n  return String(fallback || 'LOW').toUpperCase();\n}\n\nfunction rank(risk) {\n  const r = String(risk || 'LOW').toUpperCase();\n  return { CRITICAL: 1, HIGH: 2, MEDIUM: 3, LOW: 4 }[r] || 5;\n}\n\nfunction formatDate({ dateString, strategy = CONFIG.dateStrategy }) {\n  let d;\n  if (dateString) {\n    const parsed = new Date(dateString);\n    d = isNaN(parsed.getTime()) ? new Date() : parsed;\n  } else {\n    d = new Date();\n  }\n  return d.toISOString().slice(0, 10);\n}\n\nfunction makeRow({ idx, doc, article, clause, comments, suggested, answers, risk }) {\n  return {\n    no: idx,\n    doc: doc || '',\n    article: article || '',\n    clause: clause || '',\n    comments: comments || '',\n    suggestedClauses: suggested || '',\n    clientAnswers: answers || '',\n    risk: (risk || 'LOW').toUpperCase(),\n  };\n}\n\nfunction styleForRow(row) {\n  const risk = (row.risk || 'LOW').toUpperCase();\n  if (risk === 'CRITICAL' || row.doc === 'Deal Breaker') return 'CriticalCell';\n  if (risk === 'HIGH' || row.doc === 'Amendment' || row.doc === 'High Priority') return 'HighCell';\n  if (risk === 'MEDIUM' || row.doc === 'Red Zone' || row.doc === 'Medium Priority') return 'MediumCell';\n  return 'DataCell';\n}\n\n// ===================== ROW CONSTRUCTION (main sheet) =====================\nfunction createRows(data) {\n  const rows = [];\n  let idx = 1;\n  const d = normalizeData(data);\n\n  // capLeft: ∞ als maxRows = 0\n  let capLeft = (CONFIG.maxRows && CONFIG.maxRows > 0) ? CONFIG.maxRows : Infinity;\n  const byRisk = CONFIG.sortByRiskBeforeCap;\n\n  const push = (arr) => {\n    const sorted = byRisk ? [...arr].sort((a,b) => rank(a.risk) - rank(b.risk)) : arr;\n    const slice = sorted.slice(0, capLeft === Infinity ? sorted.length : capLeft);\n    rows.push(...slice.map(r => ({ ...r, no: idx++ })));\n    if (capLeft !== Infinity) capLeft = Math.max(0, capLeft - slice.length);\n    return slice.length;\n  };\n\n  // 1) OVERALL RISK ASSESSMENT\n  const ora = d.overall_risk_assessment;\n  if (ora) {\n    push([\n      makeRow({\n        idx: 0,\n        doc: 'Assessment',\n        article: 'Overall Risk',\n        clause: String(ora.risk_level || 'Unknown'),\n        comments: `Compliance Score: ${ora.compliance_score ?? 'N/A'} | Critical Issues: ${ora.critical_issues_count ?? 0}`,\n        suggested: truncateText(ora.executive_summary || 'No summary provided', 300),\n        answers: '',\n        risk: detectRisk({ risk_level: ora.risk_level }),\n      })\n    ]);\n  }\n\n  // 2) RED ZONE COMPLIANCE (NON_COMPLIANT + PARTIAL; COMPLIANT optioneel)\n  if (d.red_zone_compliance && typeof d.red_zone_compliance === 'object') {\n    const redRows = Object.entries(d.red_zone_compliance)\n      .filter(([, item]) => item && item.status && (CONFIG.redZoneIncludeCompliant || item.status !== 'COMPLIANT'))\n      .map(([key, item]) => {\n        const articleLabel = toTitle(key.replace(/CR\\d+_/, ''));\n        return makeRow({\n          idx: 0,\n          doc: 'Red Zone',\n          article: articleLabel,\n          clause: key,\n          comments: `${item.status} (${item.compliance_percent || '0%'}) - ${truncateText(item.details || 'No details', 250)}`,\n          suggested: truncateText(item.evidence || 'Review and update clause as needed', 250),\n          answers: '',\n          risk: detectRisk({ status: item.status }),\n        });\n      });\n    push(redRows);\n  }\n\n  // 3) CRITICAL ISSUES\n  if (Array.isArray(d.critical_issues)) {\n    push(d.critical_issues.map(ci => makeRow({\n      idx: 0,\n      doc: 'Critical Issue',\n      article: ci.article_reference || 'General',\n      clause: ci.issue || 'Unknown Issue',\n      comments: `${(ci.risk_level || 'CRITICAL')} RISK - ${truncateText(ci.business_impact || 'No impact specified', 200)}`,\n      suggested: truncateText(ci.recommended_action || 'Review required', 250),\n      answers: '',\n      risk: detectRisk(ci, 'CRITICAL'),\n    })));\n  }\n\n  // 4) DETAILED CLAUSE ANALYSIS (samengevat in sheet 1 — volledige tekst staat in Legal)\n  if (Array.isArray(d.detailed_clause_analysis)) {\n    push(d.detailed_clause_analysis\n      .slice(0, CONFIG.caps.detailed_clause_analysis)\n      .map(a => makeRow({\n        idx: 0,\n        doc: 'Clause Analysis',\n        article: a.clause_reference || 'Unknown',\n        clause: a.clause_title || 'No Title',\n        comments: `${a.risk_level || 'MEDIUM'} - ${truncateText(a.business_impact || '', 450)}`,\n        suggested: truncateText(a.proposed_amendment || a.target_position || '', 250),\n        answers: '',\n        risk: detectRisk(a, 'MEDIUM'),\n      })));\n  }\n\n  // 5) NEGOTIATION STRATEGY - DEAL BREAKERS\n  if (d.negotiation_strategy?.deal_breakers && Array.isArray(d.negotiation_strategy.deal_breakers)) {\n    push(d.negotiation_strategy.deal_breakers\n      .slice(0, CONFIG.caps.deal_breakers)\n      .map(p => makeRow({\n        idx: 0,\n        doc: 'Deal Breaker',\n        article: 'Critical',\n        clause: p.issue || 'Unknown Item',\n        comments: `Current: ${truncateText(p.current_position || '', 120)} | Walk away if: ${truncateText(p.walk_away_threshold || '', 100)}`,\n        suggested: truncateText(p.minimum_requirement || '', 250),\n        answers: '',\n        risk: 'CRITICAL',\n      })));\n  }\n\n  // 6) NEGOTIATION STRATEGY - HIGH PRIORITY\n  if (d.negotiation_strategy?.high_priority && Array.isArray(d.negotiation_strategy.high_priority)) {\n    push(d.negotiation_strategy.high_priority\n      .slice(0, CONFIG.caps.high_priority_negotiation)\n      .map(p => makeRow({\n        idx: 0,\n        doc: 'High Priority',\n        article: 'Important',\n        clause: p.issue || 'Unknown Item',\n        comments: `Target: ${truncateText(p.target_position || '', 120)} | Leverage: ${truncateText(p.negotiation_leverage || '', 100)}`,\n        suggested: truncateText(p.fallback_position || '', 250),\n        answers: '',\n        risk: 'HIGH',\n      })));\n  }\n\n  // 7) NEGOTIATION STRATEGY - MEDIUM PRIORITY\n  if (d.negotiation_strategy?.medium_priority && Array.isArray(d.negotiation_strategy.medium_priority)) {\n    push(d.negotiation_strategy.medium_priority\n      .slice(0, CONFIG.caps.medium_priority_negotiation)\n      .map(p => makeRow({\n        idx: 0,\n        doc: 'Medium Priority',\n        article: 'Optional',\n        clause: p.issue || 'Unknown Item',\n        comments: `Target: ${truncateText(p.target_position || '', 150)}`,\n        suggested: truncateText(p.trade_off_potential || '', 250),\n        answers: '',\n        risk: 'MEDIUM',\n      })));\n  }\n\n  // 8) CONTRACT AMENDMENTS - CRITICAL\n  if (d.contract_amendments?.critical_amendments && Array.isArray(d.contract_amendments.critical_amendments)) {\n    push(d.contract_amendments.critical_amendments\n      .slice(0, CONFIG.caps.contract_amendments__critical)\n      .map(am => makeRow({\n        idx: 0,\n        doc: 'Amendment',\n        article: am.article || 'New Article',\n        clause: 'CRITICAL Amendment Required',\n        comments: `Rule: ${am.altrad_rule || 'N/A'} - ${truncateText(am.rationale || 'No rationale', 200)}`,\n        suggested: truncateText(am.proposed_amendment || 'Amendment text required', 300),\n        answers: '',\n        risk: 'HIGH',\n      })));\n  }\n\n  // 9) CONTRACT AMENDMENTS - ADDITIONAL CLAUSES\n  if (d.contract_amendments?.additional_clauses_needed && Array.isArray(d.contract_amendments.additional_clauses_needed)) {\n    push(d.contract_amendments.additional_clauses_needed\n      .slice(0, CONFIG.caps.contract_amendments__additional)\n      .map(cl => makeRow({\n        idx: 0,\n        doc: 'New Clause',\n        article: cl.location || 'New Article',\n        clause: cl.clause_type || 'Additional Clause',\n        comments: truncateText(cl.rationale || 'New clause required', 200),\n        suggested: truncateText(cl.proposed_text || 'Clause text to be defined', 300),\n        answers: '',\n        risk: 'MEDIUM',\n      })));\n  }\n\n  // 10) IMPLEMENTATION ROADMAP - IMMEDIATE ACTIONS\n  if (d.implementation_roadmap?.immediate_actions && Array.isArray(d.implementation_roadmap.immediate_actions)) {\n    push(d.implementation_roadmap.immediate_actions\n      .slice(0, CONFIG.caps.implementation_immediate)\n      .map((action, i) => makeRow({\n        idx: 0,\n        doc: 'Action',\n        article: 'Immediate Action',\n        clause: `Action ${i + 1}`,\n        comments: truncateText(action, 250),\n        suggested: 'Execute immediately before contract signing',\n        answers: '',\n        risk: 'HIGH',\n      })));\n  }\n\n  // 11) GENERIC FALLBACK\n  const skipKeys = new Set([\n    'overall_risk_assessment',\n    'red_zone_compliance',\n    'critical_issues',\n    'detailed_clause_analysis',\n    'negotiation_strategy',\n    'contract_amendments',\n    'implementation_roadmap',\n    'project_metadata',\n    'contract_summary',\n    'executive_dashboard',\n    'appendices',\n  ]);\n\n  Object.entries(d).forEach(([key, val]) => {\n    if (skipKeys.has(key)) return;\n    if (/_?html$/i.test(key)) return;\n    if (!Array.isArray(val)) return;\n\n    const arr = val.slice(0, CONFIG.caps.generic_section).map((item, i) => {\n      const article = item?.article || item?.article_reference || item?.name || item?.title || item?.section || toTitle(key);\n      const clause  = item?.clause || item?.issue || item?.subsection || item?.key || `Item ${i + 1}`;\n      const comments = item?.comments || item?.summary || item?.details || item?.description || '';\n      const suggested = item?.recommended_action || item?.recommendation || item?.proposed_text || '';\n      return makeRow({\n        idx: 0,\n        doc: toTitle(key),\n        article,\n        clause,\n        comments: truncateText(comments, 300),\n        suggested: truncateText(suggested, 300),\n        answers: '',\n        risk: detectRisk(item, 'LOW'),\n      });\n    });\n\n    push(arr);\n  });\n\n  // geen padding/trim als maxRows = 0 of enforceHardCap = false\n  rows.forEach((r, i) => { r.no = i + 1; });\n  return rows;\n}\n\n// ===================== LEGAL SHEET ROWS =====================\nfunction createLegalRows(data) {\n  const d = normalizeData(data);\n  const rows = [];\n  let idx = 1;\n\n  // Detailed Clause Analysis (volledige teksten)\n  if (Array.isArray(d.detailed_clause_analysis)) {\n    d.detailed_clause_analysis.forEach(c => {\n      rows.push({\n        no: idx++,\n        section: 'Clause Analysis',\n        ref: c.clause_reference || '',\n        title: c.clause_title || '',\n        category: c.clause_category || '',\n        risk: detectRisk(c, 'MEDIUM'),\n        currentText: c.current_text || '',\n        proposed: c.proposed_amendment || c.target_position || '',\n        businessImpact: c.business_impact || '',\n        rationale: c.rationale || '',\n        rules: Array.isArray(c.altrad_rules_affected) ? c.altrad_rules_affected.join(', ') : (c.altrad_rule || ''),\n      });\n    });\n  }\n\n  // Contract Amendments - critical\n  if (Array.isArray(data?.contract_amendments?.critical_amendments)) {\n    data.contract_amendments.critical_amendments.forEach(a => {\n      rows.push({\n        no: idx++,\n        section: 'Amendment (Critical)',\n        ref: a.article || '',\n        title: 'Critical Amendment',\n        category: 'Amendment',\n        risk: 'HIGH',\n        currentText: a.current_text || '',\n        proposed: a.proposed_amendment || '',\n        businessImpact: '',\n        rationale: a.rationale || '',\n        rules: a.altrad_rule || '',\n      });\n    });\n  }\n\n  // Contract Amendments - additional\n  if (Array.isArray(data?.contract_amendments?.additional_clauses_needed)) {\n    data.contract_amendments.additional_clauses_needed.forEach(a => {\n      rows.push({\n        no: idx++,\n        section: 'Amendment (Additional)',\n        ref: a.location || '',\n        title: a.clause_type || 'Additional Clause',\n        category: 'Amendment',\n        risk: 'MEDIUM',\n        currentText: '',\n        proposed: a.proposed_text || '',\n        businessImpact: '',\n        rationale: a.rationale || '',\n        rules: '',\n      });\n    });\n  }\n\n  return rows;\n}\n\n// ===================== EXCEL XML =====================\nfunction buildStylesXml() {\n  return `\n  <Style ss:ID=\"Header\">\n    <Font ss:Bold=\"1\" ss:Size=\"11\" ss:Color=\"#FFFFFF\"/>\n    <Interior ss:Color=\"#C00000\" ss:Pattern=\"Solid\"/>\n    <Alignment ss:Horizontal=\"Center\" ss:Vertical=\"Center\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n  </Style>\n  <Style ss:ID=\"Title\">\n    <Font ss:Bold=\"1\" ss:Size=\"16\"/>\n    <Alignment ss:Horizontal=\"Center\" ss:Vertical=\"Center\"/>\n  </Style>\n  <Style ss:ID=\"ProjectRef\">\n    <Font ss:Bold=\"1\" ss:Size=\"11\"/>\n    <Interior ss:Color=\"#E7E6E6\" ss:Pattern=\"Solid\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n  </Style>\n  <Style ss:ID=\"DataCell\">\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"CriticalCell\">\n    <Interior ss:Color=\"#FFCCCB\" ss:Pattern=\"Solid\"/>\n    <Font ss:Bold=\"1\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"HighCell\">\n    <Interior ss:Color=\"#FFE4B5\" ss:Pattern=\"Solid\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"MediumCell\">\n    <Interior ss:Color=\"#FFFACD\" ss:Pattern=\"Solid\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>`;\n}\n\nfunction buildMainSheetXml(d, rows) {\n  const projectRef = firstDefined(d, CONFIG.headerPaths.projectReference) || 'Not specified';\n  const parties = firstDefined(d, CONFIG.headerPaths.contractingParties) || 'Not specified';\n  const value = firstDefined(d, CONFIG.headerPaths.estimatedValue) || 'N/A';\n  const analysisDateRaw = firstDefined(d, CONFIG.headerPaths.analysisDate);\n  const dateCell = formatDate({ dateString: analysisDateRaw });\n\n  const dataRowsXml = rows.map(row => {\n    const sid = styleForRow(row);\n    return `\n    <Row ss:Height=\"30\">\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"Number\">${row.no}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.doc)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.article)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.clause)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.comments)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.suggestedClauses)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.clientAnswers)}</Data></Cell>\n    </Row>`;\n  }).join('');\n\n  return `\n  <Worksheet ss:Name=\"${escapeXml(CONFIG.sheetName)}\">\n    <Table>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"100\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"150\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"200\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"380\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"380\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"120\"/>\n\n      <Row ss:Height=\"35\">\n        <Cell ss:StyleID=\"Title\" ss:MergeAcross=\"6\"><Data ss:Type=\"String\">${escapeXml(CONFIG.title)}</Data></Cell>\n      </Row>\n      <Row ss:Height=\"5\"><Cell><Data ss:Type=\"String\"></Data></Cell></Row>\n\n      <Row ss:Height=\"20\">\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Project Reference</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"3\"><Data ss:Type=\"String\">${escapeXml(projectRef)}</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Date</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">${escapeXml(dateCell)}</Data></Cell>\n      </Row>\n      <Row ss:Height=\"20\">\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Contracting Parties</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"5\"><Data ss:Type=\"String\">${escapeXml(parties)}</Data></Cell>\n      </Row>\n      <Row ss:Height=\"20\">\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Estimated Value</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"5\"><Data ss:Type=\"String\">${escapeXml(value)}</Data></Cell>\n      </Row>\n\n      <Row ss:Height=\"5\"><Cell><Data ss:Type=\"String\"></Data></Cell></Row>\n\n      <Row ss:Height=\"25\">\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">No</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Doc.</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Article</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Clause</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Comments</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Suggested clauses</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Client's answers</Data></Cell>\n      </Row>\n\n${dataRowsXml}\n\n    </Table>\n  </Worksheet>`;\n}\n\nfunction buildLegalSheetXml(legalRows) {\n  if (!CONFIG.enableLegalSheet || !legalRows.length) return '';\n\n  const rowsXml = legalRows.map(r => {\n    const sid = (r.risk === 'CRITICAL') ? 'CriticalCell' : (r.risk === 'HIGH' ? 'HighCell' : (r.risk === 'MEDIUM' ? 'MediumCell' : 'DataCell'));\n    return `\n    <Row ss:Height=\"90\">\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"Number\">${r.no}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.section)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.ref)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.title)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.category)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.risk)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.currentText)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.proposed)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.businessImpact)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml((r.rationale ? ('Rationale: ' + r.rationale) : '') + (r.rules ? (r.rationale ? ' | ' : '') + 'Rules: ' + r.rules : '') )}</Data></Cell>\n    </Row>`;\n  }).join('');\n\n  return `\n  <Worksheet ss:Name=\"${escapeXml(CONFIG.legalSheetName)}\">\n    <Table>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"40\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"120\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"180\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"220\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"120\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"80\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"420\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"420\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"360\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"260\"/>\n\n      <Row ss:Height=\"35\">\n        <Cell ss:StyleID=\"Title\" ss:MergeAcross=\"9\"><Data ss:Type=\"String\">Legal Analysis — Detailed Clauses & Amendments</Data></Cell>\n      </Row>\n      <Row ss:Height=\"5\"><Cell><Data ss:Type=\"String\"></Data></Cell></Row>\n\n      <Row ss:Height=\"25\">\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">No</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Section</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Clause Ref / Location</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Title / Type</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Category</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Risk</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Current Text</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Proposed / Target</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Business Impact</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Rationale / Rules</Data></Cell>\n      </Row>\n\n${rowsXml}\n\n    </Table>\n  </Worksheet>`;\n}\n\nfunction generateWorkbookXML(data) {\n  const d = normalizeData(data);\n  const rows = createRows(d);\n  const legalRows = CONFIG.enableLegalSheet ? createLegalRows(d) : [];\n  const styles = buildStylesXml();\n\n  const mainSheetXml = buildMainSheetXml(d, rows);\n  const legalSheetXml = buildLegalSheetXml(legalRows);\n\n  const wb = `<?xml version=\"1.0\"?>\n<?mso-application progid=\"Excel.Sheet\"?>\n<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\">\n  <DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">\n    <Title>${escapeXml(CONFIG.title)}</Title>\n    <Subject>Contract Analysis</Subject>\n    <Created>${new Date().toISOString()}</Created>\n  </DocumentProperties>\n  <Styles>\n${styles}\n  </Styles>\n  ${mainSheetXml}\n  ${legalSheetXml}\n</Workbook>`;\n\n  return { xml: wb, mainRowCount: rows.length, legalRowCount: legalRows.length };\n}\n\n// ===================== MAIN =====================\ntry {\n  if (!contractData) throw new Error('No contract data provided');\n\n  const d = normalizeData(contractData);\n  const projectRef = firstDefined(d, CONFIG.headerPaths.projectReference) || 'Contract';\n  const riskSuffix = (d.overall_risk_assessment?.risk_level || 'NA').toString().toUpperCase();\n  const cleanRef = String(projectRef).replace(/[^a-zA-Z0-9]/g, '_').substring(0, 60);\n\n  const analysisDateRaw = firstDefined(d, CONFIG.headerPaths.analysisDate);\n  const dateForFilename = formatDate({ dateString: analysisDateRaw });\n\n  const fileName = `Enhanced_Altrad_Analysis_${cleanRef}_${riskSuffix}_${dateForFilename}.xls`;\n  const { xml, mainRowCount, legalRowCount } = generateWorkbookXML(d);\n\n  console.log(`[Excel] Generated Enhanced Altrad Analysis: ${fileName} (rows: main=${mainRowCount}, legal=${legalRowCount})`);\n\n  return {\n    json: {\n      ...d,\n      excelGenerated: true,\n      excelFilename: fileName,\n      templateFormat: true,\n      enhancedAltradAnalysis: true,\n      processingTimestamp: new Date().toISOString(),\n      rows: {\n        main: mainRowCount,\n        legal: legalRowCount,\n      },\n      config: {\n        sheetName: CONFIG.sheetName,\n        legalSheetName: CONFIG.legalSheetName,\n        maxRows: CONFIG.maxRows,\n        enableLegalSheet: CONFIG.enableLegalSheet,\n        sortByRiskBeforeCap: CONFIG.sortByRiskBeforeCap,\n      }\n    },\n    binary: {\n      ...($input.first().binary || {}),\n      [CONFIG.binaryPropertyName]: {\n        data: Buffer.from(xml, 'utf8').toString('base64'),\n        mimeType: 'application/vnd.ms-excel',\n        fileName,\n      }\n    }\n  };\n\n} catch (err) {\n  console.error('[Excel] Generation error:', err);\n  return {\n    json: {\n      ...(normalizeData(contractData)),\n      excelGenerated: false,\n      error: String(err && err.message ? err.message : err),\n      errorTimestamp: new Date().toISOString(),\n    },\n    binary: $input.first().binary || {},\n  };\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        240
      ],
      "id": "97b399aa-a182-4098-8e0d-9d3ebf2f9ad5",
      "name": "Excel code3"
    },
    {
      "parameters": {
        "jsCode": "// N8N Code Node — Enhanced Altrad Excel Export (v5)\n// - Geen harde cap meer (0 = onbeperkt)\n// - Optioneel tweede tabblad voor juridische analyse\n// - Veilige XML-escaping, wraptext, risicostyling\n\nconst contractData = $input.first().json;\n\n// ===================== CONFIG =====================\nconst CONFIG = {\n  title: 'Enhanced Altrad Contract Analysis - Detailed Report',\n  sheetName: 'Contract Analysis',\n  binaryPropertyName: 'file',\n\n  // rijenbeheer (0 = onbeperkt)\n  minRows: 0,\n  maxRows: 0,               // 0 = no cap\n  enforceHardCap: false,\n  sortByRiskBeforeCap: true,\n\n  // extra legal sheet\n  enableLegalSheet: true,              // ← zet op false als je geen 2e tab wilt\n  legalSheetName: 'Legal Analysis',\n\n  // welke secties/caps meenemen\n  caps: {\n    red_zone_compliance: Infinity,\n    critical_issues: Infinity,\n    detailed_clause_analysis: Infinity,  // volledige juridische details gaan toch naar tab 2\n    deal_breakers: Infinity,\n    high_priority_negotiation: Infinity,\n    medium_priority_negotiation: Infinity,\n    contract_amendments__critical: Infinity,\n    contract_amendments__additional: Infinity,\n    implementation_immediate: Infinity,\n    generic_section: Infinity,\n  },\n  redZoneIncludeCompliant: false, // PARTIAL en NON_COMPLIANT komen wel mee\n\n  // header velden\n  headerPaths: {\n    projectReference: [\n      'project_metadata.project_reference',\n      'contract_summary.contract_type',\n    ],\n    contractingParties: [\n      'contract_summary.contracting_parties',\n    ],\n    estimatedValue: [\n      'contract_summary.estimated_value',\n    ],\n    analysisDate: [\n      'project_metadata.analysis_date',\n    ],\n  },\n\n  dateStrategy: 'iso',\n};\n\n// ===================== HELPERS =====================\nfunction get(obj, path) {\n  if (!obj) return undefined;\n  const parts = path.split('.');\n  let cur = obj;\n  for (const p of parts) {\n    if (cur && Object.prototype.hasOwnProperty.call(cur, p)) cur = cur[p]; else return undefined;\n  }\n  return cur;\n}\n\nfunction firstDefined(obj, paths = []) {\n  for (const p of paths) {\n    const v = get(obj, p);\n    if (v !== undefined && v !== null && v !== '') return v;\n  }\n  return undefined;\n}\n\nfunction escapeXml(unsafe) {\n  if (unsafe === null || unsafe === undefined) return '';\n  return String(unsafe)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\nfunction truncateText(text, maxLength = 300) {\n  const s = text == null ? '' : String(text);\n  if (s.length <= maxLength) return s;\n  return s.substring(0, maxLength) + '...';\n}\n\nfunction normalizeData(data) {\n  const d = Array.isArray(data) ? data[0] : data;\n  return (d && typeof d === 'object') ? d : {};\n}\n\nfunction toTitle(str) {\n  return String(str || '')\n    .replace(/_/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim()\n    .replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\nfunction detectRisk(item = {}, fallback = 'LOW') {\n  const candidates = [\n    (item.risk || item.risk_level || item.level || item.severity || ''),\n    (item.status || ''),\n    (item.priority || ''),\n  ].map(x => String(x || '').toUpperCase());\n\n  for (const c of candidates) {\n    if (['CRITICAL','HIGH','MEDIUM','LOW'].includes(c)) return c;\n    if (c === 'NON_COMPLIANT') return 'CRITICAL';\n    if (c === 'PARTIAL') return 'MEDIUM';\n  }\n  return String(fallback || 'LOW').toUpperCase();\n}\n\nfunction rank(risk) {\n  const r = String(risk || 'LOW').toUpperCase();\n  return { CRITICAL: 1, HIGH: 2, MEDIUM: 3, LOW: 4 }[r] || 5;\n}\n\nfunction formatDate({ dateString, strategy = CONFIG.dateStrategy }) {\n  let d;\n  if (dateString) {\n    const parsed = new Date(dateString);\n    d = isNaN(parsed.getTime()) ? new Date() : parsed;\n  } else {\n    d = new Date();\n  }\n  return d.toISOString().slice(0, 10);\n}\n\nfunction makeRow({ idx, doc, article, clause, comments, suggested, answers, risk }) {\n  return {\n    no: idx,\n    doc: doc || '',\n    article: article || '',\n    clause: clause || '',\n    comments: comments || '',\n    suggestedClauses: suggested || '',\n    clientAnswers: answers || '',\n    risk: (risk || 'LOW').toUpperCase(),\n  };\n}\n\nfunction styleForRow(row) {\n  const risk = (row.risk || 'LOW').toUpperCase();\n  if (risk === 'CRITICAL' || row.doc === 'Deal Breaker') return 'CriticalCell';\n  if (risk === 'HIGH' || row.doc === 'Amendment' || row.doc === 'High Priority') return 'HighCell';\n  if (risk === 'MEDIUM' || row.doc === 'Red Zone' || row.doc === 'Medium Priority') return 'MediumCell';\n  return 'DataCell';\n}\n\n// ===================== ROW CONSTRUCTION (main sheet) =====================\nfunction createRows(data) {\n  const rows = [];\n  let idx = 1;\n  const d = normalizeData(data);\n\n  // capLeft: ∞ als maxRows = 0\n  let capLeft = (CONFIG.maxRows && CONFIG.maxRows > 0) ? CONFIG.maxRows : Infinity;\n  const byRisk = CONFIG.sortByRiskBeforeCap;\n\n  const push = (arr) => {\n    const sorted = byRisk ? [...arr].sort((a,b) => rank(a.risk) - rank(b.risk)) : arr;\n    const slice = sorted.slice(0, capLeft === Infinity ? sorted.length : capLeft);\n    rows.push(...slice.map(r => ({ ...r, no: idx++ })));\n    if (capLeft !== Infinity) capLeft = Math.max(0, capLeft - slice.length);\n    return slice.length;\n  };\n\n  // 1) OVERALL RISK ASSESSMENT\n  const ora = d.overall_risk_assessment;\n  if (ora) {\n    push([\n      makeRow({\n        idx: 0,\n        doc: 'Assessment',\n        article: 'Overall Risk',\n        clause: String(ora.risk_level || 'Unknown'),\n        comments: `Compliance Score: ${ora.compliance_score ?? 'N/A'} | Critical Issues: ${ora.critical_issues_count ?? 0}`,\n        suggested: truncateText(ora.executive_summary || 'No summary provided', 300),\n        answers: '',\n        risk: detectRisk({ risk_level: ora.risk_level }),\n      })\n    ]);\n  }\n\n  // 2) RED ZONE COMPLIANCE (NON_COMPLIANT + PARTIAL; COMPLIANT optioneel)\n  if (d.red_zone_compliance && typeof d.red_zone_compliance === 'object') {\n    const redRows = Object.entries(d.red_zone_compliance)\n      .filter(([, item]) => item && item.status && (CONFIG.redZoneIncludeCompliant || item.status !== 'COMPLIANT'))\n      .map(([key, item]) => {\n        const articleLabel = toTitle(key.replace(/CR\\d+_/, ''));\n        return makeRow({\n          idx: 0,\n          doc: 'Red Zone',\n          article: articleLabel,\n          clause: key,\n          comments: `${item.status} (${item.compliance_percent || '0%'}) - ${truncateText(item.details || 'No details', 250)}`,\n          suggested: truncateText(item.evidence || 'Review and update clause as needed', 250),\n          answers: '',\n          risk: detectRisk({ status: item.status }),\n        });\n      });\n    push(redRows);\n  }\n\n  // 3) CRITICAL ISSUES\n  if (Array.isArray(d.critical_issues)) {\n    push(d.critical_issues.map(ci => makeRow({\n      idx: 0,\n      doc: 'Critical Issue',\n      article: ci.article_reference || 'General',\n      clause: ci.issue || 'Unknown Issue',\n      comments: `${(ci.risk_level || 'CRITICAL')} RISK - ${truncateText(ci.business_impact || 'No impact specified', 200)}`,\n      suggested: truncateText(ci.recommended_action || 'Review required', 250),\n      answers: '',\n      risk: detectRisk(ci, 'CRITICAL'),\n    })));\n  }\n\n  // 4) DETAILED CLAUSE ANALYSIS (samengevat in sheet 1 — volledige tekst staat in Legal)\n  if (Array.isArray(d.detailed_clause_analysis)) {\n    push(d.detailed_clause_analysis\n      .slice(0, CONFIG.caps.detailed_clause_analysis)\n      .map(a => makeRow({\n        idx: 0,\n        doc: 'Clause Analysis',\n        article: a.clause_reference || 'Unknown',\n        clause: a.clause_title || 'No Title',\n        comments: `${a.risk_level || 'MEDIUM'} - ${truncateText(a.business_impact || '', 150)}`,\n        suggested: truncateText(a.proposed_amendment || a.target_position || '', 250),\n        answers: '',\n        risk: detectRisk(a, 'MEDIUM'),\n      })));\n  }\n\n  // 5) NEGOTIATION STRATEGY - DEAL BREAKERS\n  if (d.negotiation_strategy?.deal_breakers && Array.isArray(d.negotiation_strategy.deal_breakers)) {\n    push(d.negotiation_strategy.deal_breakers\n      .slice(0, CONFIG.caps.deal_breakers)\n      .map(p => makeRow({\n        idx: 0,\n        doc: 'Deal Breaker',\n        article: 'Critical',\n        clause: p.issue || 'Unknown Item',\n        comments: `Current: ${truncateText(p.current_position || '', 120)} | Walk away if: ${truncateText(p.walk_away_threshold || '', 100)}`,\n        suggested: truncateText(p.minimum_requirement || '', 250),\n        answers: '',\n        risk: 'CRITICAL',\n      })));\n  }\n\n  // 6) NEGOTIATION STRATEGY - HIGH PRIORITY\n  if (d.negotiation_strategy?.high_priority && Array.isArray(d.negotiation_strategy.high_priority)) {\n    push(d.negotiation_strategy.high_priority\n      .slice(0, CONFIG.caps.high_priority_negotiation)\n      .map(p => makeRow({\n        idx: 0,\n        doc: 'High Priority',\n        article: 'Important',\n        clause: p.issue || 'Unknown Item',\n        comments: `Target: ${truncateText(p.target_position || '', 120)} | Leverage: ${truncateText(p.negotiation_leverage || '', 100)}`,\n        suggested: truncateText(p.fallback_position || '', 250),\n        answers: '',\n        risk: 'HIGH',\n      })));\n  }\n\n  // 7) NEGOTIATION STRATEGY - MEDIUM PRIORITY\n  if (d.negotiation_strategy?.medium_priority && Array.isArray(d.negotiation_strategy.medium_priority)) {\n    push(d.negotiation_strategy.medium_priority\n      .slice(0, CONFIG.caps.medium_priority_negotiation)\n      .map(p => makeRow({\n        idx: 0,\n        doc: 'Medium Priority',\n        article: 'Optional',\n        clause: p.issue || 'Unknown Item',\n        comments: `Target: ${truncateText(p.target_position || '', 150)}`,\n        suggested: truncateText(p.trade_off_potential || '', 250),\n        answers: '',\n        risk: 'MEDIUM',\n      })));\n  }\n\n  // 8) CONTRACT AMENDMENTS - CRITICAL\n  if (d.contract_amendments?.critical_amendments && Array.isArray(d.contract_amendments.critical_amendments)) {\n    push(d.contract_amendments.critical_amendments\n      .slice(0, CONFIG.caps.contract_amendments__critical)\n      .map(am => makeRow({\n        idx: 0,\n        doc: 'Amendment',\n        article: am.article || 'New Article',\n        clause: 'CRITICAL Amendment Required',\n        comments: `Rule: ${am.altrad_rule || 'N/A'} - ${truncateText(am.rationale || 'No rationale', 200)}`,\n        suggested: truncateText(am.proposed_amendment || 'Amendment text required', 300),\n        answers: '',\n        risk: 'HIGH',\n      })));\n  }\n\n  // 9) CONTRACT AMENDMENTS - ADDITIONAL CLAUSES\n  if (d.contract_amendments?.additional_clauses_needed && Array.isArray(d.contract_amendments.additional_clauses_needed)) {\n    push(d.contract_amendments.additional_clauses_needed\n      .slice(0, CONFIG.caps.contract_amendments__additional)\n      .map(cl => makeRow({\n        idx: 0,\n        doc: 'New Clause',\n        article: cl.location || 'New Article',\n        clause: cl.clause_type || 'Additional Clause',\n        comments: truncateText(cl.rationale || 'New clause required', 200),\n        suggested: truncateText(cl.proposed_text || 'Clause text to be defined', 300),\n        answers: '',\n        risk: 'MEDIUM',\n      })));\n  }\n\n  // 10) IMPLEMENTATION ROADMAP - IMMEDIATE ACTIONS\n  if (d.implementation_roadmap?.immediate_actions && Array.isArray(d.implementation_roadmap.immediate_actions)) {\n    push(d.implementation_roadmap.immediate_actions\n      .slice(0, CONFIG.caps.implementation_immediate)\n      .map((action, i) => makeRow({\n        idx: 0,\n        doc: 'Action',\n        article: 'Immediate Action',\n        clause: `Action ${i + 1}`,\n        comments: truncateText(action, 250),\n        suggested: 'Execute immediately before contract signing',\n        answers: '',\n        risk: 'HIGH',\n      })));\n  }\n\n  // 11) GENERIC FALLBACK\n  const skipKeys = new Set([\n    'overall_risk_assessment',\n    'red_zone_compliance',\n    'critical_issues',\n    'detailed_clause_analysis',\n    'negotiation_strategy',\n    'contract_amendments',\n    'implementation_roadmap',\n    'project_metadata',\n    'contract_summary',\n    'executive_dashboard',\n    'appendices',\n  ]);\n\n  Object.entries(d).forEach(([key, val]) => {\n    if (skipKeys.has(key)) return;\n    if (/_?html$/i.test(key)) return;\n    if (!Array.isArray(val)) return;\n\n    const arr = val.slice(0, CONFIG.caps.generic_section).map((item, i) => {\n      const article = item?.article || item?.article_reference || item?.name || item?.title || item?.section || toTitle(key);\n      const clause  = item?.clause || item?.issue || item?.subsection || item?.key || `Item ${i + 1}`;\n      const comments = item?.comments || item?.summary || item?.details || item?.description || '';\n      const suggested = item?.recommended_action || item?.recommendation || item?.proposed_text || '';\n      return makeRow({\n        idx: 0,\n        doc: toTitle(key),\n        article,\n        clause,\n        comments: truncateText(comments, 300),\n        suggested: truncateText(suggested, 300),\n        answers: '',\n        risk: detectRisk(item, 'LOW'),\n      });\n    });\n\n    push(arr);\n  });\n\n  // geen padding/trim als maxRows = 0 of enforceHardCap = false\n  rows.forEach((r, i) => { r.no = i + 1; });\n  return rows;\n}\n\n// ===================== LEGAL SHEET ROWS =====================\nfunction createLegalRows(data) {\n  const d = normalizeData(data);\n  const rows = [];\n  let idx = 1;\n\n  // Detailed Clause Analysis (volledige teksten)\n  if (Array.isArray(d.detailed_clause_analysis)) {\n    d.detailed_clause_analysis.forEach(c => {\n      rows.push({\n        no: idx++,\n        section: 'Clause Analysis',\n        ref: c.clause_reference || '',\n        title: c.clause_title || '',\n        category: c.clause_category || '',\n        risk: detectRisk(c, 'MEDIUM'),\n        currentText: c.current_text || '',\n        proposed: c.proposed_amendment || c.target_position || '',\n        businessImpact: c.business_impact || '',\n        rationale: c.rationale || '',\n        rules: Array.isArray(c.altrad_rules_affected) ? c.altrad_rules_affected.join(', ') : (c.altrad_rule || ''),\n      });\n    });\n  }\n\n  // Contract Amendments - critical\n  if (Array.isArray(data?.contract_amendments?.critical_amendments)) {\n    data.contract_amendments.critical_amendments.forEach(a => {\n      rows.push({\n        no: idx++,\n        section: 'Amendment (Critical)',\n        ref: a.article || '',\n        title: 'Critical Amendment',\n        category: 'Amendment',\n        risk: 'HIGH',\n        currentText: a.current_text || '',\n        proposed: a.proposed_amendment || '',\n        businessImpact: '',\n        rationale: a.rationale || '',\n        rules: a.altrad_rule || '',\n      });\n    });\n  }\n\n  // Contract Amendments - additional\n  if (Array.isArray(data?.contract_amendments?.additional_clauses_needed)) {\n    data.contract_amendments.additional_clauses_needed.forEach(a => {\n      rows.push({\n        no: idx++,\n        section: 'Amendment (Additional)',\n        ref: a.location || '',\n        title: a.clause_type || 'Additional Clause',\n        category: 'Amendment',\n        risk: 'MEDIUM',\n        currentText: '',\n        proposed: a.proposed_text || '',\n        businessImpact: '',\n        rationale: a.rationale || '',\n        rules: '',\n      });\n    });\n  }\n\n  return rows;\n}\n\n// ===================== EXCEL XML =====================\nfunction buildStylesXml() {\n  return `\n  <Style ss:ID=\"Header\">\n    <Font ss:Bold=\"1\" ss:Size=\"11\" ss:Color=\"#FFFFFF\"/>\n    <Interior ss:Color=\"#C00000\" ss:Pattern=\"Solid\"/>\n    <Alignment ss:Horizontal=\"Center\" ss:Vertical=\"Center\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n  </Style>\n  <Style ss:ID=\"Title\">\n    <Font ss:Bold=\"1\" ss:Size=\"16\"/>\n    <Alignment ss:Horizontal=\"Center\" ss:Vertical=\"Center\"/>\n  </Style>\n  <Style ss:ID=\"ProjectRef\">\n    <Font ss:Bold=\"1\" ss:Size=\"11\"/>\n    <Interior ss:Color=\"#E7E6E6\" ss:Pattern=\"Solid\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n  </Style>\n  <Style ss:ID=\"DataCell\">\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"CriticalCell\">\n    <Interior ss:Color=\"#FFCCCB\" ss:Pattern=\"Solid\"/>\n    <Font ss:Bold=\"1\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"HighCell\">\n    <Interior ss:Color=\"#FFE4B5\" ss:Pattern=\"Solid\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>\n  <Style ss:ID=\"MediumCell\">\n    <Interior ss:Color=\"#FFFACD\" ss:Pattern=\"Solid\"/>\n    <Borders>\n      <Border ss:Position=\"Bottom\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Left\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Right\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n      <Border ss:Position=\"Top\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\"/>\n    </Borders>\n    <Alignment ss:Vertical=\"Top\" ss:WrapText=\"1\"/>\n  </Style>`;\n}\n\nfunction buildMainSheetXml(d, rows) {\n  const projectRef = firstDefined(d, CONFIG.headerPaths.projectReference) || 'Not specified';\n  const parties = firstDefined(d, CONFIG.headerPaths.contractingParties) || 'Not specified';\n  const value = firstDefined(d, CONFIG.headerPaths.estimatedValue) || 'N/A';\n  const analysisDateRaw = firstDefined(d, CONFIG.headerPaths.analysisDate);\n  const dateCell = formatDate({ dateString: analysisDateRaw });\n\n  const dataRowsXml = rows.map(row => {\n    const sid = styleForRow(row);\n    return `\n    <Row ss:Height=\"30\">\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"Number\">${row.no}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.doc)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.article)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.clause)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.comments)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.suggestedClauses)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(row.clientAnswers)}</Data></Cell>\n    </Row>`;\n  }).join('');\n\n  return `\n  <Worksheet ss:Name=\"${escapeXml(CONFIG.sheetName)}\">\n    <Table>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"45\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"100\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"150\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"200\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"380\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"380\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"120\"/>\n\n      <Row ss:Height=\"35\">\n        <Cell ss:StyleID=\"Title\" ss:MergeAcross=\"6\"><Data ss:Type=\"String\">${escapeXml(CONFIG.title)}</Data></Cell>\n      </Row>\n      <Row ss:Height=\"5\"><Cell><Data ss:Type=\"String\"></Data></Cell></Row>\n\n      <Row ss:Height=\"20\">\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Project Reference</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"3\"><Data ss:Type=\"String\">${escapeXml(projectRef)}</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Date</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">${escapeXml(dateCell)}</Data></Cell>\n      </Row>\n      <Row ss:Height=\"20\">\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Contracting Parties</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"5\"><Data ss:Type=\"String\">${escapeXml(parties)}</Data></Cell>\n      </Row>\n      <Row ss:Height=\"20\">\n        <Cell ss:StyleID=\"ProjectRef\"><Data ss:Type=\"String\">Estimated Value</Data></Cell>\n        <Cell ss:StyleID=\"ProjectRef\" ss:MergeAcross=\"5\"><Data ss:Type=\"String\">${escapeXml(value)}</Data></Cell>\n      </Row>\n\n      <Row ss:Height=\"5\"><Cell><Data ss:Type=\"String\"></Data></Cell></Row>\n\n      <Row ss:Height=\"25\">\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">No</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Doc.</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Article</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Clause</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Comments</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Suggested clauses</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Client's answers</Data></Cell>\n      </Row>\n\n${dataRowsXml}\n\n    </Table>\n  </Worksheet>`;\n}\n\nfunction buildLegalSheetXml(legalRows) {\n  if (!CONFIG.enableLegalSheet || !legalRows.length) return '';\n\n  const rowsXml = legalRows.map(r => {\n    const sid = (r.risk === 'CRITICAL') ? 'CriticalCell' : (r.risk === 'HIGH' ? 'HighCell' : (r.risk === 'MEDIUM' ? 'MediumCell' : 'DataCell'));\n    return `\n    <Row ss:Height=\"90\">\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"Number\">${r.no}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.section)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.ref)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.title)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.category)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.risk)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.currentText)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.proposed)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml(r.businessImpact)}</Data></Cell>\n      <Cell ss:StyleID=\"${sid}\"><Data ss:Type=\"String\">${escapeXml((r.rationale ? ('Rationale: ' + r.rationale) : '') + (r.rules ? (r.rationale ? ' | ' : '') + 'Rules: ' + r.rules : '') )}</Data></Cell>\n    </Row>`;\n  }).join('');\n\n  return `\n  <Worksheet ss:Name=\"${escapeXml(CONFIG.legalSheetName)}\">\n    <Table>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"40\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"120\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"180\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"220\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"120\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"80\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"420\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"420\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"360\"/>\n      <Column ss:AutoFitWidth=\"0\" ss:Width=\"260\"/>\n\n      <Row ss:Height=\"35\">\n        <Cell ss:StyleID=\"Title\" ss:MergeAcross=\"9\"><Data ss:Type=\"String\">Legal Analysis — Detailed Clauses & Amendments</Data></Cell>\n      </Row>\n      <Row ss:Height=\"5\"><Cell><Data ss:Type=\"String\"></Data></Cell></Row>\n\n      <Row ss:Height=\"25\">\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">No</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Section</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Clause Ref / Location</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Title / Type</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Category</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Risk</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Current Text</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Proposed / Target</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Business Impact</Data></Cell>\n        <Cell ss:StyleID=\"Header\"><Data ss:Type=\"String\">Rationale / Rules</Data></Cell>\n      </Row>\n\n${rowsXml}\n\n    </Table>\n  </Worksheet>`;\n}\n\nfunction generateWorkbookXML(data) {\n  const d = normalizeData(data);\n  const rows = createRows(d);\n  const legalRows = CONFIG.enableLegalSheet ? createLegalRows(d) : [];\n  const styles = buildStylesXml();\n\n  const mainSheetXml = buildMainSheetXml(d, rows);\n  const legalSheetXml = buildLegalSheetXml(legalRows);\n\n  const wb = `<?xml version=\"1.0\"?>\n<?mso-application progid=\"Excel.Sheet\"?>\n<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\">\n  <DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">\n    <Title>${escapeXml(CONFIG.title)}</Title>\n    <Subject>Contract Analysis</Subject>\n    <Created>${new Date().toISOString()}</Created>\n  </DocumentProperties>\n  <Styles>\n${styles}\n  </Styles>\n  ${mainSheetXml}\n  ${legalSheetXml}\n</Workbook>`;\n\n  return { xml: wb, mainRowCount: rows.length, legalRowCount: legalRows.length };\n}\n\n// ===================== MAIN =====================\ntry {\n  if (!contractData) throw new Error('No contract data provided');\n\n  const d = normalizeData(contractData);\n  const projectRef = firstDefined(d, CONFIG.headerPaths.projectReference) || 'Contract';\n  const riskSuffix = (d.overall_risk_assessment?.risk_level || 'NA').toString().toUpperCase();\n  const cleanRef = String(projectRef).replace(/[^a-zA-Z0-9]/g, '_').substring(0, 60);\n\n  const analysisDateRaw = firstDefined(d, CONFIG.headerPaths.analysisDate);\n  const dateForFilename = formatDate({ dateString: analysisDateRaw });\n\n  const fileName = `Enhanced_Altrad_Analysis_${cleanRef}_${riskSuffix}_${dateForFilename}.xls`;\n  const { xml, mainRowCount, legalRowCount } = generateWorkbookXML(d);\n\n  console.log(`[Excel] Generated Enhanced Altrad Analysis: ${fileName} (rows: main=${mainRowCount}, legal=${legalRowCount})`);\n\n  return {\n    json: {\n      ...d,\n      excelGenerated: true,\n      excelFilename: fileName,\n      templateFormat: true,\n      enhancedAltradAnalysis: true,\n      processingTimestamp: new Date().toISOString(),\n      rows: {\n        main: mainRowCount,\n        legal: legalRowCount,\n      },\n      config: {\n        sheetName: CONFIG.sheetName,\n        legalSheetName: CONFIG.legalSheetName,\n        maxRows: CONFIG.maxRows,\n        enableLegalSheet: CONFIG.enableLegalSheet,\n        sortByRiskBeforeCap: CONFIG.sortByRiskBeforeCap,\n      }\n    },\n    binary: {\n      ...($input.first().binary || {}),\n      [CONFIG.binaryPropertyName]: {\n        data: Buffer.from(xml, 'utf8').toString('base64'),\n        mimeType: 'application/vnd.ms-excel',\n        fileName,\n      }\n    }\n  };\n\n} catch (err) {\n  console.error('[Excel] Generation error:', err);\n  return {\n    json: {\n      ...(normalizeData(contractData)),\n      excelGenerated: false,\n      error: String(err && err.message ? err.message : err),\n      errorTimestamp: new Date().toISOString(),\n    },\n    binary: $input.first().binary || {},\n  };\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        -16
      ],
      "id": "87cdb560-eee2-4c5d-8eb7-4931973f55c7",
      "name": "Code 3"
    }
  ],
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Excel code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        []
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Extract Attachments2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Attachments2": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform to base64": {
      "main": [
        []
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Send email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Convert to PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from tekst",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from word": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from tekst": {
      "main": [
        []
      ]
    },
    "Send email": {
      "main": [
        []
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Convert to PDF": {
      "main": [
        [
          {
            "node": "Extract from word",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Excel code": {
      "main": [
        []
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML3": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Excel code3": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "363a0876-9c6a-4d85-8bbf-e88e7645addf",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-07-29T09:29:53.042Z",
      "updatedAt": "2025-07-29T09:29:53.042Z",
      "role": "workflow:owner",
      "workflowId": "o3C7ndLPABTlnDyZ",
      "projectId": "GRYQdjzbr9zYZfKu"
    }
  ],
  "tags": [
    {
      "createdAt": "2025-08-21T07:50:45.011Z",
      "updatedAt": "2025-08-21T07:50:45.011Z",
      "id": "7cVb5Zmr9kiCZYyu",
      "name": "Test passed"
    },
    {
      "createdAt": "2025-08-21T07:29:46.376Z",
      "updatedAt": "2025-08-21T07:29:46.376Z",
      "id": "YmwMB85gjhecTvBP",
      "name": "Ton Jacobs"
    }
  ]
}