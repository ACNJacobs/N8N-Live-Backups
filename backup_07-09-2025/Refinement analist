{
  "createdAt": "2025-08-12T10:14:46.376Z",
  "updatedAt": "2025-08-26T14:02:27.000Z",
  "id": "C65mUMe25R7L55bj",
  "name": "Refinement analist",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -272,
        576
      ],
      "id": "02bbd518-f9b4-432b-a8c6-b827fbfadab6",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "jql": "=project = WOMDEV \nAND sprint = \"Ready for Refinement\" \nAND statusCategory != Done\n"
        }
      },
      "type": "n8n-nodes-base.jira",
      "typeVersion": 1,
      "position": [
        32,
        240
      ],
      "id": "03312092-ce06-429b-b99b-c5e37a01a888",
      "name": "Get many issues",
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "iyrcBYrNur9VgGDe",
          "name": "Jira SW Cloud account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=CRITICAL: You MUST follow the system prompt instructions exactly. Generate ONLY valid JSON without any explanatory text.\n\nREQUIRED PROCESS:\n1. Analyze each issue for missing information (Labels, Components, Description, Assignee, Priority)\n2. Score technical complexity (1-10) and clarity (1-10) \n3. Assign story points using conservative estimates in \"X à Y\" format\n4. Determine sprint readiness (Ready/Needs Work/Blocked)\n5. Generate complete markdown with all WHO/WHAT/WHERE/WHY/WHEN/PRIORITY fields\n\nOUTPUT REQUIREMENT: Return ONLY valid JSON in this exact format:\n{\n  \"issues\": [\n    {\n      \"key\": \"ISSUE-KEY\",\n      \"summary\": \"Exact title from input\",\n      \"description\": \"Description from input\",\n      \"link\": \"https://altradservices-bnl.atlassian.net/browse/ISSUE-KEY\",\n      \"markdown\": \"## ISSUE-KEY: Summary\\n\\n**CORE INFORMATION:**\\n- **Who:** Reporter name or 'Niet toegewezen'\\n- **What:** Complete description of what needs to be done\\n- **Where:** Specific APEX page/component/system\\n- **Why:** Reason why this change is needed\\n- **When:** Deadline or 'Niet gespecificeerd'\\n- **Priority:** Priority level\",\n      \"storyPoints\": \"2 à 3\",\n      \"technicalComplexity\": 4,\n      \"clarityScore\": 6,\n      \"sprintReadiness\": \"Needs Work\",\n      \"missingInformation\": [\"Labels\", \"Components\"],\n      \"url\": \"https://altradservices-bnl.atlassian.net/browse/ISSUE-KEY\"\n    }\n  ]\n}\n\nFORBIDDEN: Do NOT generate recommendations, aanbevelingen, or advice fields.\nINPUT DATA: {{ JSON.stringify([$json], null, 2) }}",
        "options": {
          "systemMessage": "=# Radicale System Prompt (Versie 2.1) - Intelligente JSON voor Gemini\n\n## Persona\nJe bent een expert Oracle APEX Technical Analyst. Jouw taak is om Jira-issues te analyseren en een gestructureerde, technische beoordeling te geven in een strikt JSON-formaat.\n\n## Hoofdinstructie: GENEREER UITSLUITEND VALIDE JSON\nJe bent een JSON-generator. Je MOET uitsluitend valide JSON retourneren, zonder extra tekst, uitleg of markdown-opmaak.\n\n## Algemene Logica\n**Analyseer de Input:** Voor elk issue in de input-array, analyseer je de velden key, summary, description, reporter, en issuetype.\n\n**Leid Waarden Af:** Alle waarden in je output JSON MOETEN logisch zijn afgeleid van de informatie in het input-issue. Maak geen aannames buiten de verstrekte data.\n\n**GEEN RECOMMENDATIONS:** Genereer NOOIT recommendations of aanbevelingen. Dit veld moet NIET in de output staan.\n\n## Scoring Regels (Pas deze logisch toe)\n\n### Story Points (Fibonacci: 1, 2, 3, 5, 8, 13, 21) - Conservatieve inschatting:\n- **Simpele UI-aanpassing:** 1 punt\n- **Aanpassing aan rapport:** 1 à 2 punten  \n- **Database-operatie (CRUD):** 1 à 2 punten\n- **Complexe APEX-feature (nieuwe pagina met processen, dynamische acties):** 2 à 3 punten\n- **ONZEKERHEIDSFACTOR:** Geen description? Tel +1 punt op.\n- **Grote architecturale wijziging:** 3 à 5 punten\n\n**BELANGRIJKE REGEL: Bij twijfel altijd het LAGERE punt toewijzen. Default naar 1-2 punten voor de meeste taken. Alleen 3+ punten voor echt complexe zaken.**\n\n### Specifieke Point Guidelines:\n- **1 punt:** Eenvoudige wijzigingen, tekstuele aanpassingen, simpele configuratie\n- **1 à 2 punten:** Standaard APEX-werk, rapporten aanpassen, formulieren, CRUD-operaties  \n- **2 à 3 punten:** ALLEEN voor complexe logica, nieuwe pagina's met veel onderdelen\n- **3 à 5 punten:** ZEER ZELDZAAM - alleen voor grote architecturale changes\n\n### Technische Complexiteit (1-10):\n- **Simpele configuratie / attributen aanpassen:** 1-3\n- **Standaard APEX-ontwikkeling (rapport met formulier):** 4-6\n- **Complexe logica, API-integratie, of custom PL/SQL:** 7-10\n\n### Duidelijkheidsscore (1-10):\n- **Geen description of onduidelijk:** 1-2\n- **Basale description:** 3-5\n- **Gedetailleerde description met stappen:** 6-8\n- **Zeer gedetailleerd met acceptatiecriteria:** 9-10\n\n### Sprint Readiness (kies één): \"Ready\", \"Needs Work\", \"Blocked\"\n- **Geen description:** \"Needs Work\"\n- **Heeft een duidelijke description:** \"Ready\"\n- **Beschrijft een afhankelijkheid van een extern systeem/team:** \"Blocked\"\n\n### Ontbrekende Informatie Check\nControleer de volgende verplichte velden en noteer wat ontbreekt:\n- **Labels:** Moeten aanwezig zijn (zoals \"Dow\")\n- **Components:** Moeten aanwezig zijn (zoals \"WOM Central\", \"WOM Commit\")\n- **Description:** Moet aanwezig én duidelijk zijn\n- **Priority:** Moet ingesteld zijn\n\n**Registreer alle ontbrekende items in het \"missingInformation\" veld.**\n\n## URL Constructie\nGebruik altijd dit formaat: `https://altradservices-bnl.atlassian.net/browse/{issue.key}`\n\n## Output Schema (STRIKT VOLGEN)\n\n```json\n{\n  \"issues\": [\n    {\n      \"key\": \"ISSUE-KEY\",\n      \"summary\": \"Exacte titel uit input\",\n      \"description\": \"Beschrijving uit input\", \n      \"link\": \"https://altradservices-bnl.atlassian.net/browse/ISSUE-KEY\",\n      \"markdown\": \"## ISSUE-KEY: Summary\\n\\n**CORE INFORMATION:**\\n- **Who:** Reporter naam of 'Niet toegewezen'\\n- **What:** Volledige beschrijving van de taak en wat er moet gebeuren\\n- **Where:** Specifieke APEX pagina/component/systeem waar wijziging plaatsvindt\\n- **Why:** Reden waarom deze wijziging nodig is\\n- **When:** Deadline of 'Niet gespecificeerd'\\n- **Priority:** Medium/High/Low gebaseerd op input\",\n      \"storyPoints\": \"2 à 3\",\n      \"technicalComplexity\": 4,\n      \"clarityScore\": 6,\n      \"sprintReadiness\": \"Needs Work\",\n      \"missingInformation\": [\"Labels\", \"Components\", \"Description\"],\n      \"url\": \"https://altradservices-bnl.atlassian.net/browse/ISSUE-KEY\"\n    }\n  ]\n}\n```\n\n## VERPLICHTE VELDEN\n\n**summary:** Kopieer exact de \"summary\" uit de input JSON.\n\n**description:** Kopieer de \"description\" uit de input, of als die null is, gebruik \"customfield_10054\".\n\n**link:** Voeg de Jira URL toe voor sortering en referentie.\n\n**storyPoints:** Gebruik string format zoals \"2 à 3\" punten conform de richtlijnen hierboven.\n\n**missingInformation:** Array met ontbrekende items zoals [\"Labels\", \"Components\", \"Description\",  \"Priority\"]. Lege array [] als alles aanwezig is.\n\n**markdown:** Genereer ALTIJD gestructureerde markdown met de summary als titel. Voeg VERPLICHT onder CORE INFORMATION exact deze velden toe (NOOIT overslaan):\n- **Who:** [Naam van reporter/reporter]\n- **What:** [Gedetailleerde beschrijving van wat er gedaan moet worden]\n- **Where:** [Specifieke locatie/component/systeem]\n- **Why:** [Reden/doel van de wijziging]\n- **When:** [Timing/deadline of \"Niet gespecificeerd\"]\n- **Priority:** [Priority niveau]\n\n**VERPLICHT:** Elke markdown MOET een volledige \"Ticket Details\" sectie bevatten met alle WHO/WHAT/WHERE/WHY/WHEN/PRIORITY informatie ingevuld.\n\n**VERBODEN VELDEN:** \n- **recommendations:** MAG NOOIT worden gegenereerd\n- **aanbevelingen:** MAG NOOIT worden gegenereerd\n\n## KRITIEKE REGELS\n\n- **ALLEEN JSON:** Geen extra tekst.\n- **VERWERK ALLES:** Analyseer elk issue in de input.\n- **GEBRUIK DE INPUT:** Baseer je analyse uitsluitend op de verstrekte JSON-data.\n- **APEX-FOCUS:** Schattingen moeten specifiek voor Oracle APEX zijn.\n- **VOLLEDIGE MARKDOWN:** Elke markdown MOET complete WHO/WHAT/WHERE/WHY/WHEN/PRIORITY bevatten - NOOIT incomplete of lege velden.\n- **LINK VELD:** Voeg altijd het link veld toe voor sortering.\n- **MISSING INFO:** Controleer altijd op ontbrekende Labels, Components, Description, reporter en Priority.\n- **GEEN RECOMMENDATIONS:** Genereer NOOIT recommendations, aanbevelingen of advies velden.\n- **CONSISTENTE OUTPUT:** Alle issues moeten dezelfde uitgebreide structuur hebben - geen korte versies.",
          "enableStreaming": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        256,
        240
      ],
      "id": "8f5a1b16-ac00-46a9-b149-fe5e5f3f3a8b",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        256,
        448
      ],
      "id": "5ab7a7d6-d3ce-49f1-ae4e-c16ad5edc403",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "vojz1cvxUpTiZ61e",
          "name": "Google Gemini(PaLM) Api zakenlijk"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        608,
        240
      ],
      "id": "f214eb08-b357-4aec-a671-2901987f5e82",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "// Parse de complexe AI Agent output structure\nconst inputData = $json;\nconsole.log('Raw input:', JSON.stringify(inputData, null, 2));\n\n// **TOEGEVOEGD** - Parse story points functie\nfunction parseStoryPoints(storyPointsStr) {\n  if (!storyPointsStr) return 0;\n  if (typeof storyPointsStr === 'number') return storyPointsStr;\n  \n  // Handle formats like \"2 à 3\", \"3 à 5\", \"1 à 2\"\n  const match = storyPointsStr.toString().match(/(\\d+)\\s*à\\s*(\\d+)/);\n  if (match) {\n    return parseInt(match[2]); // Use the higher number\n  }\n  \n  // Handle simple numbers\n  const simpleMatch = storyPointsStr.toString().match(/(\\d+)/);\n  if (simpleMatch) {\n    return parseInt(simpleMatch[1]);\n  }\n  \n  return 0;\n}\n\nlet allIssues = [];\n\n// Check of we data array hebben\nif (inputData.data && Array.isArray(inputData.data)) {\n  // Loop door alle data entries\n  for (const dataEntry of inputData.data) {\n    if (dataEntry.output && dataEntry.output.trim() !== '') {\n      // Probeer JSON te extracten uit de output string\n      try {\n        // Verwijder markdown code blocks (```)\n        let cleanOutput = dataEntry.output.replace(/^```json\\n/, '').replace(/\\n```$/, '').trim();\n        \n        // Parse de JSON\n        const parsedData = JSON.parse(cleanOutput);\n        \n        // Voeg issues toe aan onze verzameling\n        if (parsedData.issues && Array.isArray(parsedData.issues)) {\n          allIssues = allIssues.concat(parsedData.issues);\n        }\n      } catch (error) {\n        console.log('Failed to parse output:', dataEntry.output);\n        console.log('Error:', error.message);\n      }\n    }\n  }\n} else {\n  // Fallback voor andere input formats\n  console.log('No data array found, trying direct parsing');\n}\n\n// **GEFIXTE** Summary statistics berekening met juiste story points parsing\nconst totalStoryPoints = allIssues.reduce((sum, issue) => {\n  const pointsValue = parseStoryPoints(issue.storyPoints);\n  return sum + pointsValue;\n}, 0);\n\nconst readyCount = allIssues.filter(i => i.sprintReadiness === 'Ready').length;\nconst needsWorkCount = allIssues.filter(i => i.sprintReadiness === 'Needs Work').length;\nconst blockedCount = allIssues.filter(i => i.sprintReadiness === 'Blocked').length;\n\nconst summary = {\n  totalIssues: allIssues.length,\n  totalStoryPoints: totalStoryPoints, // Nu correct als getal\n  readyCount: readyCount,\n  needsWorkCount: needsWorkCount,\n  blockedCount: blockedCount,\n  avgComplexity: allIssues.length > 0 ? \n    Math.round((allIssues.reduce((sum, issue) => sum + (issue.technicalComplexity || 0), 0) / allIssues.length) * 10) / 10 : 0\n};\n\nconsole.log('Parsed issues:', allIssues.length);\nconsole.log('Summary:', summary);\nconsole.log(`Calculated total story points: ${totalStoryPoints}`); // **TOEGEVOEGD** voor debugging\n\n// Return clean data structure\nreturn [{\n  json: {\n    issues: allIssues,\n    summary: summary,\n    parseSuccess: true,\n    debugInfo: {\n      inputDataKeys: Object.keys(inputData),\n      dataArrayLength: inputData.data ? inputData.data.length : 0,\n      nonEmptyOutputs: inputData.data ? inputData.data.filter(d => d.output && d.output.trim() !== '').length : 0,\n      totalStoryPointsCalculated: totalStoryPoints // **TOEGEVOEGD** voor debugging\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        832,
        240
      ],
      "id": "1ca8942b-f52d-4ae4-bcbf-8e6d34122857",
      "name": "Json parser node"
    },
    {
      "parameters": {
        "jsCode": "// DYNAMISCHE Email Generator Code Node voor n8n - ALTRAD STYLED VERSION\nconst inputData = $input.first().json;\n\n// **ADDED** Sprint info uit de HTTP Request node\nconst sprintItems = $items(\"HTTP Request\", 0, 0);\nconst sprintJson = sprintItems?.[0]?.json || {};\nconst activeSprint = sprintJson?.values?.[0] || {};\n\nfunction formatNl(d) {\n  if (!d) return \"Onbekend\";\n  const dt = new Date(d);\n  return dt.toLocaleDateString(\"nl-NL\", { day: \"numeric\", month: \"long\", year: \"numeric\" });\n}\n// **ADDED** Beschikbare sprint-variabelen\nconst sprintName = activeSprint?.name || \"Onbekende Sprint\";\nconst sprintStart = formatNl(activeSprint?.startDate);\nconst sprintEnd   = formatNl(activeSprint?.endDate);\n\n// Handle different input structures\nlet issues, summary;\nif (inputData.issues) {\n  // New structure: direct object with issues and summary\n  issues = inputData.issues || [];\n  summary = inputData.summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n} else if (Array.isArray(inputData) && inputData[0] && inputData[0].issues) {\n  // Array structure\n  issues = inputData[0].issues || [];\n  summary = inputData[0].summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n} else {\n  // Fallback for old structure\n  issues = inputData.issues || [];\n  summary = inputData.summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n}\n\nconsole.log(`Processing ${issues.length} issues with ${summary.totalStoryPoints} total story points`);\n\nconst currentDate = new Date().toLocaleDateString('nl-NL', {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n});\n\n// Calculate next Wednesday for refinement meeting\nfunction getNextWednesday() {\n  const today = new Date();\n  const nextWednesday = new Date();\n  const daysUntilWednesday = (3 - today.getDay() + 7) % 7; // 3 = Wednesday\n  \n  // If today is Wednesday, get next Wednesday (7 days later)\n  if (daysUntilWednesday === 0) {\n    nextWednesday.setDate(today.getDate() + 7);\n  } else {\n    nextWednesday.setDate(today.getDate() + daysUntilWednesday);\n  }\n  \n  return nextWednesday.toLocaleDateString('nl-NL', {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\n\nconst nextRefinementDate = getNextWednesday();\n\n// Helper functions\nfunction getReadinessClass(readiness) {\n  return readiness.toLowerCase().replace(' ', '-');\n}\n\nfunction getComplexityLevel(complexity) {\n  if (complexity <= 3) return 'low';\n  if (complexity <= 6) return 'medium';\n  return 'high';\n}\n\nfunction getPriorityLevel(priority) {\n  if (!priority) return 'medium';\n  const p = priority.toLowerCase();\n  if (p.includes('highest') || p.includes('critical')) return 'critical';\n  if (p.includes('high')) return 'high';\n  if (p.includes('low')) return 'low';\n  return 'medium';\n}\n\nfunction extractSummaryFromMarkdown(markdown, originalDescription = '') {\n  if (!markdown && !originalDescription) return 'No summary available';\n  \n  // First try to extract from **What:** section in markdown\n  if (markdown) {\n    const whatMatch = markdown.match(/\\*\\*What:\\*\\*\\s*([^*\\n]+)/);\n    if (whatMatch) {\n      let summary = whatMatch[1].trim();\n      // Limit to 200 characters for better display\n      if (summary.length > 200) {\n        summary = summary.substring(0, 197) + '...';\n      }\n      return summary;\n    }\n  }\n  \n  // Fallback to original description if available\n  if (originalDescription) {\n    let desc = originalDescription.trim();\n    // Clean up Jira markup\n    desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n    desc = desc.replace(/\\n\\s*\\n/g, ' '); // Replace multiple newlines with space\n    desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n    \n    if (desc.length > 200) {\n      desc = desc.substring(0, 197) + '...';\n    }\n    return desc;\n  }\n  \n  // Final fallback: extract from markdown content\n  if (markdown) {\n    const lines = markdown.split('\\n');\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (line && !line.startsWith('#') && !line.startsWith('**')) {\n        return line.length > 200 ? line.substring(0, 197) + '...' : line;\n      }\n    }\n  }\n  \n  return 'No summary available';\n}\n\n// Extract additional details from markdown - ENHANCED VERSION\nfunction extractTicketDetails(markdown) {\n  if (!markdown) return 'Geen details beschikbaar.';\n  \n  const details = {};\n  \n  // Extract all sections\n  const whoMatch = markdown.match(/\\*\\*Who:\\*\\*\\s*([^*\\n]+)/);\n  const whatMatch = markdown.match(/\\*\\*What:\\*\\*\\s*([^*\\n]+)/);\n  const whereMatch = markdown.match(/\\*\\*Where:\\*\\*\\s*([^*\\n]+)/);\n  const whyMatch = markdown.match(/\\*\\*Why:\\*\\*\\s*([^*\\n]+)/);\n  const whenMatch = markdown.match(/\\*\\*When:\\*\\*\\s*([^*\\n]+)/);\n  const priorityMatch = markdown.match(/\\*\\*Priority:\\*\\*\\s*([^*\\n]+)/);\n  \n  if (whoMatch) details.who = whoMatch[1].trim();\n  if (whatMatch) details.what = whatMatch[1].trim();\n  if (whereMatch) details.where = whereMatch[1].trim();\n  if (whyMatch) details.why = whyMatch[1].trim();\n  if (whenMatch) details.when = whenMatch[1].trim();\n  if (priorityMatch) details.priority = priorityMatch[1].trim();\n  \n  // Create enhanced format with priority indicators - VERTICAL LAYOUT\n  let formatted = '';\n  if (details.who) formatted += `WHO: ${details.who}<br>`;\n  if (details.what) formatted += `WHAT: ${details.what}<br>`;\n  if (details.where) formatted += `WHERE: ${details.where}<br>`;\n  if (details.why) formatted += `WHY: ${details.why}<br>`;\n  if (details.when) formatted += `WHEN: ${details.when}<br>`;\n  if (details.priority) formatted += `PRIORITY: ${details.priority}`;\n  \n  return formatted || 'Details beschikbaar in Jira.';\n}\n\n// Extract requester from markdown - VERBETERDE VERSIE DIE REPORTER PAKT, NIET ASSIGNEE\nfunction extractRequester(markdown) {\n  if (!markdown) return 'Unknown';\n  \n  const whoMatch = markdown.match(/\\*\\*Who:\\*\\*\\s*([^*\\n]+)/);\n  if (whoMatch) {\n    let whoText = whoMatch[1].trim();\n    \n    // Clean up WOM Support Mail prefix\n    whoText = whoText.replace(/WOM Support Mail\\s*-\\s*/gi, '');\n    \n    // PRIORITEIT 1: Zoek expliciet naar (Reporter)\n    const reporterMatch = whoText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)\\s*\\(Reporter\\)/);\n    if (reporterMatch) {\n      return reporterMatch[1].trim();\n    }\n    \n    // PRIORITEIT 2: Zoek naar (Creator) - vaak ook de reporter\n    const creatorMatch = whoText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)\\s*\\(Creator\\)/);\n    if (creatorMatch) {\n      return creatorMatch[1].trim();\n    }\n    \n    // PRIORITEIT 3: Identificeer de assignee om te vermijden\n    const assigneeMatch = whoText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)\\s*\\(Assignee\\)/);\n    const assigneeName = assigneeMatch ? assigneeMatch[1].trim() : null;\n    \n    // Verwijder alle haakjes en extra info voor verdere verwerking\n    let cleanText = whoText.replace(/\\(.*?\\)/g, ''); // Remove all parentheses content\n    cleanText = cleanText.replace(/reported this issue and.*$/gi, ''); // Remove long descriptions\n    cleanText = cleanText.replace(/roles in.*$/gi, ''); // Remove role descriptions\n    cleanText = cleanText.replace(/,\\s*$/, ''); // Remove trailing comma\n    \n    // PRIORITEIT 4: Extract alle mogelijke namen en kies de eerste die NIET de assignee is\n    const namePatterns = [\n      /([A-Z][a-z]+ [A-Z][a-z]+ [A-Z][a-z]+)/g, // \"Firstname Middlename Lastname\" \n      /([A-Z][a-z]+ [A-Z][a-z]+)/g, // \"Firstname Lastname\"\n      /([A-Z][a-z]+)/g // Just \"Firstname\"\n    ];\n    \n    const excludeRoles = ['Requester', 'Coordinator', 'Werfleider', 'Reporter', 'Creator', 'Assignee'];\n    \n    for (const pattern of namePatterns) {\n      const matches = [...cleanText.matchAll(pattern)];\n      for (const match of matches) {\n        const name = match[1].trim();\n        if (!excludeRoles.includes(name) && name !== assigneeName) {\n          return name;\n        }\n      }\n    }\n    \n    // LAATSTE RESORT: Pak de eerste naam, ook al is het misschien de assignee\n    const firstNameMatch = cleanText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)/);\n    if (firstNameMatch && !excludeRoles.includes(firstNameMatch[1])) {\n      return firstNameMatch[1].trim();\n    }\n  }\n  \n  return 'Unknown';\n}\n\n// Parse story points from string format \"2 à 3\" to numeric value\nfunction parseStoryPoints(storyPointsStr) {\n  if (!storyPointsStr) return 0;\n  if (typeof storyPointsStr === 'number') return storyPointsStr;\n  \n  // Handle formats like \"2 à 3\", \"3 à 5\", \"1 à 2\"\n  const match = storyPointsStr.toString().match(/(\\d+)\\s*à\\s*(\\d+)/);\n  if (match) {\n    return parseInt(match[2]); // Use the higher number\n  }\n  \n  // Handle simple numbers\n  const simpleMatch = storyPointsStr.toString().match(/(\\d+)/);\n  if (simpleMatch) {\n    return parseInt(simpleMatch[1]);\n  }\n  \n  return 0;\n}\n\n// Group issues by requester - ENHANCED\nfunction groupIssuesByRequester(issues) {\n  const grouped = {};\n  \n  for (const issue of issues) {\n    const requester = extractRequester(issue.markdown);\n    \n    if (!grouped[requester]) {\n      grouped[requester] = {\n        tickets: [],\n        totalStoryPoints: 0,\n        readyCount: 0,\n        needsWorkCount: 0,\n        blockedCount: 0,\n        criticalCount: 0,\n        highPriorityCount: 0\n      };\n    }\n    \n    // Extract priority for enhanced tracking\n    const details = extractTicketDetails(issue.markdown);\n    const priorityLevel = getPriorityLevel(details.priority || issue.priority);\n    \n    // Use pre-parsed story points or parse if not available\n    const storyPointsValue = issue.storyPointsValue || parseStoryPoints(issue.storyPoints);\n    \n    // Add priority info to issue\n    const enhancedIssue = {...issue, priorityLevel, details, storyPointsValue};\n    \n    grouped[requester].tickets.push(enhancedIssue);\n    grouped[requester].totalStoryPoints += storyPointsValue;\n    \n    const readiness = issue.sprintReadiness || 'Unknown';\n    if (readiness === 'Ready') {\n      grouped[requester].readyCount++;\n    } else if (readiness === 'Needs Work') {\n      grouped[requester].needsWorkCount++;\n    } else if (readiness === 'Blocked') {\n      grouped[requester].blockedCount++;\n    }\n    \n    // Track priority levels\n    if (priorityLevel === 'critical') {\n      grouped[requester].criticalCount++;\n    } else if (priorityLevel === 'high') {\n      grouped[requester].highPriorityCount++;\n    }\n  }\n  \n  // Sort tickets within each requester by priority then readiness\n  Object.keys(grouped).forEach(requester => {\n    grouped[requester].tickets.sort((a, b) => {\n      const priorityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };\n      const readinessOrder = { 'Ready': 0, 'Needs Work': 1, 'Blocked': 2, 'Unknown': 3 };\n      \n      const priorityDiff = priorityOrder[a.priorityLevel] - priorityOrder[b.priorityLevel];\n      if (priorityDiff !== 0) return priorityDiff;\n      \n      return readinessOrder[a.sprintReadiness || 'Unknown'] - readinessOrder[b.sprintReadiness || 'Unknown'];\n    });\n  });\n  \n  return grouped;\n}\n\n// Generate ticket HTML - ENHANCED WITH PRIORITY AND OUTLOOK COMPATIBILITY\nfunction generateTicketHtml(issue, detailed = false) {\n  const key = issue.key || 'UNKNOWN';\n  const storyPointsValue = issue.storyPointsValue || parseStoryPoints(issue.storyPoints);\n  const storyPointsDisplay = issue.storyPoints || storyPointsValue; // Keep original format for display\n  const sprintReadiness = issue.sprintReadiness || 'Unknown';\n  const complexity = issue.technicalComplexity || 0;\n  const clarity = issue.clarityScore || 0;\n  const priorityLevel = issue.priorityLevel || 'medium';\n  \n  const readinessClass = getReadinessClass(sprintReadiness);\n  const complexityLevel = getComplexityLevel(complexity);\n  const issueSummary = extractSummaryFromMarkdown(issue.markdown, issue.description);\n  \n  // Priority styling\n  const priorityColor = priorityLevel === 'critical' ? '#e74c3c' : \n                       priorityLevel === 'high' ? '#f39c12' : \n                       priorityLevel === 'low' ? '#27ae60' : '#3498db';\n  \n  let contentHtml = '';\n  \n  if (detailed) {\n    const ticketDetails = extractTicketDetails(issue.markdown);\n    \n    // Enhanced details - use original description for problematic tickets\n    let detailsDisplay = '';\n    \n    // Check if this is one of the problematic tickets that need special handling\n    const problematicTickets = ['WOMDEV-1959', 'WOMDEV-1957', 'WOMDEV-1938'];\n    \n    if (problematicTickets.includes(key) && issue.description) {\n      // For these specific tickets, prioritize the original description\n      let desc = issue.description.trim();\n      desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n      desc = desc.replace(/\\n\\s*\\n/g, '\\n'); // Clean up extra newlines\n      desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n      \n      // Keep more content for these important tickets\n      if (desc.length > 400) {\n        desc = desc.substring(0, 397) + '...';\n      }\n      detailsDisplay = desc;\n    } else if (ticketDetails && ticketDetails !== 'Details beschikbaar in Jira.' && ticketDetails !== 'Geen details beschikbaar.') {\n      // Use extracted markdown details if they're good\n      detailsDisplay = ticketDetails;\n    } else if (issue.description) {\n      // Fallback to original description for other tickets\n      let desc = issue.description.trim();\n      desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n      desc = desc.replace(/\\n\\s*\\n/g, '\\n'); // Clean up extra newlines\n      desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n      if (desc.length > 350) {\n        desc = desc.substring(0, 347) + '...';\n      }\n      detailsDisplay = desc;\n    } else {\n      detailsDisplay = ticketDetails || 'Geen aanvullende details beschikbaar.';\n    }\n    \n    // Always show detailed content for detailed view\n    contentHtml = `\n      <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 15px; padding: 15px; background-color: #f8f9fa; border: 1px solid #e5e5e5; border-radius: 6px;\">\n        <tr>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${complexity}/10</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Complexity</div>\n          </td>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${clarity}/10</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Clarity</div>\n          </td>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${storyPointsDisplay}</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Story Points</div>\n          </td>\n        </tr>\n      </table>\n      \n      <div class=\"ticket-details\">\n        <h4 style=\"color: #003f7f;\">Ticket Details</h4>\n        <div class=\"details-content\" style=\"font-size: 12px; line-height: 1.4; color: #555;\">${detailsDisplay}</div>\n      </div>\n    `;\n  }\n  \n  // Critical issue styling\n  const criticalBorder = priorityLevel === 'critical' ? 'border: 3px solid #e74c3c !important;' : '';\n  \n  return `\n    <div class=\"ticket\" id=\"ticket-${key.toLowerCase()}\" style=\"${criticalBorder}\">\n      <div class=\"ticket-header\">\n        <!--[if mso]>\n        <table cellpadding=\"0\" cellspacing=\"0\" style=\"width: 100%;\">\n          <tr>\n            <td style=\"width: 100%; text-align: left; padding: 15px 20px; background-color: #f8f9fa;\">\n              <div class=\"ticket-title\" style=\"font-weight: 700; font-size: 16px; color: #1d1d1f; background-color: #fff9e6; padding: 8px 12px; border-left: 4px solid #ff6600; margin-bottom: 10px;\">${key}: ${issueSummary}</div>\n              <div style=\"text-align: center;\">\n                <table cellpadding=\"0\" cellspacing=\"0\" style=\"margin: 0 auto;\">\n                  <tr>\n                    <td style=\"padding: 2px;\"><span style=\"background-color: #003f7f; color: white; padding: 3px 8px; font-size: 11px; font-weight: 600; text-transform: uppercase; border-radius: 0;\">${storyPointsDisplay} SP</span></td>\n                    <td style=\"padding: 2px;\"><span style=\"background-color: ${priorityColor}; color: white; padding: 3px 8px; font-size: 11px; font-weight: 600; text-transform: uppercase; border-radius: 0;\">${priorityLevel.toUpperCase()}</span></td>\n                    <td style=\"padding: 2px;\"><span style=\"background-color: ${readinessClass === 'ready' ? '#27ae60' : readinessClass === 'needs-work' ? '#f39c12' : '#e74c3c'}; color: white; padding: 3px 8px; font-size: 11px; font-weight: 600; text-transform: uppercase; border-radius: 0;\">${sprintReadiness.toUpperCase()}</span></td>\n                    <td style=\"padding: 2px;\"><span style=\"background-color: ${complexityLevel === 'low' ? '#d5f4e6' : complexityLevel === 'medium' ? '#fef5e7' : '#fadbd8'}; color: ${complexityLevel === 'low' ? '#27ae60' : complexityLevel === 'medium' ? '#f39c12' : '#e74c3c'}; padding: 3px 8px; font-size: 11px; font-weight: 600; text-transform: uppercase; border: 1px solid ${complexityLevel === 'low' ? '#27ae60' : complexityLevel === 'medium' ? '#f39c12' : '#e74c3c'}; border-radius: 0;\">${complexityLevel.toUpperCase()}</span></td>\n                  </tr>\n                </table>\n              </div>\n            </td>\n          </tr>\n        </table>\n        <![endif]-->\n        \n        <!--[if !mso]><!-->\n        <div style=\"background-color: #f8f9fa; padding: 15px 20px;\">\n          <div class=\"ticket-title\" style=\"font-weight: 700; font-size: 16px; color: #1d1d1f; background-color: #fff9e6; padding: 8px 12px; border-radius: 4px; border-left: 4px solid #ff6600; margin-bottom: 10px;\">${key}: ${issueSummary}</div>\n          <div class=\"ticket-badges\" style=\"display: flex; gap: 8px; flex-wrap: wrap; justify-content: center;\">\n            <span class=\"badge story-points\" style=\"background-color: #003f7f; color: white; padding: 3px 8px; border-radius: 3px; font-size: 11px; font-weight: 600; text-transform: uppercase; white-space: nowrap;\">${storyPointsDisplay} SP</span>\n            <span class=\"badge\" style=\"background-color: ${priorityColor}; color: white; padding: 3px 8px; border-radius: 3px; font-size: 11px; font-weight: 600; text-transform: uppercase; white-space: nowrap;\">${priorityLevel.toUpperCase()}</span>\n            <span class=\"badge readiness-${readinessClass}\" style=\"background-color: ${readinessClass === 'ready' ? '#27ae60' : readinessClass === 'needs-work' ? '#f39c12' : '#e74c3c'}; color: white; padding: 3px 8px; border-radius: 3px; font-size: 11px; font-weight: 600; text-transform: uppercase; white-space: nowrap;\">${sprintReadiness.toUpperCase()}</span>\n            <span class=\"badge complexity-${complexityLevel}\" style=\"background-color: ${complexityLevel === 'low' ? '#d5f4e6' : complexityLevel === 'medium' ? '#fef5e7' : '#fadbd8'}; color: ${complexityLevel === 'low' ? '#27ae60' : complexityLevel === 'medium' ? '#f39c12' : '#e74c3c'}; padding: 3px 8px; border-radius: 3px; font-size: 11px; font-weight: 600; text-transform: uppercase; white-space: nowrap; border: 1px solid ${complexityLevel === 'low' ? '#27ae60' : complexityLevel === 'medium' ? '#f39c12' : '#e74c3c'};\">${complexityLevel.toUpperCase()}</span>\n          </div>\n        </div>\n        <!--<![endif]-->\n      </div>\n      <div class=\"ticket-content\" style=\"padding: 20px;\">\n        ${contentHtml}\n        <div class=\"ticket-link\" style=\"text-align: center; margin-top: 15px;\">\n          <a href=\"${issue.url || `https://altradservices-bnl.atlassian.net/browse/${key}`}\" style=\"background-color: #003f7f; color: white; text-decoration: none; font-weight: 600; font-size: 13px; padding: 10px 20px; border-radius: 6px; display: inline-block;\">🔗 Bekijk in Jira</a>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Generate navigation HTML - SIMPLE WITH BETTER COLORS\nfunction generateNavigationHtml(groupedIssues) {\n  const requesters = Object.keys(groupedIssues).sort();\n  \n  const linksHtml = requesters.map(requester => {\n    const data = groupedIssues[requester];\n    const anchorId = requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/^-+|-+$/g, '');\n    \n    const criticalAlert = data.criticalCount > 0 ? 'background-color: #e74c3c !important;' : '';\n    \n    return `<a href=\"#${anchorId}\" class=\"requester-link\" style=\"${criticalAlert}color: white !important;\">${requester} <span class=\"requester-count\">${data.tickets.length}</span>${data.criticalCount > 0 ? ` <span style=\"background-color: rgba(255,255,255,0.3); color: white; padding: 2px 6px; border-radius: 10px; margin-left: 5px; font-size: 9px;\">⚠ ${data.criticalCount} KRITIEK</span>` : ''}</a>`;\n  }).join('');\n  \n  return `\n    <div class=\"requester-navigation\">\n      <h2>Navigatie per Requester</h2>\n      <div class=\"requester-links\">\n        ${linksHtml}\n      </div>\n    </div>\n  `;\n}\n\n// Generate requester sections HTML - ENHANCED\nfunction generateRequesterSectionsHtml(groupedIssues) {\n  const requesters = Object.keys(groupedIssues).sort();\n  let sectionsHtml = '';\n  \n  for (const requester of requesters) {\n    const data = groupedIssues[requester];\n    // Create clean anchor ID matching navigation\n    const anchorId = requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '') // Remove special characters\n      .replace(/\\s+/g, '-') // Replace spaces with hyphens\n      .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens\n    \n    let ticketsHtml = '';\n    \n    // Show first 3 tickets in detail, rest simplified\n    for (let i = 0; i < data.tickets.length; i++) {\n      //const detailed = i < 3; // First 3 tickets get detailed view\n      const detailed = true;\n      ticketsHtml += generateTicketHtml(data.tickets[i], detailed);\n    }\n    \n    // Critical section styling\n    const criticalSection = data.criticalCount > 0 ? 'border-left: 5px solid #e74c3c;' : '';\n    \n    sectionsHtml += `\n      <div class=\"requester-section\" id=\"${anchorId}\" style=\"${criticalSection}\">\n        <div class=\"requester-header\" style=\"background-color: #003f7f;\">\n          <h3>${requester}</h3>\n          <div class=\"requester-stats\">${data.tickets.length} tickets • ${data.totalStoryPoints} story points • ${data.readyCount} ready, ${data.needsWorkCount} need work${data.criticalCount > 0 ? ` • <span style=\"color: #ff6600; font-weight: bold;\">⚠ ${data.criticalCount} KRITIEKE ITEMS</span>` : ''}</div>\n        </div>\n        <div style=\"padding: 0 20px;\">\n          ${ticketsHtml}\n        </div>\n      </div>\n    `;\n  }\n  \n  return sectionsHtml;\n}\n\n// Generate \"Needs Work\" section - NEW\nfunction generateNeedsWorkSection(groupedIssues) {\n  const needsWorkTickets = [];\n  Object.keys(groupedIssues).forEach(requester => {\n    groupedIssues[requester].tickets.forEach(ticket => {\n      if (ticket.sprintReadiness === 'Needs Work') {\n        needsWorkTickets.push({...ticket, requester});\n      }\n    });\n  });\n  \n  if (needsWorkTickets.length === 0) return '';\n  \n  const ticketLinks = needsWorkTickets.map(ticket => {\n    const requesterAnchor = ticket.requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/^-+|-+$/g, '');\n    \n    const summary = extractSummaryFromMarkdown(ticket.markdown, ticket.description);\n    \n    return `\n      <div style=\"background: white; padding: 12px; margin: 8px 0; border-radius: 6px; border-left: 3px solid #f39c12;\">\n        <div style=\"display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px;\">\n          <div style=\"flex: 1; min-width: 200px;\">\n            <strong style=\"color: #f39c12;\">${ticket.key}</strong> \n            <span style=\"color: #666; font-size: 12px;\">(${ticket.requester})</span>\n            <div style=\"margin-top: 4px; color: #555; font-size: 13px; line-height: 1.3;\">${summary}</div>\n          </div>\n          <a href=\"${ticket.url || `https://altradservices-bnl.atlassian.net/browse/${ticket.key}`}\" style=\"background-color: #f39c12; color: white; text-decoration: none; padding: 6px 12px; border-radius: 4px; font-size: 11px; font-weight: 600;\">JIRA BEKIJKEN</a>\n        </div>\n      </div>\n    `;\n  }).join('');\n  \n  return `\n    <div style=\"background-color: #fef5e7; padding: 20px; margin: 0; border-left: 5px solid #f39c12;\">\n      <h2 style=\"margin: 0 0 15px 0; font-size: 16px; color: #f39c12; font-weight: 600;\">⚠ Tickets die Clarification Nodig Hebben (${needsWorkTickets.length})</h2>\n      <div style=\"margin-top: 10px;\">\n        ${ticketLinks}\n      </div>\n    </div>\n  `;\n}\n\n// Generate insights section - UPDATED\nfunction generateInsightsHtml(groupedIssues, summary) {\n  const totalRequesters = Object.keys(groupedIssues).length;\n  const criticalIssues = Object.values(groupedIssues).reduce((sum, data) => sum + data.criticalCount, 0);\n  const highPriorityIssues = Object.values(groupedIssues).reduce((sum, data) => sum + data.highPriorityCount, 0);\n  \n  const sprintCapacity = 40; // Assumed sprint capacity\n  const capacityUsage = Math.round((summary.totalStoryPoints / sprintCapacity) * 100);\n  \n  if (criticalIssues > 0 || capacityUsage > 80) {\n    return `\n      <div style=\"background-color: ${criticalIssues > 0 ? '#fdf2f2' : '#fff3cd'}; padding: 20px; margin: 0; border-left: 5px solid ${criticalIssues > 0 ? '#e74c3c' : '#f39c12'};\">\n        <h2 style=\"margin: 0 0 15px 0; font-size: 16px; color: ${criticalIssues > 0 ? '#e74c3c' : '#f39c12'}; font-weight: 600;\">⚠ Sprint Planning Alerts</h2>\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;\">\n          ${criticalIssues > 0 ? `\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid #e74c3c;\">\n            <div style=\"font-size: 18px; font-weight: 600; color: #e74c3c;\">${criticalIssues}</div>\n            <div style=\"font-size: 12px; color: #333;\">Kritieke Issues</div>\n            <div style=\"font-size: 10px; color: #666;\">Directe aandacht vereist</div>\n          </div>\n          ` : ''}\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid ${capacityUsage > 100 ? '#e74c3c' : '#f39c12'};\">\n            <div style=\"font-size: 18px; font-weight: 600; color: ${capacityUsage > 100 ? '#e74c3c' : '#f39c12'};\">${capacityUsage}%</div>\n            <div style=\"font-size: 12px; color: #333;\">Sprint Capaciteit</div>\n            <div style=\"font-size: 10px; color: #666;\">${summary.totalStoryPoints}/${sprintCapacity} story points</div>\n          </div>\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid #3498db;\">\n            <div style=\"font-size: 18px; font-weight: 600; color: #3498db;\">${totalRequesters}</div>\n            <div style=\"font-size: 12px; color: #333;\">Actieve Aanvragers</div>\n            <div style=\"font-size: 10px; color: #666;\">Verschillende teams</div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  return '';\n}\n\n// MAIN GENERATION LOGIC - UPDATED MET NEEDS WORK SECTION\nlet navigationHtml = '';\nlet ticketsSectionsHtml = '';\nlet insightsHtml = '';\nlet needsWorkHtml = '';\n\nif (issues.length > 0) {\n  // First, properly parse all story points from individual issues\n  const issuesWithParsedPoints = issues.map(issue => ({\n    ...issue,\n    storyPointsValue: parseStoryPoints(issue.storyPoints)\n  }));\n  \n  const groupedIssues = groupIssuesByRequester(issuesWithParsedPoints);\n  \n  // Recalculate summary with proper story points - completely override the malformed data\n  const calculatedSummary = {\n    totalIssues: issues.length,\n    totalStoryPoints: issuesWithParsedPoints.reduce((sum, issue) => sum + issue.storyPointsValue, 0),\n    readyCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Ready').length,\n    needsWorkCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Needs Work').length,\n    blockedCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Blocked').length,\n    avgComplexity: summary.avgComplexity || 0\n  };\n  \n  console.log(`Calculated summary: ${calculatedSummary.totalStoryPoints} total points, ${calculatedSummary.readyCount} ready, ${calculatedSummary.needsWorkCount} needs work`);\n  \n  navigationHtml = generateNavigationHtml(groupedIssues);\n  ticketsSectionsHtml = generateRequesterSectionsHtml(groupedIssues);\n  insightsHtml = generateInsightsHtml(groupedIssues, calculatedSummary);\n  needsWorkHtml = generateNeedsWorkSection(groupedIssues); // **TOEGEVOEGD**\n  \n  // Replace summary completely with calculated values\n  summary = calculatedSummary;\n  \n} else {\n  ticketsSectionsHtml = `\n    <div class=\"ticket\">\n      <div class=\"ticket-content\">\n        <p>No issues found or error in processing.</p>\n        <p>Debug info: ${JSON.stringify(inputData.debugInfo || {}, null, 2)}</p>\n      </div>\n    </div>\n  `;\n}\n\n// COMPLETE DYNAMIC HTML EMAIL - ALTRAD STYLED\nconst fullHtml = `\n<!DOCTYPE html>\n<html>\n<head>\n    <!--[if mso]>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <![endif]-->\n    <style>\n        body { \n            font-family: 'Calibri', 'Segoe UI', Arial, sans-serif; \n            line-height: 1.5; \n            color: #2c3e50; \n            max-width: 800px;\n            margin: 0 auto;\n            background-color: #ffffff;\n        }\n        .email-container {\n            background-color: white;\n            margin: 0;\n            border: 1px solid #e5e5e5;\n        }\n        .header { \n            background-color: #003f7f;\n            color: white; \n            padding: 20px; \n            border-bottom: 3px solid #ff6600;\n            position: relative;\n        }\n        .header::after {\n            content: '';\n            position: absolute;\n            top: 0;\n            right: 0;\n            width: 80px;\n            height: 100%;\n            background-color: #ff6600;\n        }\n        .header h1 { \n            margin: 0; \n            font-size: 20px; \n            font-weight: 600;\n            position: relative;\n            z-index: 2;\n        }\n        .header p { \n            margin: 8px 0 0 0; \n            font-size: 14px;\n            opacity: 0.9; \n            position: relative;\n            z-index: 2;\n        }\n        \n        .summary { \n            background-color: #f8f9fa; \n            padding: 20px; \n            margin: 0;\n            border-bottom: 1px solid #e5e5e5;\n        }\n        .summary h2 {\n            margin: 0 0 15px 0; \n            font-size: 16px;\n            color: #003f7f;\n            font-weight: 600;\n        }\n        \n        .requester-navigation {\n            background-color: #ecf0f1;\n            padding: 20px;\n            margin: 0;\n            border-bottom: 2px solid #ff6600;\n        }\n        .requester-navigation h2 {\n            margin: 0 0 15px 0;\n            font-size: 16px;\n            color: #003f7f;\n            font-weight: 600;\n        }\n        .requester-links {\n            display: block;\n        }\n        .requester-link {\n            background-color: #003f7f;\n            color: white !important;\n            text-decoration: none !important;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n            display: inline-block;\n            margin: 5px 5px 5px 0;\n        }\n        .requester-link:hover {\n            background-color: #002a5c;\n            transform: translateY(-1px);\n            color: white !important;\n        }\n        .requester-count {\n            background-color: rgba(255,255,255,0.3);\n            padding: 2px 6px;\n            border-radius: 10px;\n            margin-left: 5px;\n            font-size: 10px;\n            color: white;\n        }\n        \n        .requester-section {\n            margin: 0;\n            border-bottom: 2px solid #e5e5e5;\n        }\n        .requester-header {\n            background-color: #003f7f;\n            color: white;\n            padding: 15px 20px;\n            margin: 0;\n        }\n        .requester-header h3 {\n            margin: 0;\n            font-size: 18px;\n            font-weight: 600;\n        }\n        .requester-stats {\n            font-size: 12px;\n            opacity: 0.9;\n            margin-top: 5px;\n        }\n        \n        .ticket { \n            border: 2px solid #e5e5e5;\n            border-radius: 8px;\n            margin: 15px 0;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            overflow: hidden;\n        }\n        \n        .ticket-header { \n            background-color: #f8f9fa; \n            padding: 15px 20px; \n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            flex-wrap: wrap;\n            gap: 10px;\n        }\n        .ticket-title {\n            font-weight: 700;\n            font-size: 16px;\n            color: #1d1d1f;\n            flex: 1;\n            min-width: 200px;\n            background-color: #fff9e6;\n            padding: 8px 12px;\n            border-radius: 4px;\n            border-left: 4px solid #ff6600;\n        }\n        .ticket-badges {\n            display: flex;\n            gap: 8px;\n            flex-wrap: wrap;\n        }\n        \n        .badge {\n            padding: 3px 8px; \n            border-radius: 3px; \n            font-size: 11px;\n            font-weight: 600;\n            text-transform: uppercase;\n            white-space: nowrap;\n        }\n        .story-points { \n            background-color: #003f7f; \n            color: white; \n        }\n        .readiness-ready { \n            background-color: #27ae60; \n            color: white; \n        }\n        .readiness-needs-work { \n            background-color: #f39c12; \n            color: white; \n        }\n        .readiness-blocked { \n            background-color: #e74c3c; \n            color: white; \n        }\n        .complexity-low { \n            background-color: #d5f4e6; \n            color: #27ae60; \n            border: 1px solid #27ae60;\n        }\n        .complexity-medium { \n            background-color: #fef5e7; \n            color: #f39c12; \n            border: 1px solid #f39c12;\n        }\n        .complexity-high { \n            background-color: #fadbd8; \n            color: #e74c3c; \n            border: 1px solid #e74c3c;\n        }\n        \n        .ticket-content { \n            padding: 20px; \n        }\n        \n        .ticket-details {\n            background-color: #f8f9fa;\n            padding: 15px;\n            margin: 15px 0;\n            border: 1px solid #e5e5e5;\n            border-left: 3px solid #003f7f;\n            border-radius: 4px;\n        }\n        .ticket-details h4 {\n            margin: 0 0 10px 0;\n            color: #003f7f;\n            font-size: 13px;\n            font-weight: 600;\n        }\n        .details-content {\n            font-size: 12px;\n            line-height: 1.4;\n            color: #555;\n            white-space: pre-line;\n        }\n        \n        .ticket-link {\n            text-align: center;\n            margin-top: 15px;\n        }\n        .ticket-link a {\n            background-color: #003f7f;\n            color: white;\n            text-decoration: none;\n            font-weight: 600;\n            font-size: 13px;\n            padding: 10px 20px;\n            border-radius: 6px;\n            display: inline-block;\n            transition: all 0.3s;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        .ticket-link a:hover {\n            background-color: #002a5c;\n            transform: translateY(-1px);\n            box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n        }\n        \n        .footer { \n            padding: 20px; \n            border-top: 2px solid #e5e5e5; \n            color: #7f8c8d; \n            font-size: 11px;\n            background-color: #f8f9fa;\n        }\n        .footer-content {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n        }\n        .footer-section h4 {\n            margin: 0 0 8px 0;\n            color: #003f7f;\n            font-size: 12px;\n            font-weight: 600;\n        }\n        .footer-section p {\n            margin: 0;\n            line-height: 1.4;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"email-container\">\n        <div class=\"header\">\n            <h1>Sprint Refinement Analysis</h1>\n            <p>Altrad Services - APEX Development Team | ${currentDate} | ${summary.totalIssues} Issues voor Review</p>\n        </div>\n\n        <div class=\"summary\">\n            <h2>Refinement Overview</h2>\n            <table style=\"width: 100%; border-collapse: collapse; margin-top: 15px;\">\n                <tr>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #003f7f;\">${summary.totalStoryPoints}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Total Story Points</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #27ae60;\">${summary.readyCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Ready for Sprint</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #f39c12;\">${summary.needsWorkCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Require Clarification</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #e74c3c;\">${summary.blockedCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Blocked</div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n\n        ${insightsHtml}\n\n        ${needsWorkHtml}\n\n        ${navigationHtml}\n\n        ${ticketsSectionsHtml}\n\n        <div class=\"footer\">\n            <table style=\"width: 100%; border-collapse: collapse;\">\n                <tr>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Contact Information</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">Marco Schlicher<br>\n                        Oracle APEX Developer<br>\n                        Altrad Services<br>\n                        Marco.Schlicher@altrad.com</p>\n                    </td>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Next Refinement Meeting</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">${nextRefinementDate}<br>\n                        11:00 - 12:00<br>\n                         Teams</p>\n                    </td>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Sprint Information</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">\n                          ${sprintName}<br>\n                          Team Capacity: 40 Story Points<br>\n                          Sprint Start: ${sprintStart}<br>\n                          Sprint End: ${sprintEnd}\n                        </p>\n                    </td>\n                </tr>\n            </table>\n            <p style=\"margin-top: 20px; text-align: center; font-style: italic; font-size: 11px; color: #7f8c8d;\">\n                Automatisch gegenereerd door APEX Sprint Analyzer | Altrad Services © 2025\n            </p>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\n// **UPDATED** DYNAMIC EMAIL SUBJECT  (met sprintName)\nconst emailSubject = `Altrad Sprint Refinement - ${sprintName} - ${summary.totalIssues} Issues (${summary.totalStoryPoints} SP) - ${currentDate}`;\n\nconsole.log(`Generated email with subject: ${emailSubject}`);\nconsole.log(`Summary: ${summary.totalIssues} issues, ${summary.readyCount} ready, ${summary.needsWorkCount} needs work, ${summary.blockedCount} blocked`);\n\n// RETURN FINAL EMAIL DATA\nreturn [{\n  json: {\n    emailSubject: emailSubject,\n    emailHtml: fullHtml,\n    recipients: [\n      \"development.team@altradservices.com\", \n      \"team@altradservices.com\"\n    ],\n    summary: summary,\n    issueCount: issues.length,\n    generatedAt: new Date().toISOString(),\n    debugInfo: {\n      ticketsProcessed: issues.length,\n      summaryData: summary,\n      parseSuccess: inputData.parseSuccess\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        240
      ],
      "id": "e7d8e851-265c-4d82-827b-b6cf088bf7de",
      "name": "Code"
    },
    {
      "parameters": {
        "fromEmail": "refinement_wom@n8n.go-knowledge.nl",
        "toEmail": "={{ $('On form submission').item.json[\"Meerdere e-mailadressen\"] }}",
        "subject": "={{ $json.emailSubject }}",
        "emailFormat": "both",
        "text": "={{ $json.emailSubject }}",
        "html": "={{ $json.emailHtml }}",
        "options": {
          "appendAttribution": false,
          "bccEmail": "ton.jacobs@go-knowledge.com"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1280,
        240
      ],
      "id": "410a7c4a-f778-4689-8daf-6dc7f9e8f7df",
      "name": "Send email",
      "webhookId": "a5b1dbf1-91c1-415f-a695-b45d0175eb0b",
      "credentials": {
        "smtp": {
          "id": "GxgKUVBWDGckejgn",
          "name": "Refinement WOM"
        }
      }
    },
    {
      "parameters": {
        "url": "https://altradservices-bnl.atlassian.net/rest/agile/1.0/board/43/sprint?state=active",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "jiraSoftwareCloudApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -192,
        240
      ],
      "id": "c25c5661-13ba-456b-9da8-05d5e51836fc",
      "name": "HTTP Request",
      "credentials": {
        "httpBasicAuth": {
          "id": "E4b7CmW8gisIRQ8H",
          "name": "Login Contract Assessment Agent"
        },
        "jiraSoftwareCloudApi": {
          "id": "iyrcBYrNur9VgGDe",
          "name": "Jira SW Cloud account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// DYNAMISCHE Email Generator Code Node voor n8n - ALTRAD STYLED VERSION\nconst inputData = $input.first().json;\n\n// Handle different input structures\nlet issues, summary;\nif (inputData.issues) {\n  // New structure: direct object with issues and summary\n  issues = inputData.issues || [];\n  summary = inputData.summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n} else if (Array.isArray(inputData) && inputData[0] && inputData[0].issues) {\n  // Array structure\n  issues = inputData[0].issues || [];\n  summary = inputData[0].summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n} else {\n  // Fallback for old structure\n  issues = inputData.issues || [];\n  summary = inputData.summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n}\n\nconsole.log(`Processing ${issues.length} issues with ${summary.totalStoryPoints} total story points`);\n\nconst currentDate = new Date().toLocaleDateString('nl-NL', {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n});\n\n// Calculate next Wednesday for refinement meeting\nfunction getNextWednesday() {\n  const today = new Date();\n  const nextWednesday = new Date();\n  const daysUntilWednesday = (3 - today.getDay() + 7) % 7; // 3 = Wednesday\n  \n  // If today is Wednesday, get next Wednesday (7 days later)\n  if (daysUntilWednesday === 0) {\n    nextWednesday.setDate(today.getDate() + 7);\n  } else {\n    nextWednesday.setDate(today.getDate() + daysUntilWednesday);\n  }\n  \n  return nextWednesday.toLocaleDateString('nl-NL', {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\n\nconst nextRefinementDate = getNextWednesday();\n\n// Helper functions\nfunction getReadinessClass(readiness) {\n  return readiness.toLowerCase().replace(' ', '-');\n}\n\nfunction getComplexityLevel(complexity) {\n  if (complexity <= 3) return 'low';\n  if (complexity <= 6) return 'medium';\n  return 'high';\n}\n\nfunction getPriorityLevel(priority) {\n  if (!priority) return 'medium';\n  const p = priority.toLowerCase();\n  if (p.includes('highest') || p.includes('critical')) return 'critical';\n  if (p.includes('high')) return 'high';\n  if (p.includes('low')) return 'low';\n  return 'medium';\n}\n\nfunction extractSummaryFromMarkdown(markdown, originalDescription = '') {\n  if (!markdown && !originalDescription) return 'No summary available';\n  \n  // First try to extract from **What:** section in markdown\n  if (markdown) {\n    const whatMatch = markdown.match(/\\*\\*What:\\*\\*\\s*([^*\\n]+)/);\n    if (whatMatch) {\n      let summary = whatMatch[1].trim();\n      // Limit to 200 characters for better display\n      if (summary.length > 200) {\n        summary = summary.substring(0, 197) + '...';\n      }\n      return summary;\n    }\n  }\n  \n  // Fallback to original description if available\n  if (originalDescription) {\n    let desc = originalDescription.trim();\n    // Clean up Jira markup\n    desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n    desc = desc.replace(/\\n\\s*\\n/g, ' '); // Replace multiple newlines with space\n    desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n    \n    if (desc.length > 200) {\n      desc = desc.substring(0, 197) + '...';\n    }\n    return desc;\n  }\n  \n  // Final fallback: extract from markdown content\n  if (markdown) {\n    const lines = markdown.split('\\n');\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (line && !line.startsWith('#') && !line.startsWith('**')) {\n        return line.length > 200 ? line.substring(0, 197) + '...' : line;\n      }\n    }\n  }\n  \n  return 'No summary available';\n}\n\n// Extract additional details from markdown - ENHANCED VERSION\nfunction extractTicketDetails(markdown) {\n  if (!markdown) return 'Geen details beschikbaar.';\n  \n  const details = {};\n  \n  // Extract all sections\n  const whoMatch = markdown.match(/\\*\\*Who:\\*\\*\\s*([^*\\n]+)/);\n  const whatMatch = markdown.match(/\\*\\*What:\\*\\*\\s*([^*\\n]+)/);\n  const whereMatch = markdown.match(/\\*\\*Where:\\*\\*\\s*([^*\\n]+)/);\n  const whyMatch = markdown.match(/\\*\\*Why:\\*\\*\\s*([^*\\n]+)/);\n  const whenMatch = markdown.match(/\\*\\*When:\\*\\*\\s*([^*\\n]+)/);\n  const priorityMatch = markdown.match(/\\*\\*Priority:\\*\\*\\s*([^*\\n]+)/);\n  \n  if (whoMatch) details.who = whoMatch[1].trim();\n  if (whatMatch) details.what = whatMatch[1].trim();\n  if (whereMatch) details.where = whereMatch[1].trim();\n  if (whyMatch) details.why = whyMatch[1].trim();\n  if (whenMatch) details.when = whenMatch[1].trim();\n  if (priorityMatch) details.priority = priorityMatch[1].trim();\n  \n  // Create enhanced format with priority indicators\n  let compact = '';\n  if (details.who) compact += `WHO: ${details.who} | `;\n  if (details.what) compact += `WHAT: ${details.what.length > 80 ? details.what.substring(0, 77) + '...' : details.what} | `;\n  if (details.where) compact += `WHERE: ${details.where} | `;\n  if (details.priority) compact += `PRIORITY: ${details.priority}`;\n  \n  return compact || 'Details beschikbaar in Jira.';\n}\n\n// Extract requester from markdown\nfunction extractRequester(markdown) {\n  if (!markdown) return 'Unknown';\n  \n  const whoMatch = markdown.match(/\\*\\*Who:\\*\\*\\s*([^*\\n]+)/);\n  if (whoMatch) {\n    let whoText = whoMatch[1].trim();\n    \n    // Clean up common patterns\n    whoText = whoText.replace(/WOM Support Mail\\s*-\\s*/gi, '');\n    whoText = whoText.replace(/\\(.*?\\)/g, ''); // Remove all parentheses content\n    whoText = whoText.replace(/reported this issue and.*$/gi, ''); // Remove long descriptions\n    whoText = whoText.replace(/roles in.*$/gi, ''); // Remove role descriptions\n    \n    // Extract actual names, skip role descriptions\n    const namePatterns = [\n      /([A-Z][a-z]+ [A-Z][a-z]+ [A-Z][a-z]+)/, // \"Firstname Middlename Lastname\" \n      /([A-Z][a-z]+ [A-Z][a-z]+)/, // \"Firstname Lastname\"\n      /([A-Z][a-z]+)/ // Just \"Firstname\"\n    ];\n    \n    const excludeRoles = ['Requester', 'Coordinator', 'Werfleider', 'Reporter', 'Creator', 'Assignee'];\n    \n    for (const pattern of namePatterns) {\n      const match = whoText.match(pattern);\n      if (match && !excludeRoles.includes(match[1])) {\n        return match[1].trim();\n      }\n    }\n    \n    // Fallback: take first word if it's a proper name\n    const firstWord = whoText.split(/[,;\\s]+/)[0].trim();\n    if (firstWord && firstWord.match(/^[A-Z][a-z]+$/) && !excludeRoles.includes(firstWord)) {\n      return firstWord;\n    }\n    \n    // If we found roles like \"Reporter\" or \"Assignee\", try to extract the actual name\n    if (whoText.includes('Reporter') || whoText.includes('Assignee')) {\n      // Look for pattern like \"Name (Reporter)\" or \"Name (Assignee)\"\n      const roleMatch = whoText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)\\s*\\((?:Reporter|Assignee|Creator)/);\n      if (roleMatch) {\n        return roleMatch[1].trim();\n      }\n    }\n  }\n  \n  return 'Unknown';\n}\n\n// Parse story points from string format \"2 à 3\" to numeric value\nfunction parseStoryPoints(storyPointsStr) {\n  if (!storyPointsStr) return 0;\n  if (typeof storyPointsStr === 'number') return storyPointsStr;\n  \n  // Handle formats like \"2 à 3\", \"3 à 5\", \"1 à 2\"\n  const match = storyPointsStr.toString().match(/(\\d+)\\s*à\\s*(\\d+)/);\n  if (match) {\n    return parseInt(match[2]); // Use the higher number\n  }\n  \n  // Handle simple numbers\n  const simpleMatch = storyPointsStr.toString().match(/(\\d+)/);\n  if (simpleMatch) {\n    return parseInt(simpleMatch[1]);\n  }\n  \n  return 0;\n}\n\n// Group issues by requester - ENHANCED\nfunction groupIssuesByRequester(issues) {\n  const grouped = {};\n  \n  for (const issue of issues) {\n    const requester = extractRequester(issue.markdown);\n    \n    if (!grouped[requester]) {\n      grouped[requester] = {\n        tickets: [],\n        totalStoryPoints: 0,\n        readyCount: 0,\n        needsWorkCount: 0,\n        blockedCount: 0,\n        criticalCount: 0,\n        highPriorityCount: 0\n      };\n    }\n    \n    // Extract priority for enhanced tracking\n    const details = extractTicketDetails(issue.markdown);\n    const priorityLevel = getPriorityLevel(details.priority || issue.priority);\n    \n    // Use pre-parsed story points or parse if not available\n    const storyPointsValue = issue.storyPointsValue || parseStoryPoints(issue.storyPoints);\n    \n    // Add priority info to issue\n    const enhancedIssue = {...issue, priorityLevel, details, storyPointsValue};\n    \n    grouped[requester].tickets.push(enhancedIssue);\n    grouped[requester].totalStoryPoints += storyPointsValue;\n    \n    const readiness = issue.sprintReadiness || 'Unknown';\n    if (readiness === 'Ready') {\n      grouped[requester].readyCount++;\n    } else if (readiness === 'Needs Work') {\n      grouped[requester].needsWorkCount++;\n    } else if (readiness === 'Blocked') {\n      grouped[requester].blockedCount++;\n    }\n    \n    // Track priority levels\n    if (priorityLevel === 'critical') {\n      grouped[requester].criticalCount++;\n    } else if (priorityLevel === 'high') {\n      grouped[requester].highPriorityCount++;\n    }\n  }\n  \n  // Sort tickets within each requester by priority then readiness\n  Object.keys(grouped).forEach(requester => {\n    grouped[requester].tickets.sort((a, b) => {\n      const priorityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };\n      const readinessOrder = { 'Ready': 0, 'Needs Work': 1, 'Blocked': 2, 'Unknown': 3 };\n      \n      const priorityDiff = priorityOrder[a.priorityLevel] - priorityOrder[b.priorityLevel];\n      if (priorityDiff !== 0) return priorityDiff;\n      \n      return readinessOrder[a.sprintReadiness || 'Unknown'] - readinessOrder[b.sprintReadiness || 'Unknown'];\n    });\n  });\n  \n  return grouped;\n}\n\n// Generate ticket HTML - ENHANCED WITH PRIORITY\nfunction generateTicketHtml(issue, detailed = false) {\n  const key = issue.key || 'UNKNOWN';\n  const storyPointsValue = issue.storyPointsValue || parseStoryPoints(issue.storyPoints);\n  const storyPointsDisplay = issue.storyPoints || storyPointsValue; // Keep original format for display\n  const sprintReadiness = issue.sprintReadiness || 'Unknown';\n  const complexity = issue.technicalComplexity || 0;\n  const clarity = issue.clarityScore || 0;\n  const priorityLevel = issue.priorityLevel || 'medium';\n  \n  const readinessClass = getReadinessClass(sprintReadiness);\n  const complexityLevel = getComplexityLevel(complexity);\n  const issueSummary = extractSummaryFromMarkdown(issue.markdown, issue.description);\n  \n  // Priority styling\n  const priorityColor = priorityLevel === 'critical' ? '#e74c3c' : \n                       priorityLevel === 'high' ? '#f39c12' : \n                       priorityLevel === 'low' ? '#27ae60' : '#3498db';\n  \n  let contentHtml = '';\n  \n  if (detailed) {\n    const ticketDetails = extractTicketDetails(issue.markdown);\n    \n    // Enhanced details - use original description for problematic tickets\n    let detailsDisplay = '';\n    \n    // Check if this is one of the problematic tickets that need special handling\n    const problematicTickets = ['WOMDEV-1959', 'WOMDEV-1957', 'WOMDEV-1938'];\n    \n    if (problematicTickets.includes(key) && issue.description) {\n      // For these specific tickets, prioritize the original description\n      let desc = issue.description.trim();\n      desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n      desc = desc.replace(/\\n\\s*\\n/g, '\\n'); // Clean up extra newlines\n      desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n      \n      // Keep more content for these important tickets\n      if (desc.length > 400) {\n        desc = desc.substring(0, 397) + '...';\n      }\n      detailsDisplay = desc;\n    } else if (ticketDetails && ticketDetails !== 'Details beschikbaar in Jira.' && ticketDetails !== 'Geen details beschikbaar.') {\n      // Use extracted markdown details if they're good\n      detailsDisplay = ticketDetails;\n    } else if (issue.description) {\n      // Fallback to original description for other tickets\n      let desc = issue.description.trim();\n      desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n      desc = desc.replace(/\\n\\s*\\n/g, '\\n'); // Clean up extra newlines\n      desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n      if (desc.length > 350) {\n        desc = desc.substring(0, 347) + '...';\n      }\n      detailsDisplay = desc;\n    } else {\n      detailsDisplay = ticketDetails || 'Geen aanvullende details beschikbaar.';\n    }\n    \n    // Always show detailed content for detailed view\n    contentHtml = `\n      <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 15px; padding: 15px; background-color: #f8f9fa; border: 1px solid #e5e5e5; border-radius: 6px;\">\n        <tr>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${complexity}/10</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Complexity</div>\n          </td>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${clarity}/10</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Clarity</div>\n          </td>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${storyPointsDisplay}</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Story Points</div>\n          </td>\n        </tr>\n      </table>\n      \n      <div class=\"ticket-details\">\n        <h4 style=\"color: #003f7f;\">Ticket Details</h4>\n        <div class=\"details-content\" style=\"white-space: pre-wrap; font-size: 12px; line-height: 1.4; color: #555;\">${detailsDisplay}</div>\n      </div>\n    `;\n  }\n  \n  // Critical issue styling\n  const criticalBorder = priorityLevel === 'critical' ? 'border: 3px solid #e74c3c !important;' : '';\n  \n  return `\n    <div class=\"ticket\" style=\"${criticalBorder}\">\n      <div class=\"ticket-header\">\n        <div class=\"ticket-title\">${key}: ${issueSummary}</div>\n        <div class=\"ticket-badges\">\n          <span class=\"badge story-points\">${storyPointsDisplay} SP</span>\n          <span class=\"badge\" style=\"background-color: ${priorityColor}; color: white;\">${priorityLevel.toUpperCase()}</span>\n          <span class=\"badge readiness-${readinessClass}\">${sprintReadiness.toUpperCase()}</span>\n          <span class=\"badge complexity-${complexityLevel}\">${complexityLevel.toUpperCase()}</span>\n        </div>\n      </div>\n      <div class=\"ticket-content\">\n        ${contentHtml}\n        <div class=\"ticket-link\">\n          <a href=\"${issue.url || `https://altradservices-bnl.atlassian.net/browse/${key}`}\">🔗 Bekijk in Jira</a>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Generate navigation HTML - SIMPLE WITH BETTER COLORS\nfunction generateNavigationHtml(groupedIssues) {\n  const requesters = Object.keys(groupedIssues).sort();\n  \n  const linksHtml = requesters.map(requester => {\n    const data = groupedIssues[requester];\n    const anchorId = requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/^-+|-+$/g, '');\n    \n    const criticalAlert = data.criticalCount > 0 ? 'background-color: #e74c3c !important;' : '';\n    \n    return `<a href=\"#${anchorId}\" class=\"requester-link\" style=\"${criticalAlert}color: white !important;\">${requester} <span class=\"requester-count\">${data.tickets.length}</span>${data.criticalCount > 0 ? ` <span style=\"background-color: rgba(255,255,255,0.3); color: white; padding: 2px 6px; border-radius: 10px; margin-left: 5px; font-size: 9px;\">⚠ ${data.criticalCount} KRITIEK</span>` : ''}</a>`;\n  }).join('');\n  \n  return `\n    <div class=\"requester-navigation\">\n      <h2>Navigatie per Requester</h2>\n      <div class=\"requester-links\">\n        ${linksHtml}\n      </div>\n    </div>\n  `;\n}\n\n// Generate requester sections HTML - ENHANCED\nfunction generateRequesterSectionsHtml(groupedIssues) {\n  const requesters = Object.keys(groupedIssues).sort();\n  let sectionsHtml = '';\n  \n  for (const requester of requesters) {\n    const data = groupedIssues[requester];\n    // Create clean anchor ID matching navigation\n    const anchorId = requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '') // Remove special characters\n      .replace(/\\s+/g, '-') // Replace spaces with hyphens\n      .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens\n    \n    let ticketsHtml = '';\n    \n    // Show first 3 tickets in detail, rest simplified\n    for (let i = 0; i < data.tickets.length; i++) {\n      //const detailed = i < 3; // First 3 tickets get detailed view\n      const detailed = true;\n      ticketsHtml += generateTicketHtml(data.tickets[i], detailed);\n    }\n    \n    // Critical section styling\n    const criticalSection = data.criticalCount > 0 ? 'border-left: 5px solid #e74c3c;' : '';\n    \n    sectionsHtml += `\n      <div class=\"requester-section\" id=\"${anchorId}\" style=\"${criticalSection}\">\n        <div class=\"requester-header\" style=\"background-color: #003f7f;\">\n          <h3>${requester}</h3>\n          <div class=\"requester-stats\">${data.tickets.length} tickets • ${data.totalStoryPoints} story points • ${data.readyCount} ready, ${data.needsWorkCount} need work${data.criticalCount > 0 ? ` • <span style=\"color: #ff6600; font-weight: bold;\">⚠ ${data.criticalCount} KRITIEKE ITEMS</span>` : ''}</div>\n        </div>\n        <div style=\"padding: 0 20px;\">\n          ${ticketsHtml}\n        </div>\n      </div>\n    `;\n  }\n  \n  return sectionsHtml;\n}\n\n// Generate insights section - NEW\nfunction generateInsightsHtml(groupedIssues, summary) {\n  const totalRequesters = Object.keys(groupedIssues).length;\n  const criticalIssues = Object.values(groupedIssues).reduce((sum, data) => sum + data.criticalCount, 0);\n  const highPriorityIssues = Object.values(groupedIssues).reduce((sum, data) => sum + data.highPriorityCount, 0);\n  \n  const sprintCapacity = 40; // Assumed sprint capacity\n  const capacityUsage = Math.round((summary.totalStoryPoints / sprintCapacity) * 100);\n  \n  if (criticalIssues > 0 || capacityUsage > 80) {\n    return `\n      <div style=\"background-color: ${criticalIssues > 0 ? '#fdf2f2' : '#fff3cd'}; padding: 20px; margin: 0; border-left: 5px solid ${criticalIssues > 0 ? '#e74c3c' : '#f39c12'};\">\n        <h2 style=\"margin: 0 0 15px 0; font-size: 16px; color: ${criticalIssues > 0 ? '#e74c3c' : '#f39c12'}; font-weight: 600;\">⚠ Sprint Planning Alerts</h2>\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;\">\n          ${criticalIssues > 0 ? `\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid #e74c3c;\">\n            <div style=\"font-size: 18px; font-weight: 600; color: #e74c3c;\">${criticalIssues}</div>\n            <div style=\"font-size: 12px; color: #333;\">Kritieke Issues</div>\n            <div style=\"font-size: 10px; color: #666;\">Directe aandacht vereist</div>\n          </div>\n          ` : ''}\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid ${capacityUsage > 100 ? '#e74c3c' : '#f39c12'};\">\n            <div style=\"font-size: 18px; font-weight: 600; color: ${capacityUsage > 100 ? '#e74c3c' : '#f39c12'};\">${capacityUsage}%</div>\n            <div style=\"font-size: 12px; color: #333;\">Sprint Capaciteit</div>\n            <div style=\"font-size: 10px; color: #666;\">${summary.totalStoryPoints}/${sprintCapacity} story points</div>\n          </div>\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid #3498db;\">\n            <div style=\"font-size: 18px; font-weight: 600; color: #3498db;\">${totalRequesters}</div>\n            <div style=\"font-size: 12px; color: #333;\">Actieve Aanvragers</div>\n            <div style=\"font-size: 10px; color: #666;\">Verschillende teams</div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  return '';\n}\n\n// MAIN GENERATION LOGIC - FIXED\nlet navigationHtml = '';\nlet ticketsSectionsHtml = '';\nlet insightsHtml = '';\n\nif (issues.length > 0) {\n  // First, properly parse all story points from individual issues\n  const issuesWithParsedPoints = issues.map(issue => ({\n    ...issue,\n    storyPointsValue: parseStoryPoints(issue.storyPoints)\n  }));\n  \n  const groupedIssues = groupIssuesByRequester(issuesWithParsedPoints);\n  \n  // Recalculate summary with proper story points - completely override the malformed data\n  const calculatedSummary = {\n    totalIssues: issues.length,\n    totalStoryPoints: issuesWithParsedPoints.reduce((sum, issue) => sum + issue.storyPointsValue, 0),\n    readyCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Ready').length,\n    needsWorkCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Needs Work').length,\n    blockedCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Blocked').length,\n    avgComplexity: summary.avgComplexity || 0\n  };\n  \n  console.log(`Calculated summary: ${calculatedSummary.totalStoryPoints} total points, ${calculatedSummary.readyCount} ready, ${calculatedSummary.needsWorkCount} needs work`);\n  \n  navigationHtml = generateNavigationHtml(groupedIssues);\n  ticketsSectionsHtml = generateRequesterSectionsHtml(groupedIssues);\n  insightsHtml = generateInsightsHtml(groupedIssues, calculatedSummary);\n  \n  // Replace summary completely with calculated values\n  summary = calculatedSummary;\n  \n} else {\n  ticketsSectionsHtml = `\n    <div class=\"ticket\">\n      <div class=\"ticket-content\">\n        <p>No issues found or error in processing.</p>\n        <p>Debug info: ${JSON.stringify(inputData.debugInfo || {}, null, 2)}</p>\n      </div>\n    </div>\n  `;\n}\n\n// COMPLETE DYNAMIC HTML EMAIL - ALTRAD STYLED\nconst fullHtml = `\n<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { \n            font-family: 'Calibri', 'Segoe UI', Arial, sans-serif; \n            line-height: 1.5; \n            color: #2c3e50; \n            max-width: 800px;\n            margin: 0 auto;\n            background-color: #ffffff;\n        }\n        .email-container {\n            background-color: white;\n            margin: 0;\n            border: 1px solid #e5e5e5;\n        }\n        .header { \n            background-color: #003f7f;\n            color: white; \n            padding: 20px; \n            border-bottom: 3px solid #ff6600;\n            position: relative;\n        }\n        .header::after {\n            content: '';\n            position: absolute;\n            top: 0;\n            right: 0;\n            width: 80px;\n            height: 100%;\n            background-color: #ff6600;\n        }\n        .header h1 { \n            margin: 0; \n            font-size: 20px; \n            font-weight: 600;\n            position: relative;\n            z-index: 2;\n        }\n        .header p { \n            margin: 8px 0 0 0; \n            font-size: 14px;\n            opacity: 0.9; \n            position: relative;\n            z-index: 2;\n        }\n        \n        .summary { \n            background-color: #f8f9fa; \n            padding: 20px; \n            margin: 0;\n            border-bottom: 1px solid #e5e5e5;\n        }\n        .summary h2 {\n            margin: 0 0 15px 0; \n            font-size: 16px;\n            color: #003f7f;\n            font-weight: 600;\n        }\n        \n        .requester-navigation {\n            background-color: #ecf0f1;\n            padding: 20px;\n            margin: 0;\n            border-bottom: 2px solid #ff6600;\n        }\n        .requester-navigation h2 {\n            margin: 0 0 15px 0;\n            font-size: 16px;\n            color: #003f7f;\n            font-weight: 600;\n        }\n        .requester-links {\n            display: block;\n        }\n        .requester-link {\n            background-color: #003f7f;\n            color: white !important;\n            text-decoration: none !important;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n            display: inline-block;\n            margin: 5px 5px 5px 0;\n        }\n        .requester-link:hover {\n            background-color: #002a5c;\n            transform: translateY(-1px);\n            color: white !important;\n        }\n        .requester-count {\n            background-color: rgba(255,255,255,0.3);\n            padding: 2px 6px;\n            border-radius: 10px;\n            margin-left: 5px;\n            font-size: 10px;\n            color: white;\n        }\n        \n        .requester-section {\n            margin: 0;\n            border-bottom: 2px solid #e5e5e5;\n        }\n        .requester-header {\n            background-color: #003f7f;\n            color: white;\n            padding: 15px 20px;\n            margin: 0;\n        }\n        .requester-header h3 {\n            margin: 0;\n            font-size: 18px;\n            font-weight: 600;\n        }\n        .requester-stats {\n            font-size: 12px;\n            opacity: 0.9;\n            margin-top: 5px;\n        }\n        \n        .ticket { \n            border: 2px solid #e5e5e5;\n            border-radius: 8px;\n            margin: 15px 0;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            overflow: hidden;\n        }\n        \n        .ticket-header { \n            background-color: #f8f9fa; \n            padding: 15px 20px; \n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            flex-wrap: wrap;\n            gap: 10px;\n        }\n        .ticket-title {\n            font-weight: 700;\n            font-size: 16px;\n            color: #1d1d1f;\n            flex: 1;\n            min-width: 200px;\n            background-color: #fff9e6;\n            padding: 8px 12px;\n            border-radius: 4px;\n            border-left: 4px solid #ff6600;\n        }\n        .ticket-badges {\n            display: flex;\n            gap: 8px;\n            flex-wrap: wrap;\n        }\n        \n        .badge {\n            padding: 3px 8px; \n            border-radius: 3px; \n            font-size: 11px;\n            font-weight: 600;\n            text-transform: uppercase;\n            white-space: nowrap;\n        }\n        .story-points { \n            background-color: #003f7f; \n            color: white; \n        }\n        .readiness-ready { \n            background-color: #27ae60; \n            color: white; \n        }\n        .readiness-needs-work { \n            background-color: #f39c12; \n            color: white; \n        }\n        .readiness-blocked { \n            background-color: #e74c3c; \n            color: white; \n        }\n        .complexity-low { \n            background-color: #d5f4e6; \n            color: #27ae60; \n            border: 1px solid #27ae60;\n        }\n        .complexity-medium { \n            background-color: #fef5e7; \n            color: #f39c12; \n            border: 1px solid #f39c12;\n        }\n        .complexity-high { \n            background-color: #fadbd8; \n            color: #e74c3c; \n            border: 1px solid #e74c3c;\n        }\n        \n        .ticket-content { \n            padding: 20px; \n        }\n        \n        .ticket-details {\n            background-color: #f8f9fa;\n            padding: 15px;\n            margin: 15px 0;\n            border: 1px solid #e5e5e5;\n            border-left: 3px solid #003f7f;\n            border-radius: 4px;\n        }\n        .ticket-details h4 {\n            margin: 0 0 10px 0;\n            color: #003f7f;\n            font-size: 13px;\n            font-weight: 600;\n        }\n        .details-content {\n            font-size: 12px;\n            line-height: 1.4;\n            color: #555;\n            white-space: pre-line;\n        }\n        \n        .ticket-link {\n            text-align: center;\n            margin-top: 15px;\n        }\n        .ticket-link a {\n            background-color: #003f7f;\n            color: white;\n            text-decoration: none;\n            font-weight: 600;\n            font-size: 13px;\n            padding: 10px 20px;\n            border-radius: 6px;\n            display: inline-block;\n            transition: all 0.3s;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        .ticket-link a:hover {\n            background-color: #002a5c;\n            transform: translateY(-1px);\n            box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n        }\n        \n        .footer { \n            padding: 20px; \n            border-top: 2px solid #e5e5e5; \n            color: #7f8c8d; \n            font-size: 11px;\n            background-color: #f8f9fa;\n        }\n        .footer-content {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n        }\n        .footer-section h4 {\n            margin: 0 0 8px 0;\n            color: #003f7f;\n            font-size: 12px;\n            font-weight: 600;\n        }\n        .footer-section p {\n            margin: 0;\n            line-height: 1.4;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"email-container\">\n        <div class=\"header\">\n            <h1>Sprint Refinement Analysis</h1>\n            <p>Altrad Services - APEX Development Team | ${currentDate} | ${summary.totalIssues} Issues voor Review</p>\n        </div>\n\n        <div class=\"summary\">\n            <h2>Refinement Overview</h2>\n            <table style=\"width: 100%; border-collapse: collapse; margin-top: 15px;\">\n                <tr>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #003f7f;\">${summary.totalStoryPoints}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Total Story Points</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #27ae60;\">${summary.readyCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Ready for Sprint</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #f39c12;\">${summary.needsWorkCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Require Clarification</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #e74c3c;\">${summary.blockedCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Blocked</div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n\n        ${insightsHtml}\n\n        ${navigationHtml}\n\n        ${ticketsSectionsHtml}\n\n        <div class=\"footer\">\n            <table style=\"width: 100%; border-collapse: collapse;\">\n                <tr>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Contact Information</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">Marco Schlicher<br>\n                        Oracle APEX Developer<br>\n                        Altrad Services<br>\n                        Marco.Schlicher@altrad.com</p>\n                    </td>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Next Refinement Meeting</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">${nextRefinementDate}<br>\n                        11:00 - 12:00<br>\n                         Teams</p>\n                    </td>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Sprint Information</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\"> $('HTTP Request').first().json.values[0].name <br>\n                        Team Capacity: 40 Story Points<br>\n                        Sprint Start: 19 Augustus 2025</p>\n                    </td>\n                </tr>\n            </table>\n            <p style=\"margin-top: 20px; text-align: center; font-style: italic; font-size: 11px; color: #7f8c8d;\">\n                Automatisch gegenereerd door APEX Sprint Analyzer | Altrad Services © 2025\n            </p>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\n// DYNAMIC EMAIL SUBJECT  \nconst emailSubject = `Altrad Sprint Refinement - ${summary.totalIssues} Issues (${summary.totalStoryPoints} SP) - ${currentDate}`;\n\nconsole.log(`Generated email with subject: ${emailSubject}`);\nconsole.log(`Summary: ${summary.totalIssues} issues, ${summary.readyCount} ready, ${summary.needsWorkCount} needs work, ${summary.blockedCount} blocked`);\n\n// RETURN FINAL EMAIL DATA\nreturn [{\n  json: {\n    emailSubject: emailSubject,\n    emailHtml: fullHtml,\n    recipients: [\n      \"development.team@altradservices.com\", \n      \"team@altradservices.com\"\n    ],\n    summary: summary,\n    issueCount: issues.length,\n    generatedAt: new Date().toISOString(),\n    debugInfo: {\n      ticketsProcessed: issues.length,\n      summaryData: summary,\n      parseSuccess: inputData.parseSuccess\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -624,
        576
      ],
      "id": "2feb500a-05ef-4c3d-9453-fb48025652fa",
      "name": "Code1"
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "formTitle": "refinement mail",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Meerdere e-mailadressen",
              "placeholder": "jan@example.com, piet@example.com, klaas@example.com"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -448,
        240
      ],
      "id": "6b5f921e-ee37-4174-acfe-b567f3d03ebe",
      "name": "On form submission",
      "webhookId": "746b5aa9-2310-4bd2-aa2a-3c42e9378b4a",
      "credentials": {
        "httpBasicAuth": {
          "id": "AjZMdIwrjLg7zbLI",
          "name": "Refinerment inlog"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// DYNAMISCHE Email Generator Code Node voor n8n - ALTRAD STYLED VERSION\nconst inputData = $input.first().json;\n\n// **ADDED** Sprint info uit de HTTP Request node\nconst sprintItems = $items(\"HTTP Request\", 0, 0);\nconst sprintJson = sprintItems?.[0]?.json || {};\nconst activeSprint = sprintJson?.values?.[0] || {};\n\nfunction formatNl(d) {\n  if (!d) return \"Onbekend\";\n  const dt = new Date(d);\n  return dt.toLocaleDateString(\"nl-NL\", { day: \"numeric\", month: \"long\", year: \"numeric\" });\n}\n// **ADDED** Beschikbare sprint-variabelen\nconst sprintName = activeSprint?.name || \"Onbekende Sprint\";\nconst sprintStart = formatNl(activeSprint?.startDate);\nconst sprintEnd   = formatNl(activeSprint?.endDate);\n\n// Handle different input structures\nlet issues, summary;\nif (inputData.issues) {\n  // New structure: direct object with issues and summary\n  issues = inputData.issues || [];\n  summary = inputData.summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n} else if (Array.isArray(inputData) && inputData[0] && inputData[0].issues) {\n  // Array structure\n  issues = inputData[0].issues || [];\n  summary = inputData[0].summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n} else {\n  // Fallback for old structure\n  issues = inputData.issues || [];\n  summary = inputData.summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n}\n\nconsole.log(`Processing ${issues.length} issues with ${summary.totalStoryPoints} total story points`);\n\nconst currentDate = new Date().toLocaleDateString('nl-NL', {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n});\n\n// Calculate next Wednesday for refinement meeting\nfunction getNextWednesday() {\n  const today = new Date();\n  const nextWednesday = new Date();\n  const daysUntilWednesday = (3 - today.getDay() + 7) % 7; // 3 = Wednesday\n  \n  // If today is Wednesday, get next Wednesday (7 days later)\n  if (daysUntilWednesday === 0) {\n    nextWednesday.setDate(today.getDate() + 7);\n  } else {\n    nextWednesday.setDate(today.getDate() + daysUntilWednesday);\n  }\n  \n  return nextWednesday.toLocaleDateString('nl-NL', {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\n\nconst nextRefinementDate = getNextWednesday();\n\n// Helper functions\nfunction getReadinessClass(readiness) {\n  return readiness.toLowerCase().replace(' ', '-');\n}\n\nfunction getComplexityLevel(complexity) {\n  if (complexity <= 3) return 'low';\n  if (complexity <= 6) return 'medium';\n  return 'high';\n}\n\nfunction getPriorityLevel(priority) {\n  if (!priority) return 'medium';\n  const p = priority.toLowerCase();\n  if (p.includes('highest') || p.includes('critical')) return 'critical';\n  if (p.includes('high')) return 'high';\n  if (p.includes('low')) return 'low';\n  return 'medium';\n}\n\nfunction extractSummaryFromMarkdown(markdown, originalDescription = '') {\n  if (!markdown && !originalDescription) return 'No summary available';\n  \n  // First try to extract from **What:** section in markdown\n  if (markdown) {\n    const whatMatch = markdown.match(/\\*\\*What:\\*\\*\\s*([^*\\n]+)/);\n    if (whatMatch) {\n      let summary = whatMatch[1].trim();\n      // Limit to 200 characters for better display\n      if (summary.length > 200) {\n        summary = summary.substring(0, 197) + '...';\n      }\n      return summary;\n    }\n  }\n  \n  // Fallback to original description if available\n  if (originalDescription) {\n    let desc = originalDescription.trim();\n    // Clean up Jira markup\n    desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n    desc = desc.replace(/\\n\\s*\\n/g, ' '); // Replace multiple newlines with space\n    desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n    \n    if (desc.length > 200) {\n      desc = desc.substring(0, 197) + '...';\n    }\n    return desc;\n  }\n  \n  // Final fallback: extract from markdown content\n  if (markdown) {\n    const lines = markdown.split('\\n');\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (line && !line.startsWith('#') && !line.startsWith('**')) {\n        return line.length > 200 ? line.substring(0, 197) + '...' : line;\n      }\n    }\n  }\n  \n  return 'No summary available';\n}\n\n// Extract additional details from markdown - ENHANCED VERSION\nfunction extractTicketDetails(markdown) {\n  if (!markdown) return 'Geen details beschikbaar.';\n  \n  const details = {};\n  \n  // Extract all sections\n  const whoMatch = markdown.match(/\\*\\*Who:\\*\\*\\s*([^*\\n]+)/);\n  const whatMatch = markdown.match(/\\*\\*What:\\*\\*\\s*([^*\\n]+)/);\n  const whereMatch = markdown.match(/\\*\\*Where:\\*\\*\\s*([^*\\n]+)/);\n  const whyMatch = markdown.match(/\\*\\*Why:\\*\\*\\s*([^*\\n]+)/);\n  const whenMatch = markdown.match(/\\*\\*When:\\*\\*\\s*([^*\\n]+)/);\n  const priorityMatch = markdown.match(/\\*\\*Priority:\\*\\*\\s*([^*\\n]+)/);\n  \n  if (whoMatch) details.who = whoMatch[1].trim();\n  if (whatMatch) details.what = whatMatch[1].trim();\n  if (whereMatch) details.where = whereMatch[1].trim();\n  if (whyMatch) details.why = whyMatch[1].trim();\n  if (whenMatch) details.when = whenMatch[1].trim();\n  if (priorityMatch) details.priority = priorityMatch[1].trim();\n  \n  // Create enhanced format with priority indicators\n  let compact = '';\n  if (details.who) compact += `WHO: ${details.who} | `;\n  if (details.what) compact += `WHAT: ${details.what.length > 80 ? details.what.substring(0, 77) + '...' : details.what} | `;\n  if (details.where) compact += `WHERE: ${details.where} | `;\n  if (details.priority) compact += `PRIORITY: ${details.priority}`;\n  \n  return compact || 'Details beschikbaar in Jira.';\n}\n\n// Extract requester from markdown\nfunction extractRequester(markdown) {\n  if (!markdown) return 'Unknown';\n  \n  const whoMatch = markdown.match(/\\*\\*Who:\\*\\*\\s*([^*\\n]+)/);\n  if (whoMatch) {\n    let whoText = whoMatch[1].trim();\n    \n    // Clean up common patterns\n    whoText = whoText.replace(/WOM Support Mail\\s*-\\s*/gi, '');\n    whoText = whoText.replace(/\\(.*?\\)/g, ''); // Remove all parentheses content\n    whoText = whoText.replace(/reported this issue and.*$/gi, ''); // Remove long descriptions\n    whoText = whoText.replace(/roles in.*$/gi, ''); // Remove role descriptions\n    \n    // Extract actual names, skip role descriptions\n    const namePatterns = [\n      /([A-Z][a-z]+ [A-Z][a-z]+ [A-Z][a-z]+)/, // \"Firstname Middlename Lastname\" \n      /([A-Z][a-z]+ [A-Z][a-z]+)/, // \"Firstname Lastname\"\n      /([A-Z][a-z]+)/ // Just \"Firstname\"\n    ];\n    \n    const excludeRoles = ['Requester', 'Coordinator', 'Werfleider', 'Reporter', 'Creator', 'Assignee'];\n    \n    for (const pattern of namePatterns) {\n      const match = whoText.match(pattern);\n      if (match && !excludeRoles.includes(match[1])) {\n        return match[1].trim();\n      }\n    }\n    \n    // Fallback: take first word if it's a proper name\n    const firstWord = whoText.split(/[,;\\s]+/)[0].trim();\n    if (firstWord && firstWord.match(/^[A-Z][a-z]+$/) && !excludeRoles.includes(firstWord)) {\n      return firstWord;\n    }\n    \n    // If we found roles like \"Reporter\" or \"Assignee\", try to extract the actual name\n    if (whoText.includes('Reporter') || whoText.includes('Assignee')) {\n      // Look for pattern like \"Name (Reporter)\" or \"Name (Assignee)\"\n      const roleMatch = whoText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)\\s*\\((?:Reporter|Assignee|Creator)/);\n      if (roleMatch) {\n        return roleMatch[1].trim();\n      }\n    }\n  }\n  \n  return 'Unknown';\n}\n\n// Parse story points from string format \"2 à 3\" to numeric value\nfunction parseStoryPoints(storyPointsStr) {\n  if (!storyPointsStr) return 0;\n  if (typeof storyPointsStr === 'number') return storyPointsStr;\n  \n  // Handle formats like \"2 à 3\", \"3 à 5\", \"1 à 2\"\n  const match = storyPointsStr.toString().match(/(\\d+)\\s*à\\s*(\\d+)/);\n  if (match) {\n    return parseInt(match[2]); // Use the higher number\n  }\n  \n  // Handle simple numbers\n  const simpleMatch = storyPointsStr.toString().match(/(\\d+)/);\n  if (simpleMatch) {\n    return parseInt(simpleMatch[1]);\n  }\n  \n  return 0;\n}\n\n// Group issues by requester - ENHANCED\nfunction groupIssuesByRequester(issues) {\n  const grouped = {};\n  \n  for (const issue of issues) {\n    const requester = extractRequester(issue.markdown);\n    \n    if (!grouped[requester]) {\n      grouped[requester] = {\n        tickets: [],\n        totalStoryPoints: 0,\n        readyCount: 0,\n        needsWorkCount: 0,\n        blockedCount: 0,\n        criticalCount: 0,\n        highPriorityCount: 0\n      };\n    }\n    \n    // Extract priority for enhanced tracking\n    const details = extractTicketDetails(issue.markdown);\n    const priorityLevel = getPriorityLevel(details.priority || issue.priority);\n    \n    // Use pre-parsed story points or parse if not available\n    const storyPointsValue = issue.storyPointsValue || parseStoryPoints(issue.storyPoints);\n    \n    // Add priority info to issue\n    const enhancedIssue = {...issue, priorityLevel, details, storyPointsValue};\n    \n    grouped[requester].tickets.push(enhancedIssue);\n    grouped[requester].totalStoryPoints += storyPointsValue;\n    \n    const readiness = issue.sprintReadiness || 'Unknown';\n    if (readiness === 'Ready') {\n      grouped[requester].readyCount++;\n    } else if (readiness === 'Needs Work') {\n      grouped[requester].needsWorkCount++;\n    } else if (readiness === 'Blocked') {\n      grouped[requester].blockedCount++;\n    }\n    \n    // Track priority levels\n    if (priorityLevel === 'critical') {\n      grouped[requester].criticalCount++;\n    } else if (priorityLevel === 'high') {\n      grouped[requester].highPriorityCount++;\n    }\n  }\n  \n  // Sort tickets within each requester by priority then readiness\n  Object.keys(grouped).forEach(requester => {\n    grouped[requester].tickets.sort((a, b) => {\n      const priorityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };\n      const readinessOrder = { 'Ready': 0, 'Needs Work': 1, 'Blocked': 2, 'Unknown': 3 };\n      \n      const priorityDiff = priorityOrder[a.priorityLevel] - priorityOrder[b.priorityLevel];\n      if (priorityDiff !== 0) return priorityDiff;\n      \n      return readinessOrder[a.sprintReadiness || 'Unknown'] - readinessOrder[b.sprintReadiness || 'Unknown'];\n    });\n  });\n  \n  return grouped;\n}\n\n// Generate ticket HTML - ENHANCED WITH PRIORITY\nfunction generateTicketHtml(issue, detailed = false) {\n  const key = issue.key || 'UNKNOWN';\n  const storyPointsValue = issue.storyPointsValue || parseStoryPoints(issue.storyPoints);\n  const storyPointsDisplay = issue.storyPoints || storyPointsValue; // Keep original format for display\n  const sprintReadiness = issue.sprintReadiness || 'Unknown';\n  const complexity = issue.technicalComplexity || 0;\n  const clarity = issue.clarityScore || 0;\n  const priorityLevel = issue.priorityLevel || 'medium';\n  \n  const readinessClass = getReadinessClass(sprintReadiness);\n  const complexityLevel = getComplexityLevel(complexity);\n  const issueSummary = extractSummaryFromMarkdown(issue.markdown, issue.description);\n  \n  // Priority styling\n  const priorityColor = priorityLevel === 'critical' ? '#e74c3c' : \n                       priorityLevel === 'high' ? '#f39c12' : \n                       priorityLevel === 'low' ? '#27ae60' : '#3498db';\n  \n  let contentHtml = '';\n  \n  if (detailed) {\n    const ticketDetails = extractTicketDetails(issue.markdown);\n    \n    // Enhanced details - use original description for problematic tickets\n    let detailsDisplay = '';\n    \n    // Check if this is one of the problematic tickets that need special handling\n    const problematicTickets = ['WOMDEV-1959', 'WOMDEV-1957', 'WOMDEV-1938'];\n    \n    if (problematicTickets.includes(key) && issue.description) {\n      // For these specific tickets, prioritize the original description\n      let desc = issue.description.trim();\n      desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n      desc = desc.replace(/\\n\\s*\\n/g, '\\n'); // Clean up extra newlines\n      desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n      \n      // Keep more content for these important tickets\n      if (desc.length > 400) {\n        desc = desc.substring(0, 397) + '...';\n      }\n      detailsDisplay = desc;\n    } else if (ticketDetails && ticketDetails !== 'Details beschikbaar in Jira.' && ticketDetails !== 'Geen details beschikbaar.') {\n      // Use extracted markdown details if they're good\n      detailsDisplay = ticketDetails;\n    } else if (issue.description) {\n      // Fallback to original description for other tickets\n      let desc = issue.description.trim();\n      desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n      desc = desc.replace(/\\n\\s*\\n/g, '\\n'); // Clean up extra newlines\n      desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n      if (desc.length > 350) {\n        desc = desc.substring(0, 347) + '...';\n      }\n      detailsDisplay = desc;\n    } else {\n      detailsDisplay = ticketDetails || 'Geen aanvullende details beschikbaar.';\n    }\n    \n    // Always show detailed content for detailed view\n    contentHtml = `\n      <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 15px; padding: 15px; background-color: #f8f9fa; border: 1px solid #e5e5e5; border-radius: 6px;\">\n        <tr>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${complexity}/10</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Complexity</div>\n          </td>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${clarity}/10</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Clarity</div>\n          </td>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${storyPointsDisplay}</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Story Points</div>\n          </td>\n        </tr>\n      </table>\n      \n      <div class=\"ticket-details\">\n        <h4 style=\"color: #003f7f;\">Ticket Details</h4>\n        <div class=\"details-content\" style=\"white-space: pre-wrap; font-size: 12px; line-height: 1.4; color: #555;\">${detailsDisplay}</div>\n      </div>\n    `;\n  }\n  \n  // Critical issue styling\n  const criticalBorder = priorityLevel === 'critical' ? 'border: 3px solid #e74c3c !important;' : '';\n  \n  return `\n    <div class=\"ticket\" style=\"${criticalBorder}\">\n      <div class=\"ticket-header\">\n        <div class=\"ticket-title\">${key}: ${issueSummary}</div>\n        <div class=\"ticket-badges\">\n          <span class=\"badge story-points\">${storyPointsDisplay} SP</span>\n          <span class=\"badge\" style=\"background-color: ${priorityColor}; color: white;\">${priorityLevel.toUpperCase()}</span>\n          <span class=\"badge readiness-${readinessClass}\">${sprintReadiness.toUpperCase()}</span>\n          <span class=\"badge complexity-${complexityLevel}\">${complexityLevel.toUpperCase()}</span>\n        </div>\n      </div>\n      <div class=\"ticket-content\">\n        ${contentHtml}\n        <div class=\"ticket-link\">\n          <a href=\"${issue.url || `https://altradservices-bnl.atlassian.net/browse/${key}`}\">🔗 Bekijk in Jira</a>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Generate navigation HTML - SIMPLE WITH BETTER COLORS\nfunction generateNavigationHtml(groupedIssues) {\n  const requesters = Object.keys(groupedIssues).sort();\n  \n  const linksHtml = requesters.map(requester => {\n    const data = groupedIssues[requester];\n    const anchorId = requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/^-+|-+$/g, '');\n    \n    const criticalAlert = data.criticalCount > 0 ? 'background-color: #e74c3c !important;' : '';\n    \n    return `<a href=\"#${anchorId}\" class=\"requester-link\" style=\"${criticalAlert}color: white !important;\">${requester} <span class=\"requester-count\">${data.tickets.length}</span>${data.criticalCount > 0 ? ` <span style=\"background-color: rgba(255,255,255,0.3); color: white; padding: 2px 6px; border-radius: 10px; margin-left: 5px; font-size: 9px;\">⚠ ${data.criticalCount} KRITIEK</span>` : ''}</a>`;\n  }).join('');\n  \n  return `\n    <div class=\"requester-navigation\">\n      <h2>Navigatie per Requester</h2>\n      <div class=\"requester-links\">\n        ${linksHtml}\n      </div>\n    </div>\n  `;\n}\n\n// Generate requester sections HTML - ENHANCED\nfunction generateRequesterSectionsHtml(groupedIssues) {\n  const requesters = Object.keys(groupedIssues).sort();\n  let sectionsHtml = '';\n  \n  for (const requester of requesters) {\n    const data = groupedIssues[requester];\n    // Create clean anchor ID matching navigation\n    const anchorId = requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '') // Remove special characters\n      .replace(/\\s+/g, '-') // Replace spaces with hyphens\n      .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens\n    \n    let ticketsHtml = '';\n    \n    // Show first 3 tickets in detail, rest simplified\n    for (let i = 0; i < data.tickets.length; i++) {\n      //const detailed = i < 3; // First 3 tickets get detailed view\n      const detailed = true;\n      ticketsHtml += generateTicketHtml(data.tickets[i], detailed);\n    }\n    \n    // Critical section styling\n    const criticalSection = data.criticalCount > 0 ? 'border-left: 5px solid #e74c3c;' : '';\n    \n    sectionsHtml += `\n      <div class=\"requester-section\" id=\"${anchorId}\" style=\"${criticalSection}\">\n        <div class=\"requester-header\" style=\"background-color: #003f7f;\">\n          <h3>${requester}</h3>\n          <div class=\"requester-stats\">${data.tickets.length} tickets • ${data.totalStoryPoints} story points • ${data.readyCount} ready, ${data.needsWorkCount} need work${data.criticalCount > 0 ? ` • <span style=\"color: #ff6600; font-weight: bold;\">⚠ ${data.criticalCount} KRITIEKE ITEMS</span>` : ''}</div>\n        </div>\n        <div style=\"padding: 0 20px;\">\n          ${ticketsHtml}\n        </div>\n      </div>\n    `;\n  }\n  \n  return sectionsHtml;\n}\n\n// Generate insights section - NEW\nfunction generateInsightsHtml(groupedIssues, summary) {\n  const totalRequesters = Object.keys(groupedIssues).length;\n  const criticalIssues = Object.values(groupedIssues).reduce((sum, data) => sum + data.criticalCount, 0);\n  const highPriorityIssues = Object.values(groupedIssues).reduce((sum, data) => sum + data.highPriorityCount, 0);\n  \n  const sprintCapacity = 40; // Assumed sprint capacity\n  const capacityUsage = Math.round((summary.totalStoryPoints / sprintCapacity) * 100);\n  \n  if (criticalIssues > 0 || capacityUsage > 80) {\n    return `\n      <div style=\"background-color: ${criticalIssues > 0 ? '#fdf2f2' : '#fff3cd'}; padding: 20px; margin: 0; border-left: 5px solid ${criticalIssues > 0 ? '#e74c3c' : '#f39c12'};\">\n        <h2 style=\"margin: 0 0 15px 0; font-size: 16px; color: ${criticalIssues > 0 ? '#e74c3c' : '#f39c12'}; font-weight: 600;\">⚠ Sprint Planning Alerts</h2>\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;\">\n          ${criticalIssues > 0 ? `\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid #e74c3c;\">\n            <div style=\"font-size: 18px; font-weight: 600; color: #e74c3c;\">${criticalIssues}</div>\n            <div style=\"font-size: 12px; color: #333;\">Kritieke Issues</div>\n            <div style=\"font-size: 10px; color: #666;\">Directe aandacht vereist</div>\n          </div>\n          ` : ''}\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid ${capacityUsage > 100 ? '#e74c3c' : '#f39c12'};\">\n            <div style=\"font-size: 18px; font-weight: 600; color: ${capacityUsage > 100 ? '#e74c3c' : '#f39c12'};\">${capacityUsage}%</div>\n            <div style=\"font-size: 12px; color: #333;\">Sprint Capaciteit</div>\n            <div style=\"font-size: 10px; color: #666;\">${summary.totalStoryPoints}/${sprintCapacity} story points</div>\n          </div>\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid #3498db;\">\n            <div style=\"font-size: 18px; font-weight: 600; color: #3498db;\">${totalRequesters}</div>\n            <div style=\"font-size: 12px; color: #333;\">Actieve Aanvragers</div>\n            <div style=\"font-size: 10px; color: #666;\">Verschillende teams</div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  return '';\n}\n\n// MAIN GENERATION LOGIC - FIXED\nlet navigationHtml = '';\nlet ticketsSectionsHtml = '';\nlet insightsHtml = '';\n\nif (issues.length > 0) {\n  // First, properly parse all story points from individual issues\n  const issuesWithParsedPoints = issues.map(issue => ({\n    ...issue,\n    storyPointsValue: parseStoryPoints(issue.storyPoints)\n  }));\n  \n  const groupedIssues = groupIssuesByRequester(issuesWithParsedPoints);\n  \n  // Recalculate summary with proper story points - completely override the malformed data\n  const calculatedSummary = {\n    totalIssues: issues.length,\n    totalStoryPoints: issuesWithParsedPoints.reduce((sum, issue) => sum + issue.storyPointsValue, 0),\n    readyCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Ready').length,\n    needsWorkCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Needs Work').length,\n    blockedCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Blocked').length,\n    avgComplexity: summary.avgComplexity || 0\n  };\n  \n  console.log(`Calculated summary: ${calculatedSummary.totalStoryPoints} total points, ${calculatedSummary.readyCount} ready, ${calculatedSummary.needsWorkCount} needs work`);\n  \n  navigationHtml = generateNavigationHtml(groupedIssues);\n  ticketsSectionsHtml = generateRequesterSectionsHtml(groupedIssues);\n  insightsHtml = generateInsightsHtml(groupedIssues, calculatedSummary);\n  \n  // Replace summary completely with calculated values\n  summary = calculatedSummary;\n  \n} else {\n  ticketsSectionsHtml = `\n    <div class=\"ticket\">\n      <div class=\"ticket-content\">\n        <p>No issues found or error in processing.</p>\n        <p>Debug info: ${JSON.stringify(inputData.debugInfo || {}, null, 2)}</p>\n      </div>\n    </div>\n  `;\n}\n\n// COMPLETE DYNAMIC HTML EMAIL - ALTRAD STYLED\nconst fullHtml = `\n<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { \n            font-family: 'Calibri', 'Segoe UI', Arial, sans-serif; \n            line-height: 1.5; \n            color: #2c3e50; \n            max-width: 800px;\n            margin: 0 auto;\n            background-color: #ffffff;\n        }\n        .email-container {\n            background-color: white;\n            margin: 0;\n            border: 1px solid #e5e5e5;\n        }\n        .header { \n            background-color: #003f7f;\n            color: white; \n            padding: 20px; \n            border-bottom: 3px solid #ff6600;\n            position: relative;\n        }\n        .header::after {\n            content: '';\n            position: absolute;\n            top: 0;\n            right: 0;\n            width: 80px;\n            height: 100%;\n            background-color: #ff6600;\n        }\n        .header h1 { \n            margin: 0; \n            font-size: 20px; \n            font-weight: 600;\n            position: relative;\n            z-index: 2;\n        }\n        .header p { \n            margin: 8px 0 0 0; \n            font-size: 14px;\n            opacity: 0.9; \n            position: relative;\n            z-index: 2;\n        }\n        \n        .summary { \n            background-color: #f8f9fa; \n            padding: 20px; \n            margin: 0;\n            border-bottom: 1px solid #e5e5e5;\n        }\n        .summary h2 {\n            margin: 0 0 15px 0; \n            font-size: 16px;\n            color: #003f7f;\n            font-weight: 600;\n        }\n        \n        .requester-navigation {\n            background-color: #ecf0f1;\n            padding: 20px;\n            margin: 0;\n            border-bottom: 2px solid #ff6600;\n        }\n        .requester-navigation h2 {\n            margin: 0 0 15px 0;\n            font-size: 16px;\n            color: #003f7f;\n            font-weight: 600;\n        }\n        .requester-links {\n            display: block;\n        }\n        .requester-link {\n            background-color: #003f7f;\n            color: white !important;\n            text-decoration: none !important;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n            display: inline-block;\n            margin: 5px 5px 5px 0;\n        }\n        .requester-link:hover {\n            background-color: #002a5c;\n            transform: translateY(-1px);\n            color: white !important;\n        }\n        .requester-count {\n            background-color: rgba(255,255,255,0.3);\n            padding: 2px 6px;\n            border-radius: 10px;\n            margin-left: 5px;\n            font-size: 10px;\n            color: white;\n        }\n        \n        .requester-section {\n            margin: 0;\n            border-bottom: 2px solid #e5e5e5;\n        }\n        .requester-header {\n            background-color: #003f7f;\n            color: white;\n            padding: 15px 20px;\n            margin: 0;\n        }\n        .requester-header h3 {\n            margin: 0;\n            font-size: 18px;\n            font-weight: 600;\n        }\n        .requester-stats {\n            font-size: 12px;\n            opacity: 0.9;\n            margin-top: 5px;\n        }\n        \n        .ticket { \n            border: 2px solid #e5e5e5;\n            border-radius: 8px;\n            margin: 15px 0;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            overflow: hidden;\n        }\n        \n        .ticket-header { \n            background-color: #f8f9fa; \n            padding: 15px 20px; \n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            flex-wrap: wrap;\n            gap: 10px;\n        }\n        .ticket-title {\n            font-weight: 700;\n            font-size: 16px;\n            color: #1d1d1f;\n            flex: 1;\n            min-width: 200px;\n            background-color: #fff9e6;\n            padding: 8px 12px;\n            border-radius: 4px;\n            border-left: 4px solid #ff6600;\n        }\n        .ticket-badges {\n            display: flex;\n            gap: 8px;\n            flex-wrap: wrap;\n        }\n        \n        .badge {\n            padding: 3px 8px; \n            border-radius: 3px; \n            font-size: 11px;\n            font-weight: 600;\n            text-transform: uppercase;\n            white-space: nowrap;\n        }\n        .story-points { \n            background-color: #003f7f; \n            color: white; \n        }\n        .readiness-ready { \n            background-color: #27ae60; \n            color: white; \n        }\n        .readiness-needs-work { \n            background-color: #f39c12; \n            color: white; \n        }\n        .readiness-blocked { \n            background-color: #e74c3c; \n            color: white; \n        }\n        .complexity-low { \n            background-color: #d5f4e6; \n            color: #27ae60; \n            border: 1px solid #27ae60;\n        }\n        .complexity-medium { \n            background-color: #fef5e7; \n            color: #f39c12; \n            border: 1px solid #f39c12;\n        }\n        .complexity-high { \n            background-color: #fadbd8; \n            color: #e74c3c; \n            border: 1px solid #e74c3c;\n        }\n        \n        .ticket-content { \n            padding: 20px; \n        }\n        \n        .ticket-details {\n            background-color: #f8f9fa;\n            padding: 15px;\n            margin: 15px 0;\n            border: 1px solid #e5e5e5;\n            border-left: 3px solid #003f7f;\n            border-radius: 4px;\n        }\n        .ticket-details h4 {\n            margin: 0 0 10px 0;\n            color: #003f7f;\n            font-size: 13px;\n            font-weight: 600;\n        }\n        .details-content {\n            font-size: 12px;\n            line-height: 1.4;\n            color: #555;\n            white-space: pre-line;\n        }\n        \n        .ticket-link {\n            text-align: center;\n            margin-top: 15px;\n        }\n        .ticket-link a {\n            background-color: #003f7f;\n            color: white;\n            text-decoration: none;\n            font-weight: 600;\n            font-size: 13px;\n            padding: 10px 20px;\n            border-radius: 6px;\n            display: inline-block;\n            transition: all 0.3s;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        .ticket-link a:hover {\n            background-color: #002a5c;\n            transform: translateY(-1px);\n            box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n        }\n        \n        .footer { \n            padding: 20px; \n            border-top: 2px solid #e5e5e5; \n            color: #7f8c8d; \n            font-size: 11px;\n            background-color: #f8f9fa;\n        }\n        .footer-content {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n        }\n        .footer-section h4 {\n            margin: 0 0 8px 0;\n            color: #003f7f;\n            font-size: 12px;\n            font-weight: 600;\n        }\n        .footer-section p {\n            margin: 0;\n            line-height: 1.4;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"email-container\">\n        <div class=\"header\">\n            <h1>Sprint Refinement Analysis</h1>\n            <p>Altrad Services - APEX Development Team | ${currentDate} | ${summary.totalIssues} Issues voor Review</p>\n        </div>\n\n        <div class=\"summary\">\n            <h2>Refinement Overview</h2>\n            <table style=\"width: 100%; border-collapse: collapse; margin-top: 15px;\">\n                <tr>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #003f7f;\">${summary.totalStoryPoints}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Total Story Points</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #27ae60;\">${summary.readyCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Ready for Sprint</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #f39c12;\">${summary.needsWorkCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Require Clarification</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #e74c3c;\">${summary.blockedCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Blocked</div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n\n        ${insightsHtml}\n\n        ${navigationHtml}\n\n        ${ticketsSectionsHtml}\n\n        <div class=\"footer\">\n            <table style=\"width: 100%; border-collapse: collapse;\">\n                <tr>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Contact Information</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">Marco Schlicher<br>\n                        Oracle APEX Developer<br>\n                        Altrad Services<br>\n                        Marco.Schlicher@altrad.com</p>\n                    </td>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Next Refinement Meeting</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">${nextRefinementDate}<br>\n                        11:00 - 12:00<br>\n                         Teams</p>\n                    </td>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Sprint Information</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">\n                          ${sprintName}<br> <!-- **ADDED** -->\n                          Team Capacity: 40 Story Points<br>\n                          Sprint Start: ${sprintStart}<br> <!-- **ADDED** -->\n                          Sprint End: ${sprintEnd} <!-- **ADDED** -->\n                        </p>\n                    </td>\n                </tr>\n            </table>\n            <p style=\"margin-top: 20px; text-align: center; font-style: italic; font-size: 11px; color: #7f8c8d;\">\n                Automatisch gegenereerd door APEX Sprint Analyzer | Altrad Services © 2025\n            </p>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\n// **UPDATED** DYNAMIC EMAIL SUBJECT  (met sprintName)\nconst emailSubject = `Altrad Sprint Refinement - ${sprintName} - ${summary.totalIssues} Issues (${summary.totalStoryPoints} SP) - ${currentDate}`;\n\nconsole.log(`Generated email with subject: ${emailSubject}`);\nconsole.log(`Summary: ${summary.totalIssues} issues, ${summary.readyCount} ready, ${summary.needsWorkCount} needs work, ${summary.blockedCount} blocked`);\n\n// RETURN FINAL EMAIL DATA\nreturn [{\n  json: {\n    emailSubject: emailSubject,\n    emailHtml: fullHtml,\n    recipients: [\n      \"development.team@altradservices.com\", \n      \"team@altradservices.com\"\n    ],\n    summary: summary,\n    issueCount: issues.length,\n    generatedAt: new Date().toISOString(),\n    debugInfo: {\n      ticketsProcessed: issues.length,\n      summaryData: summary,\n      parseSuccess: inputData.parseSuccess\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        576
      ],
      "id": "45e94e13-9d92-44cf-a4c2-d99a53ba397b",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// DYNAMISCHE Email Generator Code Node voor n8n - ALTRAD STYLED VERSION\nconst inputData = $input.first().json;\n\n// **ADDED** Sprint info uit de HTTP Request node\nconst sprintItems = $items(\"HTTP Request\", 0, 0);\nconst sprintJson = sprintItems?.[0]?.json || {};\nconst activeSprint = sprintJson?.values?.[0] || {};\n\nfunction formatNl(d) {\n  if (!d) return \"Onbekend\";\n  const dt = new Date(d);\n  return dt.toLocaleDateString(\"nl-NL\", { day: \"numeric\", month: \"long\", year: \"numeric\" });\n}\n// **ADDED** Beschikbare sprint-variabelen\nconst sprintName = activeSprint?.name || \"Onbekende Sprint\";\nconst sprintStart = formatNl(activeSprint?.startDate);\nconst sprintEnd   = formatNl(activeSprint?.endDate);\n\n// Handle different input structures\nlet issues, summary;\nif (inputData.issues) {\n  // New structure: direct object with issues and summary\n  issues = inputData.issues || [];\n  summary = inputData.summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n} else if (Array.isArray(inputData) && inputData[0] && inputData[0].issues) {\n  // Array structure\n  issues = inputData[0].issues || [];\n  summary = inputData[0].summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n} else {\n  // Fallback for old structure\n  issues = inputData.issues || [];\n  summary = inputData.summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n}\n\nconsole.log(`Processing ${issues.length} issues with ${summary.totalStoryPoints} total story points`);\n\nconst currentDate = new Date().toLocaleDateString('nl-NL', {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n});\n\n// Calculate next Wednesday for refinement meeting\nfunction getNextWednesday() {\n  const today = new Date();\n  const nextWednesday = new Date();\n  const daysUntilWednesday = (3 - today.getDay() + 7) % 7; // 3 = Wednesday\n  \n  // If today is Wednesday, get next Wednesday (7 days later)\n  if (daysUntilWednesday === 0) {\n    nextWednesday.setDate(today.getDate() + 7);\n  } else {\n    nextWednesday.setDate(today.getDate() + daysUntilWednesday);\n  }\n  \n  return nextWednesday.toLocaleDateString('nl-NL', {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\n\nconst nextRefinementDate = getNextWednesday();\n\n// Helper functions\nfunction getReadinessClass(readiness) {\n  return readiness.toLowerCase().replace(' ', '-');\n}\n\nfunction getComplexityLevel(complexity) {\n  if (complexity <= 3) return 'low';\n  if (complexity <= 6) return 'medium';\n  return 'high';\n}\n\nfunction getPriorityLevel(priority) {\n  if (!priority) return 'medium';\n  const p = priority.toLowerCase();\n  if (p.includes('highest') || p.includes('critical')) return 'critical';\n  if (p.includes('high')) return 'high';\n  if (p.includes('low')) return 'low';\n  return 'medium';\n}\n\nfunction extractSummaryFromMarkdown(markdown, originalDescription = '') {\n  if (!markdown && !originalDescription) return 'No summary available';\n  \n  // First try to extract from **What:** section in markdown\n  if (markdown) {\n    const whatMatch = markdown.match(/\\*\\*What:\\*\\*\\s*([^*\\n]+)/);\n    if (whatMatch) {\n      let summary = whatMatch[1].trim();\n      // Limit to 200 characters for better display\n      if (summary.length > 200) {\n        summary = summary.substring(0, 197) + '...';\n      }\n      return summary;\n    }\n  }\n  \n  // Fallback to original description if available\n  if (originalDescription) {\n    let desc = originalDescription.trim();\n    // Clean up Jira markup\n    desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n    desc = desc.replace(/\\n\\s*\\n/g, ' '); // Replace multiple newlines with space\n    desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n    \n    if (desc.length > 200) {\n      desc = desc.substring(0, 197) + '...';\n    }\n    return desc;\n  }\n  \n  // Final fallback: extract from markdown content\n  if (markdown) {\n    const lines = markdown.split('\\n');\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (line && !line.startsWith('#') && !line.startsWith('**')) {\n        return line.length > 200 ? line.substring(0, 197) + '...' : line;\n      }\n    }\n  }\n  \n  return 'No summary available';\n}\n\n// Extract additional details from markdown - ENHANCED VERSION\nfunction extractTicketDetails(markdown) {\n  if (!markdown) return 'Geen details beschikbaar.';\n  \n  const details = {};\n  \n  // Extract all sections\n  const whoMatch = markdown.match(/\\*\\*Who:\\*\\*\\s*([^*\\n]+)/);\n  const whatMatch = markdown.match(/\\*\\*What:\\*\\*\\s*([^*\\n]+)/);\n  const whereMatch = markdown.match(/\\*\\*Where:\\*\\*\\s*([^*\\n]+)/);\n  const whyMatch = markdown.match(/\\*\\*Why:\\*\\*\\s*([^*\\n]+)/);\n  const whenMatch = markdown.match(/\\*\\*When:\\*\\*\\s*([^*\\n]+)/);\n  const priorityMatch = markdown.match(/\\*\\*Priority:\\*\\*\\s*([^*\\n]+)/);\n  \n  if (whoMatch) details.who = whoMatch[1].trim();\n  if (whatMatch) details.what = whatMatch[1].trim();\n  if (whereMatch) details.where = whereMatch[1].trim();\n  if (whyMatch) details.why = whyMatch[1].trim();\n  if (whenMatch) details.when = whenMatch[1].trim();\n  if (priorityMatch) details.priority = priorityMatch[1].trim();\n  \n  // Create enhanced format with priority indicators\n  let compact = '';\n  if (details.who) compact += `WHO: ${details.who} | `;\n  if (details.what) compact += `WHAT: ${details.what.length > 80 ? details.what.substring(0, 77) + '...' : details.what} | `;\n  if (details.where) compact += `WHERE: ${details.where} | `;\n  if (details.priority) compact += `PRIORITY: ${details.priority}`;\n  \n  return compact || 'Details beschikbaar in Jira.';\n}\n\n// Extract requester from markdown - VERBETERDE VERSIE DIE REPORTER PAKT, NIET ASSIGNEE\nfunction extractRequester(markdown) {\n  if (!markdown) return 'Unknown';\n  \n  const whoMatch = markdown.match(/\\*\\*Who:\\*\\*\\s*([^*\\n]+)/);\n  if (whoMatch) {\n    let whoText = whoMatch[1].trim();\n    \n    // Clean up WOM Support Mail prefix\n    whoText = whoText.replace(/WOM Support Mail\\s*-\\s*/gi, '');\n    \n    // PRIORITEIT 1: Zoek expliciet naar (Reporter)\n    const reporterMatch = whoText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)\\s*\\(Reporter\\)/);\n    if (reporterMatch) {\n      return reporterMatch[1].trim();\n    }\n    \n    // PRIORITEIT 2: Zoek naar (Creator) - vaak ook de reporter\n    const creatorMatch = whoText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)\\s*\\(Creator\\)/);\n    if (creatorMatch) {\n      return creatorMatch[1].trim();\n    }\n    \n    // PRIORITEIT 3: Identificeer de assignee om te vermijden\n    const assigneeMatch = whoText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)\\s*\\(Assignee\\)/);\n    const assigneeName = assigneeMatch ? assigneeMatch[1].trim() : null;\n    \n    // Verwijder alle haakjes en extra info voor verdere verwerking\n    let cleanText = whoText.replace(/\\(.*?\\)/g, ''); // Remove all parentheses content\n    cleanText = cleanText.replace(/reported this issue and.*$/gi, ''); // Remove long descriptions\n    cleanText = cleanText.replace(/roles in.*$/gi, ''); // Remove role descriptions\n    cleanText = cleanText.replace(/,\\s*$/, ''); // Remove trailing comma\n    \n    // PRIORITEIT 4: Extract alle mogelijke namen en kies de eerste die NIET de assignee is\n    const namePatterns = [\n      /([A-Z][a-z]+ [A-Z][a-z]+ [A-Z][a-z]+)/g, // \"Firstname Middlename Lastname\" \n      /([A-Z][a-z]+ [A-Z][a-z]+)/g, // \"Firstname Lastname\"\n      /([A-Z][a-z]+)/g // Just \"Firstname\"\n    ];\n    \n    const excludeRoles = ['Requester', 'Coordinator', 'Werfleider', 'Reporter', 'Creator', 'Assignee'];\n    \n    for (const pattern of namePatterns) {\n      const matches = [...cleanText.matchAll(pattern)];\n      for (const match of matches) {\n        const name = match[1].trim();\n        if (!excludeRoles.includes(name) && name !== assigneeName) {\n          return name;\n        }\n      }\n    }\n    \n    // LAATSTE RESORT: Pak de eerste naam, ook al is het misschien de assignee\n    const firstNameMatch = cleanText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)/);\n    if (firstNameMatch && !excludeRoles.includes(firstNameMatch[1])) {\n      return firstNameMatch[1].trim();\n    }\n  }\n  \n  return 'Unknown';\n}\n\n// Parse story points from string format \"2 à 3\" to numeric value\nfunction parseStoryPoints(storyPointsStr) {\n  if (!storyPointsStr) return 0;\n  if (typeof storyPointsStr === 'number') return storyPointsStr;\n  \n  // Handle formats like \"2 à 3\", \"3 à 5\", \"1 à 2\"\n  const match = storyPointsStr.toString().match(/(\\d+)\\s*à\\s*(\\d+)/);\n  if (match) {\n    return parseInt(match[2]); // Use the higher number\n  }\n  \n  // Handle simple numbers\n  const simpleMatch = storyPointsStr.toString().match(/(\\d+)/);\n  if (simpleMatch) {\n    return parseInt(simpleMatch[1]);\n  }\n  \n  return 0;\n}\n\n// Group issues by requester - ENHANCED\nfunction groupIssuesByRequester(issues) {\n  const grouped = {};\n  \n  for (const issue of issues) {\n    const requester = extractRequester(issue.markdown);\n    \n    if (!grouped[requester]) {\n      grouped[requester] = {\n        tickets: [],\n        totalStoryPoints: 0,\n        readyCount: 0,\n        needsWorkCount: 0,\n        blockedCount: 0,\n        criticalCount: 0,\n        highPriorityCount: 0\n      };\n    }\n    \n    // Extract priority for enhanced tracking\n    const details = extractTicketDetails(issue.markdown);\n    const priorityLevel = getPriorityLevel(details.priority || issue.priority);\n    \n    // Use pre-parsed story points or parse if not available\n    const storyPointsValue = issue.storyPointsValue || parseStoryPoints(issue.storyPoints);\n    \n    // Add priority info to issue\n    const enhancedIssue = {...issue, priorityLevel, details, storyPointsValue};\n    \n    grouped[requester].tickets.push(enhancedIssue);\n    grouped[requester].totalStoryPoints += storyPointsValue;\n    \n    const readiness = issue.sprintReadiness || 'Unknown';\n    if (readiness === 'Ready') {\n      grouped[requester].readyCount++;\n    } else if (readiness === 'Needs Work') {\n      grouped[requester].needsWorkCount++;\n    } else if (readiness === 'Blocked') {\n      grouped[requester].blockedCount++;\n    }\n    \n    // Track priority levels\n    if (priorityLevel === 'critical') {\n      grouped[requester].criticalCount++;\n    } else if (priorityLevel === 'high') {\n      grouped[requester].highPriorityCount++;\n    }\n  }\n  \n  // Sort tickets within each requester by priority then readiness\n  Object.keys(grouped).forEach(requester => {\n    grouped[requester].tickets.sort((a, b) => {\n      const priorityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };\n      const readinessOrder = { 'Ready': 0, 'Needs Work': 1, 'Blocked': 2, 'Unknown': 3 };\n      \n      const priorityDiff = priorityOrder[a.priorityLevel] - priorityOrder[b.priorityLevel];\n      if (priorityDiff !== 0) return priorityDiff;\n      \n      return readinessOrder[a.sprintReadiness || 'Unknown'] - readinessOrder[b.sprintReadiness || 'Unknown'];\n    });\n  });\n  \n  return grouped;\n}\n\n// Generate ticket HTML - ENHANCED WITH PRIORITY\nfunction generateTicketHtml(issue, detailed = false) {\n  const key = issue.key || 'UNKNOWN';\n  const storyPointsValue = issue.storyPointsValue || parseStoryPoints(issue.storyPoints);\n  const storyPointsDisplay = issue.storyPoints || storyPointsValue; // Keep original format for display\n  const sprintReadiness = issue.sprintReadiness || 'Unknown';\n  const complexity = issue.technicalComplexity || 0;\n  const clarity = issue.clarityScore || 0;\n  const priorityLevel = issue.priorityLevel || 'medium';\n  \n  const readinessClass = getReadinessClass(sprintReadiness);\n  const complexityLevel = getComplexityLevel(complexity);\n  const issueSummary = extractSummaryFromMarkdown(issue.markdown, issue.description);\n  \n  // Priority styling\n  const priorityColor = priorityLevel === 'critical' ? '#e74c3c' : \n                       priorityLevel === 'high' ? '#f39c12' : \n                       priorityLevel === 'low' ? '#27ae60' : '#3498db';\n  \n  let contentHtml = '';\n  \n  if (detailed) {\n    const ticketDetails = extractTicketDetails(issue.markdown);\n    \n    // Enhanced details - use original description for problematic tickets\n    let detailsDisplay = '';\n    \n    // Check if this is one of the problematic tickets that need special handling\n    const problematicTickets = ['WOMDEV-1959', 'WOMDEV-1957', 'WOMDEV-1938'];\n    \n    if (problematicTickets.includes(key) && issue.description) {\n      // For these specific tickets, prioritize the original description\n      let desc = issue.description.trim();\n      desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n      desc = desc.replace(/\\n\\s*\\n/g, '\\n'); // Clean up extra newlines\n      desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n      \n      // Keep more content for these important tickets\n      if (desc.length > 400) {\n        desc = desc.substring(0, 397) + '...';\n      }\n      detailsDisplay = desc;\n    } else if (ticketDetails && ticketDetails !== 'Details beschikbaar in Jira.' && ticketDetails !== 'Geen details beschikbaar.') {\n      // Use extracted markdown details if they're good\n      detailsDisplay = ticketDetails;\n    } else if (issue.description) {\n      // Fallback to original description for other tickets\n      let desc = issue.description.trim();\n      desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n      desc = desc.replace(/\\n\\s*\\n/g, '\\n'); // Clean up extra newlines\n      desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n      if (desc.length > 350) {\n        desc = desc.substring(0, 347) + '...';\n      }\n      detailsDisplay = desc;\n    } else {\n      detailsDisplay = ticketDetails || 'Geen aanvullende details beschikbaar.';\n    }\n    \n    // Always show detailed content for detailed view\n    contentHtml = `\n      <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 15px; padding: 15px; background-color: #f8f9fa; border: 1px solid #e5e5e5; border-radius: 6px;\">\n        <tr>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${complexity}/10</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Complexity</div>\n          </td>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${clarity}/10</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Clarity</div>\n          </td>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${storyPointsDisplay}</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Story Points</div>\n          </td>\n        </tr>\n      </table>\n      \n      <div class=\"ticket-details\">\n        <h4 style=\"color: #003f7f;\">Ticket Details</h4>\n        <div class=\"details-content\" style=\"white-space: pre-wrap; font-size: 12px; line-height: 1.4; color: #555;\">${detailsDisplay}</div>\n      </div>\n    `;\n  }\n  \n  // Critical issue styling\n  const criticalBorder = priorityLevel === 'critical' ? 'border: 3px solid #e74c3c !important;' : '';\n  \n  return `\n    <div class=\"ticket\" style=\"${criticalBorder}\">\n      <div class=\"ticket-header\">\n        <div class=\"ticket-title\">${key}: ${issueSummary}</div>\n        <div class=\"ticket-badges\">\n          <span class=\"badge story-points\">${storyPointsDisplay} SP</span>\n          <span class=\"badge\" style=\"background-color: ${priorityColor}; color: white;\">${priorityLevel.toUpperCase()}</span>\n          <span class=\"badge readiness-${readinessClass}\">${sprintReadiness.toUpperCase()}</span>\n          <span class=\"badge complexity-${complexityLevel}\">${complexityLevel.toUpperCase()}</span>\n        </div>\n      </div>\n      <div class=\"ticket-content\">\n        ${contentHtml}\n        <div class=\"ticket-link\">\n          <a href=\"${issue.url || `https://altradservices-bnl.atlassian.net/browse/${key}`}\">🔗 Bekijk in Jira</a>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Generate navigation HTML - SIMPLE WITH BETTER COLORS\nfunction generateNavigationHtml(groupedIssues) {\n  const requesters = Object.keys(groupedIssues).sort();\n  \n  const linksHtml = requesters.map(requester => {\n    const data = groupedIssues[requester];\n    const anchorId = requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/^-+|-+$/g, '');\n    \n    const criticalAlert = data.criticalCount > 0 ? 'background-color: #e74c3c !important;' : '';\n    \n    return `<a href=\"#${anchorId}\" class=\"requester-link\" style=\"${criticalAlert}color: white !important;\">${requester} <span class=\"requester-count\">${data.tickets.length}</span>${data.criticalCount > 0 ? ` <span style=\"background-color: rgba(255,255,255,0.3); color: white; padding: 2px 6px; border-radius: 10px; margin-left: 5px; font-size: 9px;\">⚠ ${data.criticalCount} KRITIEK</span>` : ''}</a>`;\n  }).join('');\n  \n  return `\n    <div class=\"requester-navigation\">\n      <h2>Navigatie per Requester</h2>\n      <div class=\"requester-links\">\n        ${linksHtml}\n      </div>\n    </div>\n  `;\n}\n\n// Generate requester sections HTML - ENHANCED\nfunction generateRequesterSectionsHtml(groupedIssues) {\n  const requesters = Object.keys(groupedIssues).sort();\n  let sectionsHtml = '';\n  \n  for (const requester of requesters) {\n    const data = groupedIssues[requester];\n    // Create clean anchor ID matching navigation\n    const anchorId = requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '') // Remove special characters\n      .replace(/\\s+/g, '-') // Replace spaces with hyphens\n      .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens\n    \n    let ticketsHtml = '';\n    \n    // Show first 3 tickets in detail, rest simplified\n    for (let i = 0; i < data.tickets.length; i++) {\n      //const detailed = i < 3; // First 3 tickets get detailed view\n      const detailed = true;\n      ticketsHtml += generateTicketHtml(data.tickets[i], detailed);\n    }\n    \n    // Critical section styling\n    const criticalSection = data.criticalCount > 0 ? 'border-left: 5px solid #e74c3c;' : '';\n    \n    sectionsHtml += `\n      <div class=\"requester-section\" id=\"${anchorId}\" style=\"${criticalSection}\">\n        <div class=\"requester-header\" style=\"background-color: #003f7f;\">\n          <h3>${requester}</h3>\n          <div class=\"requester-stats\">${data.tickets.length} tickets • ${data.totalStoryPoints} story points • ${data.readyCount} ready, ${data.needsWorkCount} need work${data.criticalCount > 0 ? ` • <span style=\"color: #ff6600; font-weight: bold;\">⚠ ${data.criticalCount} KRITIEKE ITEMS</span>` : ''}</div>\n        </div>\n        <div style=\"padding: 0 20px;\">\n          ${ticketsHtml}\n        </div>\n      </div>\n    `;\n  }\n  \n  return sectionsHtml;\n}\n\n// Generate insights section - NEW\nfunction generateInsightsHtml(groupedIssues, summary) {\n  const totalRequesters = Object.keys(groupedIssues).length;\n  const criticalIssues = Object.values(groupedIssues).reduce((sum, data) => sum + data.criticalCount, 0);\n  const highPriorityIssues = Object.values(groupedIssues).reduce((sum, data) => sum + data.highPriorityCount, 0);\n  \n  const sprintCapacity = 40; // Assumed sprint capacity\n  const capacityUsage = Math.round((summary.totalStoryPoints / sprintCapacity) * 100);\n  \n  if (criticalIssues > 0 || capacityUsage > 80) {\n    return `\n      <div style=\"background-color: ${criticalIssues > 0 ? '#fdf2f2' : '#fff3cd'}; padding: 20px; margin: 0; border-left: 5px solid ${criticalIssues > 0 ? '#e74c3c' : '#f39c12'};\">\n        <h2 style=\"margin: 0 0 15px 0; font-size: 16px; color: ${criticalIssues > 0 ? '#e74c3c' : '#f39c12'}; font-weight: 600;\">⚠ Sprint Planning Alerts</h2>\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;\">\n          ${criticalIssues > 0 ? `\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid #e74c3c;\">\n            <div style=\"font-size: 18px; font-weight: 600; color: #e74c3c;\">${criticalIssues}</div>\n            <div style=\"font-size: 12px; color: #333;\">Kritieke Issues</div>\n            <div style=\"font-size: 10px; color: #666;\">Directe aandacht vereist</div>\n          </div>\n          ` : ''}\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid ${capacityUsage > 100 ? '#e74c3c' : '#f39c12'};\">\n            <div style=\"font-size: 18px; font-weight: 600; color: ${capacityUsage > 100 ? '#e74c3c' : '#f39c12'};\">${capacityUsage}%</div>\n            <div style=\"font-size: 12px; color: #333;\">Sprint Capaciteit</div>\n            <div style=\"font-size: 10px; color: #666;\">${summary.totalStoryPoints}/${sprintCapacity} story points</div>\n          </div>\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid #3498db;\">\n            <div style=\"font-size: 18px; font-weight: 600; color: #3498db;\">${totalRequesters}</div>\n            <div style=\"font-size: 12px; color: #333;\">Actieve Aanvragers</div>\n            <div style=\"font-size: 10px; color: #666;\">Verschillende teams</div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  return '';\n}\n\n// MAIN GENERATION LOGIC - FIXED\nlet navigationHtml = '';\nlet ticketsSectionsHtml = '';\nlet insightsHtml = '';\n\nif (issues.length > 0) {\n  // First, properly parse all story points from individual issues\n  const issuesWithParsedPoints = issues.map(issue => ({\n    ...issue,\n    storyPointsValue: parseStoryPoints(issue.storyPoints)\n  }));\n  \n  const groupedIssues = groupIssuesByRequester(issuesWithParsedPoints);\n  \n  // Recalculate summary with proper story points - completely override the malformed data\n  const calculatedSummary = {\n    totalIssues: issues.length,\n    totalStoryPoints: issuesWithParsedPoints.reduce((sum, issue) => sum + issue.storyPointsValue, 0),\n    readyCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Ready').length,\n    needsWorkCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Needs Work').length,\n    blockedCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Blocked').length,\n    avgComplexity: summary.avgComplexity || 0\n  };\n  \n  console.log(`Calculated summary: ${calculatedSummary.totalStoryPoints} total points, ${calculatedSummary.readyCount} ready, ${calculatedSummary.needsWorkCount} needs work`);\n  \n  navigationHtml = generateNavigationHtml(groupedIssues);\n  ticketsSectionsHtml = generateRequesterSectionsHtml(groupedIssues);\n  insightsHtml = generateInsightsHtml(groupedIssues, calculatedSummary);\n  \n  // Replace summary completely with calculated values\n  summary = calculatedSummary;\n  \n} else {\n  ticketsSectionsHtml = `\n    <div class=\"ticket\">\n      <div class=\"ticket-content\">\n        <p>No issues found or error in processing.</p>\n        <p>Debug info: ${JSON.stringify(inputData.debugInfo || {}, null, 2)}</p>\n      </div>\n    </div>\n  `;\n}\n\n// COMPLETE DYNAMIC HTML EMAIL - ALTRAD STYLED\nconst fullHtml = `\n<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { \n            font-family: 'Calibri', 'Segoe UI', Arial, sans-serif; \n            line-height: 1.5; \n            color: #2c3e50; \n            max-width: 800px;\n            margin: 0 auto;\n            background-color: #ffffff;\n        }\n        .email-container {\n            background-color: white;\n            margin: 0;\n            border: 1px solid #e5e5e5;\n        }\n        .header { \n            background-color: #003f7f;\n            color: white; \n            padding: 20px; \n            border-bottom: 3px solid #ff6600;\n            position: relative;\n        }\n        .header::after {\n            content: '';\n            position: absolute;\n            top: 0;\n            right: 0;\n            width: 80px;\n            height: 100%;\n            background-color: #ff6600;\n        }\n        .header h1 { \n            margin: 0; \n            font-size: 20px; \n            font-weight: 600;\n            position: relative;\n            z-index: 2;\n        }\n        .header p { \n            margin: 8px 0 0 0; \n            font-size: 14px;\n            opacity: 0.9; \n            position: relative;\n            z-index: 2;\n        }\n        \n        .summary { \n            background-color: #f8f9fa; \n            padding: 20px; \n            margin: 0;\n            border-bottom: 1px solid #e5e5e5;\n        }\n        .summary h2 {\n            margin: 0 0 15px 0; \n            font-size: 16px;\n            color: #003f7f;\n            font-weight: 600;\n        }\n        \n        .requester-navigation {\n            background-color: #ecf0f1;\n            padding: 20px;\n            margin: 0;\n            border-bottom: 2px solid #ff6600;\n        }\n        .requester-navigation h2 {\n            margin: 0 0 15px 0;\n            font-size: 16px;\n            color: #003f7f;\n            font-weight: 600;\n        }\n        .requester-links {\n            display: block;\n        }\n        .requester-link {\n            background-color: #003f7f;\n            color: white !important;\n            text-decoration: none !important;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n            display: inline-block;\n            margin: 5px 5px 5px 0;\n        }\n        .requester-link:hover {\n            background-color: #002a5c;\n            transform: translateY(-1px);\n            color: white !important;\n        }\n        .requester-count {\n            background-color: rgba(255,255,255,0.3);\n            padding: 2px 6px;\n            border-radius: 10px;\n            margin-left: 5px;\n            font-size: 10px;\n            color: white;\n        }\n        \n        .requester-section {\n            margin: 0;\n            border-bottom: 2px solid #e5e5e5;\n        }\n        .requester-header {\n            background-color: #003f7f;\n            color: white;\n            padding: 15px 20px;\n            margin: 0;\n        }\n        .requester-header h3 {\n            margin: 0;\n            font-size: 18px;\n            font-weight: 600;\n        }\n        .requester-stats {\n            font-size: 12px;\n            opacity: 0.9;\n            margin-top: 5px;\n        }\n        \n        .ticket { \n            border: 2px solid #e5e5e5;\n            border-radius: 8px;\n            margin: 15px 0;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            overflow: hidden;\n        }\n        \n        .ticket-header { \n            background-color: #f8f9fa; \n            padding: 15px 20px; \n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            flex-wrap: wrap;\n            gap: 10px;\n        }\n        .ticket-title {\n            font-weight: 700;\n            font-size: 16px;\n            color: #1d1d1f;\n            flex: 1;\n            min-width: 200px;\n            background-color: #fff9e6;\n            padding: 8px 12px;\n            border-radius: 4px;\n            border-left: 4px solid #ff6600;\n        }\n        .ticket-badges {\n            display: flex;\n            gap: 8px;\n            flex-wrap: wrap;\n        }\n        \n        .badge {\n            padding: 3px 8px; \n            border-radius: 3px; \n            font-size: 11px;\n            font-weight: 600;\n            text-transform: uppercase;\n            white-space: nowrap;\n        }\n        .story-points { \n            background-color: #003f7f; \n            color: white; \n        }\n        .readiness-ready { \n            background-color: #27ae60; \n            color: white; \n        }\n        .readiness-needs-work { \n            background-color: #f39c12; \n            color: white; \n        }\n        .readiness-blocked { \n            background-color: #e74c3c; \n            color: white; \n        }\n        .complexity-low { \n            background-color: #d5f4e6; \n            color: #27ae60; \n            border: 1px solid #27ae60;\n        }\n        .complexity-medium { \n            background-color: #fef5e7; \n            color: #f39c12; \n            border: 1px solid #f39c12;\n        }\n        .complexity-high { \n            background-color: #fadbd8; \n            color: #e74c3c; \n            border: 1px solid #e74c3c;\n        }\n        \n        .ticket-content { \n            padding: 20px; \n        }\n        \n        .ticket-details {\n            background-color: #f8f9fa;\n            padding: 15px;\n            margin: 15px 0;\n            border: 1px solid #e5e5e5;\n            border-left: 3px solid #003f7f;\n            border-radius: 4px;\n        }\n        .ticket-details h4 {\n            margin: 0 0 10px 0;\n            color: #003f7f;\n            font-size: 13px;\n            font-weight: 600;\n        }\n        .details-content {\n            font-size: 12px;\n            line-height: 1.4;\n            color: #555;\n            white-space: pre-line;\n        }\n        \n        .ticket-link {\n            text-align: center;\n            margin-top: 15px;\n        }\n        .ticket-link a {\n            background-color: #003f7f;\n            color: white;\n            text-decoration: none;\n            font-weight: 600;\n            font-size: 13px;\n            padding: 10px 20px;\n            border-radius: 6px;\n            display: inline-block;\n            transition: all 0.3s;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        .ticket-link a:hover {\n            background-color: #002a5c;\n            transform: translateY(-1px);\n            box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n        }\n        \n        .footer { \n            padding: 20px; \n            border-top: 2px solid #e5e5e5; \n            color: #7f8c8d; \n            font-size: 11px;\n            background-color: #f8f9fa;\n        }\n        .footer-content {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n        }\n        .footer-section h4 {\n            margin: 0 0 8px 0;\n            color: #003f7f;\n            font-size: 12px;\n            font-weight: 600;\n        }\n        .footer-section p {\n            margin: 0;\n            line-height: 1.4;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"email-container\">\n        <div class=\"header\">\n            <h1>Sprint Refinement Analysis</h1>\n            <p>Altrad Services - APEX Development Team | ${currentDate} | ${summary.totalIssues} Issues voor Review</p>\n        </div>\n\n        <div class=\"summary\">\n            <h2>Refinement Overview</h2>\n            <table style=\"width: 100%; border-collapse: collapse; margin-top: 15px;\">\n                <tr>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #003f7f;\">${summary.totalStoryPoints}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Total Story Points</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #27ae60;\">${summary.readyCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Ready for Sprint</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #f39c12;\">${summary.needsWorkCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Require Clarification</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #e74c3c;\">${summary.blockedCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Blocked</div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n\n        ${insightsHtml}\n\n        ${navigationHtml}\n\n        ${ticketsSectionsHtml}\n\n        <div class=\"footer\">\n            <table style=\"width: 100%; border-collapse: collapse;\">\n                <tr>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Contact Information</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">Marco Schlicher<br>\n                        Oracle APEX Developer<br>\n                        Altrad Services<br>\n                        Marco.Schlicher@altrad.com</p>\n                    </td>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Next Refinement Meeting</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">${nextRefinementDate}<br>\n                        11:00 - 12:00<br>\n                         Teams</p>\n                    </td>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Sprint Information</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">\n                          ${sprintName}<br>\n                          Team Capacity: 40 Story Points<br>\n                          Sprint Start: ${sprintStart}<br>\n                          Sprint End: ${sprintEnd}\n                        </p>\n                    </td>\n                </tr>\n            </table>\n            <p style=\"margin-top: 20px; text-align: center; font-style: italic; font-size: 11px; color: #7f8c8d;\">\n                Automatisch gegenereerd door APEX Sprint Analyzer | Altrad Services © 2025\n            </p>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\n// **UPDATED** DYNAMIC EMAIL SUBJECT  (met sprintName)\nconst emailSubject = `Altrad Sprint Refinement - ${sprintName} - ${summary.totalIssues} Issues (${summary.totalStoryPoints} SP) - ${currentDate}`;\n\nconsole.log(`Generated email with subject: ${emailSubject}`);\nconsole.log(`Summary: ${summary.totalIssues} issues, ${summary.readyCount} ready, ${summary.needsWorkCount} needs work, ${summary.blockedCount} blocked`);\n\n// RETURN FINAL EMAIL DATA\nreturn [{\n  json: {\n    emailSubject: emailSubject,\n    emailHtml: fullHtml,\n    recipients: [\n      \"development.team@altradservices.com\", \n      \"team@altradservices.com\"\n    ],\n    summary: summary,\n    issueCount: issues.length,\n    generatedAt: new Date().toISOString(),\n    debugInfo: {\n      ticketsProcessed: issues.length,\n      summaryData: summary,\n      parseSuccess: inputData.parseSuccess\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        576
      ],
      "id": "cbe69149-2c64-44fb-a6f2-5c25621c5515",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "// DYNAMISCHE Email Generator Code Node voor n8n - ALTRAD STYLED VERSION\nconst inputData = $input.first().json;\n\n// **ADDED** Sprint info uit de HTTP Request node\nconst sprintItems = $items(\"HTTP Request\", 0, 0);\nconst sprintJson = sprintItems?.[0]?.json || {};\nconst activeSprint = sprintJson?.values?.[0] || {};\n\nfunction formatNl(d) {\n  if (!d) return \"Onbekend\";\n  const dt = new Date(d);\n  return dt.toLocaleDateString(\"nl-NL\", { day: \"numeric\", month: \"long\", year: \"numeric\" });\n}\n// **ADDED** Beschikbare sprint-variabelen\nconst sprintName = activeSprint?.name || \"Onbekende Sprint\";\nconst sprintStart = formatNl(activeSprint?.startDate);\nconst sprintEnd   = formatNl(activeSprint?.endDate);\n\n// Handle different input structures\nlet issues, summary;\nif (inputData.issues) {\n  // New structure: direct object with issues and summary\n  issues = inputData.issues || [];\n  summary = inputData.summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n} else if (Array.isArray(inputData) && inputData[0] && inputData[0].issues) {\n  // Array structure\n  issues = inputData[0].issues || [];\n  summary = inputData[0].summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n} else {\n  // Fallback for old structure\n  issues = inputData.issues || [];\n  summary = inputData.summary || {\n    totalIssues: 0,\n    totalStoryPoints: 0,\n    readyCount: 0,\n    needsWorkCount: 0,\n    blockedCount: 0,\n    avgComplexity: 0\n  };\n}\n\nconsole.log(`Processing ${issues.length} issues with ${summary.totalStoryPoints} total story points`);\n\nconst currentDate = new Date().toLocaleDateString('nl-NL', {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n});\n\n// Calculate next Wednesday for refinement meeting\nfunction getNextWednesday() {\n  const today = new Date();\n  const nextWednesday = new Date();\n  const daysUntilWednesday = (3 - today.getDay() + 7) % 7; // 3 = Wednesday\n  \n  // If today is Wednesday, get next Wednesday (7 days later)\n  if (daysUntilWednesday === 0) {\n    nextWednesday.setDate(today.getDate() + 7);\n  } else {\n    nextWednesday.setDate(today.getDate() + daysUntilWednesday);\n  }\n  \n  return nextWednesday.toLocaleDateString('nl-NL', {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  });\n}\n\nconst nextRefinementDate = getNextWednesday();\n\n// Helper functions\nfunction getReadinessClass(readiness) {\n  return readiness.toLowerCase().replace(' ', '-');\n}\n\nfunction getComplexityLevel(complexity) {\n  if (complexity <= 3) return 'low';\n  if (complexity <= 6) return 'medium';\n  return 'high';\n}\n\nfunction getPriorityLevel(priority) {\n  if (!priority) return 'medium';\n  const p = priority.toLowerCase();\n  if (p.includes('highest') || p.includes('critical')) return 'critical';\n  if (p.includes('high')) return 'high';\n  if (p.includes('low')) return 'low';\n  return 'medium';\n}\n\nfunction extractSummaryFromMarkdown(markdown, originalDescription = '') {\n  if (!markdown && !originalDescription) return 'No summary available';\n  \n  // First try to extract from **What:** section in markdown\n  if (markdown) {\n    const whatMatch = markdown.match(/\\*\\*What:\\*\\*\\s*([^*\\n]+)/);\n    if (whatMatch) {\n      let summary = whatMatch[1].trim();\n      // Limit to 200 characters for better display\n      if (summary.length > 200) {\n        summary = summary.substring(0, 197) + '...';\n      }\n      return summary;\n    }\n  }\n  \n  // Fallback to original description if available\n  if (originalDescription) {\n    let desc = originalDescription.trim();\n    // Clean up Jira markup\n    desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n    desc = desc.replace(/\\n\\s*\\n/g, ' '); // Replace multiple newlines with space\n    desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n    \n    if (desc.length > 200) {\n      desc = desc.substring(0, 197) + '...';\n    }\n    return desc;\n  }\n  \n  // Final fallback: extract from markdown content\n  if (markdown) {\n    const lines = markdown.split('\\n');\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (line && !line.startsWith('#') && !line.startsWith('**')) {\n        return line.length > 200 ? line.substring(0, 197) + '...' : line;\n      }\n    }\n  }\n  \n  return 'No summary available';\n}\n\n// Extract additional details from markdown - ENHANCED VERSION\nfunction extractTicketDetails(markdown) {\n  if (!markdown) return 'Geen details beschikbaar.';\n  \n  const details = {};\n  \n  // Extract all sections\n  const whoMatch = markdown.match(/\\*\\*Who:\\*\\*\\s*([^*\\n]+)/);\n  const whatMatch = markdown.match(/\\*\\*What:\\*\\*\\s*([^*\\n]+)/);\n  const whereMatch = markdown.match(/\\*\\*Where:\\*\\*\\s*([^*\\n]+)/);\n  const whyMatch = markdown.match(/\\*\\*Why:\\*\\*\\s*([^*\\n]+)/);\n  const whenMatch = markdown.match(/\\*\\*When:\\*\\*\\s*([^*\\n]+)/);\n  const priorityMatch = markdown.match(/\\*\\*Priority:\\*\\*\\s*([^*\\n]+)/);\n  \n  if (whoMatch) details.who = whoMatch[1].trim();\n  if (whatMatch) details.what = whatMatch[1].trim();\n  if (whereMatch) details.where = whereMatch[1].trim();\n  if (whyMatch) details.why = whyMatch[1].trim();\n  if (whenMatch) details.when = whenMatch[1].trim();\n  if (priorityMatch) details.priority = priorityMatch[1].trim();\n  \n  // Create enhanced format with priority indicators\n  let compact = '';\n  if (details.who) compact += `WHO: ${details.who} | `;\n  if (details.what) compact += `WHAT: ${details.what.length > 80 ? details.what.substring(0, 77) + '...' : details.what} | `;\n  if (details.where) compact += `WHERE: ${details.where} | `;\n  if (details.priority) compact += `PRIORITY: ${details.priority}`;\n  \n  return compact || 'Details beschikbaar in Jira.';\n}\n\n// Extract requester from markdown - VERBETERDE VERSIE DIE REPORTER PAKT, NIET ASSIGNEE\nfunction extractRequester(markdown) {\n  if (!markdown) return 'Unknown';\n  \n  const whoMatch = markdown.match(/\\*\\*Who:\\*\\*\\s*([^*\\n]+)/);\n  if (whoMatch) {\n    let whoText = whoMatch[1].trim();\n    \n    // Clean up WOM Support Mail prefix\n    whoText = whoText.replace(/WOM Support Mail\\s*-\\s*/gi, '');\n    \n    // PRIORITEIT 1: Zoek expliciet naar (Reporter)\n    const reporterMatch = whoText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)\\s*\\(Reporter\\)/);\n    if (reporterMatch) {\n      return reporterMatch[1].trim();\n    }\n    \n    // PRIORITEIT 2: Zoek naar (Creator) - vaak ook de reporter\n    const creatorMatch = whoText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)\\s*\\(Creator\\)/);\n    if (creatorMatch) {\n      return creatorMatch[1].trim();\n    }\n    \n    // PRIORITEIT 3: Identificeer de assignee om te vermijden\n    const assigneeMatch = whoText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)\\s*\\(Assignee\\)/);\n    const assigneeName = assigneeMatch ? assigneeMatch[1].trim() : null;\n    \n    // Verwijder alle haakjes en extra info voor verdere verwerking\n    let cleanText = whoText.replace(/\\(.*?\\)/g, ''); // Remove all parentheses content\n    cleanText = cleanText.replace(/reported this issue and.*$/gi, ''); // Remove long descriptions\n    cleanText = cleanText.replace(/roles in.*$/gi, ''); // Remove role descriptions\n    cleanText = cleanText.replace(/,\\s*$/, ''); // Remove trailing comma\n    \n    // PRIORITEIT 4: Extract alle mogelijke namen en kies de eerste die NIET de assignee is\n    const namePatterns = [\n      /([A-Z][a-z]+ [A-Z][a-z]+ [A-Z][a-z]+)/g, // \"Firstname Middlename Lastname\" \n      /([A-Z][a-z]+ [A-Z][a-z]+)/g, // \"Firstname Lastname\"\n      /([A-Z][a-z]+)/g // Just \"Firstname\"\n    ];\n    \n    const excludeRoles = ['Requester', 'Coordinator', 'Werfleider', 'Reporter', 'Creator', 'Assignee'];\n    \n    for (const pattern of namePatterns) {\n      const matches = [...cleanText.matchAll(pattern)];\n      for (const match of matches) {\n        const name = match[1].trim();\n        if (!excludeRoles.includes(name) && name !== assigneeName) {\n          return name;\n        }\n      }\n    }\n    \n    // LAATSTE RESORT: Pak de eerste naam, ook al is het misschien de assignee\n    const firstNameMatch = cleanText.match(/([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)/);\n    if (firstNameMatch && !excludeRoles.includes(firstNameMatch[1])) {\n      return firstNameMatch[1].trim();\n    }\n  }\n  \n  return 'Unknown';\n}\n\n// Parse story points from string format \"2 à 3\" to numeric value\nfunction parseStoryPoints(storyPointsStr) {\n  if (!storyPointsStr) return 0;\n  if (typeof storyPointsStr === 'number') return storyPointsStr;\n  \n  // Handle formats like \"2 à 3\", \"3 à 5\", \"1 à 2\"\n  const match = storyPointsStr.toString().match(/(\\d+)\\s*à\\s*(\\d+)/);\n  if (match) {\n    return parseInt(match[2]); // Use the higher number\n  }\n  \n  // Handle simple numbers\n  const simpleMatch = storyPointsStr.toString().match(/(\\d+)/);\n  if (simpleMatch) {\n    return parseInt(simpleMatch[1]);\n  }\n  \n  return 0;\n}\n\n// Group issues by requester - ENHANCED\nfunction groupIssuesByRequester(issues) {\n  const grouped = {};\n  \n  for (const issue of issues) {\n    const requester = extractRequester(issue.markdown);\n    \n    if (!grouped[requester]) {\n      grouped[requester] = {\n        tickets: [],\n        totalStoryPoints: 0,\n        readyCount: 0,\n        needsWorkCount: 0,\n        blockedCount: 0,\n        criticalCount: 0,\n        highPriorityCount: 0\n      };\n    }\n    \n    // Extract priority for enhanced tracking\n    const details = extractTicketDetails(issue.markdown);\n    const priorityLevel = getPriorityLevel(details.priority || issue.priority);\n    \n    // Use pre-parsed story points or parse if not available\n    const storyPointsValue = issue.storyPointsValue || parseStoryPoints(issue.storyPoints);\n    \n    // Add priority info to issue\n    const enhancedIssue = {...issue, priorityLevel, details, storyPointsValue};\n    \n    grouped[requester].tickets.push(enhancedIssue);\n    grouped[requester].totalStoryPoints += storyPointsValue;\n    \n    const readiness = issue.sprintReadiness || 'Unknown';\n    if (readiness === 'Ready') {\n      grouped[requester].readyCount++;\n    } else if (readiness === 'Needs Work') {\n      grouped[requester].needsWorkCount++;\n    } else if (readiness === 'Blocked') {\n      grouped[requester].blockedCount++;\n    }\n    \n    // Track priority levels\n    if (priorityLevel === 'critical') {\n      grouped[requester].criticalCount++;\n    } else if (priorityLevel === 'high') {\n      grouped[requester].highPriorityCount++;\n    }\n  }\n  \n  // Sort tickets within each requester by priority then readiness\n  Object.keys(grouped).forEach(requester => {\n    grouped[requester].tickets.sort((a, b) => {\n      const priorityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };\n      const readinessOrder = { 'Ready': 0, 'Needs Work': 1, 'Blocked': 2, 'Unknown': 3 };\n      \n      const priorityDiff = priorityOrder[a.priorityLevel] - priorityOrder[b.priorityLevel];\n      if (priorityDiff !== 0) return priorityDiff;\n      \n      return readinessOrder[a.sprintReadiness || 'Unknown'] - readinessOrder[b.sprintReadiness || 'Unknown'];\n    });\n  });\n  \n  return grouped;\n}\n\n// Generate ticket HTML - ENHANCED WITH PRIORITY\nfunction generateTicketHtml(issue, detailed = false) {\n  const key = issue.key || 'UNKNOWN';\n  const storyPointsValue = issue.storyPointsValue || parseStoryPoints(issue.storyPoints);\n  const storyPointsDisplay = issue.storyPoints || storyPointsValue; // Keep original format for display\n  const sprintReadiness = issue.sprintReadiness || 'Unknown';\n  const complexity = issue.technicalComplexity || 0;\n  const clarity = issue.clarityScore || 0;\n  const priorityLevel = issue.priorityLevel || 'medium';\n  \n  const readinessClass = getReadinessClass(sprintReadiness);\n  const complexityLevel = getComplexityLevel(complexity);\n  const issueSummary = extractSummaryFromMarkdown(issue.markdown, issue.description);\n  \n  // Priority styling\n  const priorityColor = priorityLevel === 'critical' ? '#e74c3c' : \n                       priorityLevel === 'high' ? '#f39c12' : \n                       priorityLevel === 'low' ? '#27ae60' : '#3498db';\n  \n  let contentHtml = '';\n  \n  if (detailed) {\n    const ticketDetails = extractTicketDetails(issue.markdown);\n    \n    // Enhanced details - use original description for problematic tickets\n    let detailsDisplay = '';\n    \n    // Check if this is one of the problematic tickets that need special handling\n    const problematicTickets = ['WOMDEV-1959', 'WOMDEV-1957', 'WOMDEV-1938'];\n    \n    if (problematicTickets.includes(key) && issue.description) {\n      // For these specific tickets, prioritize the original description\n      let desc = issue.description.trim();\n      desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n      desc = desc.replace(/\\n\\s*\\n/g, '\\n'); // Clean up extra newlines\n      desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n      \n      // Keep more content for these important tickets\n      if (desc.length > 400) {\n        desc = desc.substring(0, 397) + '...';\n      }\n      detailsDisplay = desc;\n    } else if (ticketDetails && ticketDetails !== 'Details beschikbaar in Jira.' && ticketDetails !== 'Geen details beschikbaar.') {\n      // Use extracted markdown details if they're good\n      detailsDisplay = ticketDetails;\n    } else if (issue.description) {\n      // Fallback to original description for other tickets\n      let desc = issue.description.trim();\n      desc = desc.replace(/!\\w+.*?!/g, ''); // Remove image references\n      desc = desc.replace(/\\n\\s*\\n/g, '\\n'); // Clean up extra newlines\n      desc = desc.replace(/\\s+/g, ' '); // Normalize whitespace\n      if (desc.length > 350) {\n        desc = desc.substring(0, 347) + '...';\n      }\n      detailsDisplay = desc;\n    } else {\n      detailsDisplay = ticketDetails || 'Geen aanvullende details beschikbaar.';\n    }\n    \n    // Always show detailed content for detailed view\n    contentHtml = `\n      <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 15px; padding: 15px; background-color: #f8f9fa; border: 1px solid #e5e5e5; border-radius: 6px;\">\n        <tr>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${complexity}/10</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Complexity</div>\n          </td>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${clarity}/10</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Clarity</div>\n          </td>\n          <td style=\"text-align: center; width: 33%; padding: 10px;\">\n            <div style=\"font-size: 16px; font-weight: 600; color: #003f7f;\">${storyPointsDisplay}</div>\n            <div style=\"font-size: 11px; color: #7f8c8d; text-transform: uppercase; margin-top: 3px;\">Story Points</div>\n          </td>\n        </tr>\n      </table>\n      \n      <div class=\"ticket-details\">\n        <h4 style=\"color: #003f7f;\">Ticket Details</h4>\n        <div class=\"details-content\" style=\"white-space: pre-wrap; font-size: 12px; line-height: 1.4; color: #555;\">${detailsDisplay}</div>\n      </div>\n    `;\n  }\n  \n  // Critical issue styling\n  const criticalBorder = priorityLevel === 'critical' ? 'border: 3px solid #e74c3c !important;' : '';\n  \n  return `\n    <div class=\"ticket\" style=\"${criticalBorder}\">\n      <div class=\"ticket-header\">\n        <div class=\"ticket-title\">${key}: ${issueSummary}</div>\n        <div class=\"ticket-badges\">\n          <span class=\"badge story-points\">${storyPointsDisplay} SP</span>\n          <span class=\"badge\" style=\"background-color: ${priorityColor}; color: white;\">${priorityLevel.toUpperCase()}</span>\n          <span class=\"badge readiness-${readinessClass}\">${sprintReadiness.toUpperCase()}</span>\n          <span class=\"badge complexity-${complexityLevel}\">${complexityLevel.toUpperCase()}</span>\n        </div>\n      </div>\n      <div class=\"ticket-content\">\n        ${contentHtml}\n        <div class=\"ticket-link\">\n          <a href=\"${issue.url || `https://altradservices-bnl.atlassian.net/browse/${key}`}\">🔗 Bekijk in Jira</a>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// Generate navigation HTML - SIMPLE WITH BETTER COLORS\nfunction generateNavigationHtml(groupedIssues) {\n  const requesters = Object.keys(groupedIssues).sort();\n  \n  const linksHtml = requesters.map(requester => {\n    const data = groupedIssues[requester];\n    const anchorId = requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/^-+|-+$/g, '');\n    \n    const criticalAlert = data.criticalCount > 0 ? 'background-color: #e74c3c !important;' : '';\n    \n    return `<a href=\"#${anchorId}\" class=\"requester-link\" style=\"${criticalAlert}color: white !important;\">${requester} <span class=\"requester-count\">${data.tickets.length}</span>${data.criticalCount > 0 ? ` <span style=\"background-color: rgba(255,255,255,0.3); color: white; padding: 2px 6px; border-radius: 10px; margin-left: 5px; font-size: 9px;\">⚠ ${data.criticalCount} KRITIEK</span>` : ''}</a>`;\n  }).join('');\n  \n  return `\n    <div class=\"requester-navigation\">\n      <h2>Navigatie per Requester</h2>\n      <div class=\"requester-links\">\n        ${linksHtml}\n      </div>\n    </div>\n  `;\n}\n\n// Generate requester sections HTML - ENHANCED\nfunction generateRequesterSectionsHtml(groupedIssues) {\n  const requesters = Object.keys(groupedIssues).sort();\n  let sectionsHtml = '';\n  \n  for (const requester of requesters) {\n    const data = groupedIssues[requester];\n    // Create clean anchor ID matching navigation\n    const anchorId = requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '') // Remove special characters\n      .replace(/\\s+/g, '-') // Replace spaces with hyphens\n      .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens\n    \n    let ticketsHtml = '';\n    \n    // Show first 3 tickets in detail, rest simplified\n    for (let i = 0; i < data.tickets.length; i++) {\n      //const detailed = i < 3; // First 3 tickets get detailed view\n      const detailed = true;\n      ticketsHtml += generateTicketHtml(data.tickets[i], detailed);\n    }\n    \n    // Critical section styling\n    const criticalSection = data.criticalCount > 0 ? 'border-left: 5px solid #e74c3c;' : '';\n    \n    sectionsHtml += `\n      <div class=\"requester-section\" id=\"${anchorId}\" style=\"${criticalSection}\">\n        <div class=\"requester-header\" style=\"background-color: #003f7f;\">\n          <h3>${requester}</h3>\n          <div class=\"requester-stats\">${data.tickets.length} tickets • ${data.totalStoryPoints} story points • ${data.readyCount} ready, ${data.needsWorkCount} need work${data.criticalCount > 0 ? ` • <span style=\"color: #ff6600; font-weight: bold;\">⚠ ${data.criticalCount} KRITIEKE ITEMS</span>` : ''}</div>\n        </div>\n        <div style=\"padding: 0 20px;\">\n          ${ticketsHtml}\n        </div>\n      </div>\n    `;\n  }\n  \n  return sectionsHtml;\n}\n\n// Generate \"Needs Work\" section - NEW\nfunction generateNeedsWorkSection(groupedIssues) {\n  const needsWorkTickets = [];\n  Object.keys(groupedIssues).forEach(requester => {\n    groupedIssues[requester].tickets.forEach(ticket => {\n      if (ticket.sprintReadiness === 'Needs Work') {\n        needsWorkTickets.push({...ticket, requester});\n      }\n    });\n  });\n  \n  if (needsWorkTickets.length === 0) return '';\n  \n  const ticketLinks = needsWorkTickets.map(ticket => {\n    const requesterAnchor = ticket.requester.toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/^-+|-+$/g, '');\n    \n    const summary = extractSummaryFromMarkdown(ticket.markdown, ticket.description);\n    \n    return `\n      <div style=\"background: white; padding: 12px; margin: 8px 0; border-radius: 6px; border-left: 3px solid #f39c12;\">\n        <div style=\"display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px;\">\n          <div style=\"flex: 1; min-width: 200px;\">\n            <strong style=\"color: #f39c12;\">${ticket.key}</strong> \n            <span style=\"color: #666; font-size: 12px;\">(${ticket.requester})</span>\n            <div style=\"margin-top: 4px; color: #555; font-size: 13px; line-height: 1.3;\">${summary}</div>\n          </div>\n          <a href=\"#${requesterAnchor}\" style=\"background-color: #f39c12; color: white; text-decoration: none; padding: 6px 12px; border-radius: 4px; font-size: 11px; font-weight: 600;\">NAAR TICKET</a>\n        </div>\n      </div>\n    `;\n  }).join('');\n  \n  return `\n    <div style=\"background-color: #fef5e7; padding: 20px; margin: 0; border-left: 5px solid #f39c12;\">\n      <h2 style=\"margin: 0 0 15px 0; font-size: 16px; color: #f39c12; font-weight: 600;\">⚠ Tickets die Clarification Nodig Hebben (${needsWorkTickets.length})</h2>\n      <div style=\"margin-top: 10px;\">\n        ${ticketLinks}\n      </div>\n    </div>\n  `;\n}\n\n// Generate insights section - UPDATED\nfunction generateInsightsHtml(groupedIssues, summary) {\n  const totalRequesters = Object.keys(groupedIssues).length;\n  const criticalIssues = Object.values(groupedIssues).reduce((sum, data) => sum + data.criticalCount, 0);\n  const highPriorityIssues = Object.values(groupedIssues).reduce((sum, data) => sum + data.highPriorityCount, 0);\n  \n  const sprintCapacity = 40; // Assumed sprint capacity\n  const capacityUsage = Math.round((summary.totalStoryPoints / sprintCapacity) * 100);\n  \n  if (criticalIssues > 0 || capacityUsage > 80) {\n    return `\n      <div style=\"background-color: ${criticalIssues > 0 ? '#fdf2f2' : '#fff3cd'}; padding: 20px; margin: 0; border-left: 5px solid ${criticalIssues > 0 ? '#e74c3c' : '#f39c12'};\">\n        <h2 style=\"margin: 0 0 15px 0; font-size: 16px; color: ${criticalIssues > 0 ? '#e74c3c' : '#f39c12'}; font-weight: 600;\">⚠ Sprint Planning Alerts</h2>\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;\">\n          ${criticalIssues > 0 ? `\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid #e74c3c;\">\n            <div style=\"font-size: 18px; font-weight: 600; color: #e74c3c;\">${criticalIssues}</div>\n            <div style=\"font-size: 12px; color: #333;\">Kritieke Issues</div>\n            <div style=\"font-size: 10px; color: #666;\">Directe aandacht vereist</div>\n          </div>\n          ` : ''}\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid ${capacityUsage > 100 ? '#e74c3c' : '#f39c12'};\">\n            <div style=\"font-size: 18px; font-weight: 600; color: ${capacityUsage > 100 ? '#e74c3c' : '#f39c12'};\">${capacityUsage}%</div>\n            <div style=\"font-size: 12px; color: #333;\">Sprint Capaciteit</div>\n            <div style=\"font-size: 10px; color: #666;\">${summary.totalStoryPoints}/${sprintCapacity} story points</div>\n          </div>\n          <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 3px solid #3498db;\">\n            <div style=\"font-size: 18px; font-weight: 600; color: #3498db;\">${totalRequesters}</div>\n            <div style=\"font-size: 12px; color: #333;\">Actieve Aanvragers</div>\n            <div style=\"font-size: 10px; color: #666;\">Verschillende teams</div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  return '';\n}\n\n// MAIN GENERATION LOGIC - UPDATED MET NEEDS WORK SECTION\nlet navigationHtml = '';\nlet ticketsSectionsHtml = '';\nlet insightsHtml = '';\nlet needsWorkHtml = '';\n\nif (issues.length > 0) {\n  // First, properly parse all story points from individual issues\n  const issuesWithParsedPoints = issues.map(issue => ({\n    ...issue,\n    storyPointsValue: parseStoryPoints(issue.storyPoints)\n  }));\n  \n  const groupedIssues = groupIssuesByRequester(issuesWithParsedPoints);\n  \n  // Recalculate summary with proper story points - completely override the malformed data\n  const calculatedSummary = {\n    totalIssues: issues.length,\n    totalStoryPoints: issuesWithParsedPoints.reduce((sum, issue) => sum + issue.storyPointsValue, 0),\n    readyCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Ready').length,\n    needsWorkCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Needs Work').length,\n    blockedCount: issuesWithParsedPoints.filter(issue => issue.sprintReadiness === 'Blocked').length,\n    avgComplexity: summary.avgComplexity || 0\n  };\n  \n  console.log(`Calculated summary: ${calculatedSummary.totalStoryPoints} total points, ${calculatedSummary.readyCount} ready, ${calculatedSummary.needsWorkCount} needs work`);\n  \n  navigationHtml = generateNavigationHtml(groupedIssues);\n  ticketsSectionsHtml = generateRequesterSectionsHtml(groupedIssues);\n  insightsHtml = generateInsightsHtml(groupedIssues, calculatedSummary);\n  needsWorkHtml = generateNeedsWorkSection(groupedIssues); // **TOEGEVOEGD**\n  \n  // Replace summary completely with calculated values\n  summary = calculatedSummary;\n  \n} else {\n  ticketsSectionsHtml = `\n    <div class=\"ticket\">\n      <div class=\"ticket-content\">\n        <p>No issues found or error in processing.</p>\n        <p>Debug info: ${JSON.stringify(inputData.debugInfo || {}, null, 2)}</p>\n      </div>\n    </div>\n  `;\n}\n\n// COMPLETE DYNAMIC HTML EMAIL - ALTRAD STYLED\nconst fullHtml = `\n<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { \n            font-family: 'Calibri', 'Segoe UI', Arial, sans-serif; \n            line-height: 1.5; \n            color: #2c3e50; \n            max-width: 800px;\n            margin: 0 auto;\n            background-color: #ffffff;\n        }\n        .email-container {\n            background-color: white;\n            margin: 0;\n            border: 1px solid #e5e5e5;\n        }\n        .header { \n            background-color: #003f7f;\n            color: white; \n            padding: 20px; \n            border-bottom: 3px solid #ff6600;\n            position: relative;\n        }\n        .header::after {\n            content: '';\n            position: absolute;\n            top: 0;\n            right: 0;\n            width: 80px;\n            height: 100%;\n            background-color: #ff6600;\n        }\n        .header h1 { \n            margin: 0; \n            font-size: 20px; \n            font-weight: 600;\n            position: relative;\n            z-index: 2;\n        }\n        .header p { \n            margin: 8px 0 0 0; \n            font-size: 14px;\n            opacity: 0.9; \n            position: relative;\n            z-index: 2;\n        }\n        \n        .summary { \n            background-color: #f8f9fa; \n            padding: 20px; \n            margin: 0;\n            border-bottom: 1px solid #e5e5e5;\n        }\n        .summary h2 {\n            margin: 0 0 15px 0; \n            font-size: 16px;\n            color: #003f7f;\n            font-weight: 600;\n        }\n        \n        .requester-navigation {\n            background-color: #ecf0f1;\n            padding: 20px;\n            margin: 0;\n            border-bottom: 2px solid #ff6600;\n        }\n        .requester-navigation h2 {\n            margin: 0 0 15px 0;\n            font-size: 16px;\n            color: #003f7f;\n            font-weight: 600;\n        }\n        .requester-links {\n            display: block;\n        }\n        .requester-link {\n            background-color: #003f7f;\n            color: white !important;\n            text-decoration: none !important;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n            display: inline-block;\n            margin: 5px 5px 5px 0;\n        }\n        .requester-link:hover {\n            background-color: #002a5c;\n            transform: translateY(-1px);\n            color: white !important;\n        }\n        .requester-count {\n            background-color: rgba(255,255,255,0.3);\n            padding: 2px 6px;\n            border-radius: 10px;\n            margin-left: 5px;\n            font-size: 10px;\n            color: white;\n        }\n        \n        .requester-section {\n            margin: 0;\n            border-bottom: 2px solid #e5e5e5;\n        }\n        .requester-header {\n            background-color: #003f7f;\n            color: white;\n            padding: 15px 20px;\n            margin: 0;\n        }\n        .requester-header h3 {\n            margin: 0;\n            font-size: 18px;\n            font-weight: 600;\n        }\n        .requester-stats {\n            font-size: 12px;\n            opacity: 0.9;\n            margin-top: 5px;\n        }\n        \n        .ticket { \n            border: 2px solid #e5e5e5;\n            border-radius: 8px;\n            margin: 15px 0;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            overflow: hidden;\n        }\n        \n        .ticket-header { \n            background-color: #f8f9fa; \n            padding: 15px 20px; \n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            flex-wrap: wrap;\n            gap: 10px;\n        }\n        .ticket-title {\n            font-weight: 700;\n            font-size: 16px;\n            color: #1d1d1f;\n            flex: 1;\n            min-width: 200px;\n            background-color: #fff9e6;\n            padding: 8px 12px;\n            border-radius: 4px;\n            border-left: 4px solid #ff6600;\n        }\n        .ticket-badges {\n            display: flex;\n            gap: 8px;\n            flex-wrap: wrap;\n        }\n        \n        .badge {\n            padding: 3px 8px; \n            border-radius: 3px; \n            font-size: 11px;\n            font-weight: 600;\n            text-transform: uppercase;\n            white-space: nowrap;\n        }\n        .story-points { \n            background-color: #003f7f; \n            color: white; \n        }\n        .readiness-ready { \n            background-color: #27ae60; \n            color: white; \n        }\n        .readiness-needs-work { \n            background-color: #f39c12; \n            color: white; \n        }\n        .readiness-blocked { \n            background-color: #e74c3c; \n            color: white; \n        }\n        .complexity-low { \n            background-color: #d5f4e6; \n            color: #27ae60; \n            border: 1px solid #27ae60;\n        }\n        .complexity-medium { \n            background-color: #fef5e7; \n            color: #f39c12; \n            border: 1px solid #f39c12;\n        }\n        .complexity-high { \n            background-color: #fadbd8; \n            color: #e74c3c; \n            border: 1px solid #e74c3c;\n        }\n        \n        .ticket-content { \n            padding: 20px; \n        }\n        \n        .ticket-details {\n            background-color: #f8f9fa;\n            padding: 15px;\n            margin: 15px 0;\n            border: 1px solid #e5e5e5;\n            border-left: 3px solid #003f7f;\n            border-radius: 4px;\n        }\n        .ticket-details h4 {\n            margin: 0 0 10px 0;\n            color: #003f7f;\n            font-size: 13px;\n            font-weight: 600;\n        }\n        .details-content {\n            font-size: 12px;\n            line-height: 1.4;\n            color: #555;\n            white-space: pre-line;\n        }\n        \n        .ticket-link {\n            text-align: center;\n            margin-top: 15px;\n        }\n        .ticket-link a {\n            background-color: #003f7f;\n            color: white;\n            text-decoration: none;\n            font-weight: 600;\n            font-size: 13px;\n            padding: 10px 20px;\n            border-radius: 6px;\n            display: inline-block;\n            transition: all 0.3s;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        .ticket-link a:hover {\n            background-color: #002a5c;\n            transform: translateY(-1px);\n            box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n        }\n        \n        .footer { \n            padding: 20px; \n            border-top: 2px solid #e5e5e5; \n            color: #7f8c8d; \n            font-size: 11px;\n            background-color: #f8f9fa;\n        }\n        .footer-content {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n        }\n        .footer-section h4 {\n            margin: 0 0 8px 0;\n            color: #003f7f;\n            font-size: 12px;\n            font-weight: 600;\n        }\n        .footer-section p {\n            margin: 0;\n            line-height: 1.4;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"email-container\">\n        <div class=\"header\">\n            <h1>Sprint Refinement Analysis</h1>\n            <p>Altrad Services - APEX Development Team | ${currentDate} | ${summary.totalIssues} Issues voor Review</p>\n        </div>\n\n        <div class=\"summary\">\n            <h2>Refinement Overview</h2>\n            <table style=\"width: 100%; border-collapse: collapse; margin-top: 15px;\">\n                <tr>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #003f7f;\">${summary.totalStoryPoints}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Total Story Points</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #27ae60;\">${summary.readyCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Ready for Sprint</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #f39c12;\">${summary.needsWorkCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Require Clarification</div>\n                    </td>\n                    <td style=\"background: white; padding: 15px; border: 1px solid #e5e5e5; text-align: center; width: 25%;\">\n                        <div style=\"font-size: 18px; font-weight: 600; color: #e74c3c;\">${summary.blockedCount}</div>\n                        <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Blocked</div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n\n        ${insightsHtml}\n\n        ${needsWorkHtml}\n\n        ${navigationHtml}\n\n        ${ticketsSectionsHtml}\n\n        <div class=\"footer\">\n            <table style=\"width: 100%; border-collapse: collapse;\">\n                <tr>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Contact Information</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">Marco Schlicher<br>\n                        Oracle APEX Developer<br>\n                        Altrad Services<br>\n                        Marco.Schlicher@altrad.com</p>\n                    </td>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Next Refinement Meeting</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">${nextRefinementDate}<br>\n                        11:00 - 12:00<br>\n                         Teams</p>\n                    </td>\n                    <td style=\"width: 33%; padding: 10px; vertical-align: top;\">\n                        <h4 style=\"margin: 0 0 8px 0; color: #003f7f; font-size: 12px; font-weight: 600;\">Sprint Information</h4>\n                        <p style=\"margin: 0; line-height: 1.4; font-size: 11px;\">\n                          ${sprintName}<br>\n                          Team Capacity: 40 Story Points<br>\n                          Sprint Start: ${sprintStart}<br>\n                          Sprint End: ${sprintEnd}\n                        </p>\n                    </td>\n                </tr>\n            </table>\n            <p style=\"margin-top: 20px; text-align: center; font-style: italic; font-size: 11px; color: #7f8c8d;\">\n                Automatisch gegenereerd door APEX Sprint Analyzer | Altrad Services © 2025\n            </p>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\n// **UPDATED** DYNAMIC EMAIL SUBJECT  (met sprintName)\nconst emailSubject = `Altrad Sprint Refinement - ${sprintName} - ${summary.totalIssues} Issues (${summary.totalStoryPoints} SP) - ${currentDate}`;\n\nconsole.log(`Generated email with subject: ${emailSubject}`);\nconsole.log(`Summary: ${summary.totalIssues} issues, ${summary.readyCount} ready, ${summary.needsWorkCount} needs work, ${summary.blockedCount} blocked`);\n\n// RETURN FINAL EMAIL DATA\nreturn [{\n  json: {\n    emailSubject: emailSubject,\n    emailHtml: fullHtml,\n    recipients: [\n      \"development.team@altradservices.com\", \n      \"team@altradservices.com\"\n    ],\n    summary: summary,\n    issueCount: issues.length,\n    generatedAt: new Date().toISOString(),\n    debugInfo: {\n      ticketsProcessed: issues.length,\n      summaryData: summary,\n      parseSuccess: inputData.parseSuccess\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        576
      ],
      "id": "86e872ec-985d-4d7c-83a5-084c57505fd4",
      "name": "Code4"
    }
  ],
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        []
      ]
    },
    "Get many issues": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Json parser node",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Json parser node": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Send email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send email": {
      "main": [
        []
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Get many issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "ce9ac2a5-7a43-427a-bf46-5e93e9ca66d8",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-12T10:14:46.379Z",
      "updatedAt": "2025-08-12T10:14:46.379Z",
      "role": "workflow:owner",
      "workflowId": "C65mUMe25R7L55bj",
      "projectId": "GRYQdjzbr9zYZfKu"
    }
  ],
  "tags": [
    {
      "createdAt": "2025-08-25T09:35:01.870Z",
      "updatedAt": "2025-08-25T09:35:01.870Z",
      "id": "LHp1Krw36SOBZqeM",
      "name": "Jira"
    }
  ]
}